db_id,schema
activity_1,"CREATE TABLE Activity (
  actid INTEGER PRIMARY KEY,
  activity_name varchar(25)
);
CREATE TABLE Participates_in (
  stuid INTEGER,
  actid INTEGER,
  FOREIGN KEY(stuid) REFERENCES Student(StuID),
  FOREIGN KEY(actid) REFERENCES Activity(actid)
);
CREATE TABLE Faculty_Participates_in (
  FacID INTEGER,
  actid INTEGER,
  FOREIGN KEY(FacID) REFERENCES Faculty(FacID),
  FOREIGN KEY(actid) REFERENCES Activity(actid)
);
CREATE TABLE Student (
        StuID        INTEGER PRIMARY KEY,
        LName        VARCHAR(12),
        Fname        VARCHAR(12),
        Age      INTEGER,
        Sex      VARCHAR(1),
        Major        INTEGER,
        Advisor      INTEGER,
        city_code    VARCHAR(3)
 );
CREATE TABLE Faculty (
       FacID         INTEGER PRIMARY KEY,
       Lname  VARCHAR(15),
       Fname  VARCHAR(15),
       Rank  VARCHAR(15),
       Sex  VARCHAR(1),
       Phone  INTEGER,
       Room  VARCHAR(5),
       Building  VARCHAR(13)
);"
aircraft,"CREATE TABLE pilot (
  Pilot_Id int(11) NOT NULL,
  Name varchar(50) NOT NULL,
  Age int(11) NOT NULL,
  PRIMARY KEY (Pilot_Id)
);
CREATE TABLE aircraft (
  Aircraft_ID int(11) NOT NULL,
  Aircraft varchar(50) NOT NULL,
  Description varchar(50) NOT NULL,
  Max_Gross_Weight varchar(50) NOT NULL,
  Total_disk_area varchar(50) NOT NULL,
  Max_disk_Loading varchar(50) NOT NULL,
  PRIMARY KEY (Aircraft_ID)
);
CREATE TABLE match (
Round real,
Location text,
Country text,
Date text,
Fastest_Qualifying text,
Winning_Pilot text,
Winning_Aircraft text,
PRIMARY KEY (Round),
FOREIGN KEY (Winning_Aircraft) REFERENCES aircraft(Aircraft_ID),
FOREIGN KEY (Winning_Pilot) REFERENCES pilot(Pilot_Id)
);
CREATE TABLE airport (
Airport_ID int,
Airport_Name text,
Total_Passengers real,
%_Change_2007 text,
International_Passengers real,
Domestic_Passengers real,
Transit_Passengers real,
Aircraft_Movements real,
Freight_Metric_Tonnes real,
PRIMARY KEY (Airport_ID)
);
CREATE TABLE airport_aircraft (
ID int,
Airport_ID int,
Aircraft_ID int,
PRIMARY KEY (Airport_ID,Aircraft_ID),
FOREIGN KEY (Airport_ID) REFERENCES airport(Airport_ID),
FOREIGN KEY (Aircraft_ID) REFERENCES aircraft(Aircraft_ID)
);"
allergy_1,"CREATE TABLE Allergy_Type (
       Allergy     VARCHAR(20) PRIMARY KEY,
       AllergyType    VARCHAR(20)
);
CREATE TABLE Has_Allergy (
       StuID    INTEGER,
       Allergy    VARCHAR(20),
       FOREIGN KEY(StuID) REFERENCES Student(StuID),
       FOREIGN KEY(Allergy) REFERENCES Allergy_Type(Allergy)
);
CREATE TABLE Student (
        StuID        INTEGER PRIMARY KEY,
        LName        VARCHAR(12),
        Fname        VARCHAR(12),
        Age      INTEGER,
        Sex      VARCHAR(1),
        Major        INTEGER,
        Advisor      INTEGER,
        city_code    VARCHAR(3)
 );"
apartment_rentals,"CREATE TABLE Apartment_Buildings (
building_id INTEGER NOT NULL,
building_short_name CHAR(15),
building_full_name VARCHAR(80),
building_description VARCHAR(255),
building_address VARCHAR(255),
building_manager VARCHAR(50),
building_phone VARCHAR(80),
PRIMARY KEY (building_id),
UNIQUE (building_id)
);
CREATE TABLE Apartments (
apt_id INTEGER NOT NULL ,
building_id INTEGER NOT NULL,
apt_type_code CHAR(15),
apt_number CHAR(10),
bathroom_count INTEGER,
bedroom_count INTEGER,
room_count CHAR(5),
PRIMARY KEY (apt_id),
UNIQUE (apt_id),
FOREIGN KEY (building_id) REFERENCES Apartment_Buildings (building_id)
);
CREATE TABLE Apartment_Facilities (
apt_id INTEGER NOT NULL,
facility_code CHAR(15) NOT NULL,
PRIMARY KEY (apt_id, facility_code),
FOREIGN KEY (apt_id) REFERENCES Apartments (apt_id)
);
CREATE TABLE Guests (
guest_id INTEGER NOT NULL ,
gender_code CHAR(1),
guest_first_name VARCHAR(80),
guest_last_name VARCHAR(80),
date_of_birth DATETIME,
PRIMARY KEY (guest_id),
UNIQUE (guest_id)
);
CREATE TABLE Apartment_Bookings (
apt_booking_id INTEGER NOT NULL,
apt_id INTEGER,
guest_id INTEGER NOT NULL,
booking_status_code CHAR(15) NOT NULL,
booking_start_date DATETIME,
booking_end_date DATETIME,
PRIMARY KEY (apt_booking_id),
UNIQUE (apt_booking_id),
FOREIGN KEY (apt_id) REFERENCES Apartments (apt_id),
FOREIGN KEY (guest_id) REFERENCES Guests (guest_id)
);
CREATE TABLE View_Unit_Status (
apt_id INTEGER,
apt_booking_id INTEGER,
status_date DATETIME NOT NULL,
available_yn BIT,
PRIMARY KEY (status_date),
FOREIGN KEY (apt_id) REFERENCES Apartments (apt_id),
FOREIGN KEY (apt_booking_id) REFERENCES Apartment_Bookings (apt_booking_id)
);"
architecture,"CREATE TABLE architect (
id text,
name text,
nationality text,
gender text,
primary key(id)
);
CREATE TABLE bridge (
architect_id int,
id int,
name text,
location text,
length_meters real,
length_feet real,
primary key(id),
foreign key (architect_id ) references architect(id)
);
CREATE TABLE mill (
architect_id int,
id int,
location text,
name text,
type text,
built_year int,
notes text,
primary key (id),
foreign key (architect_id ) references architect(id)
);"
assets_maintenance,"CREATE TABLE Third_Party_Companies (
company_id INTEGER PRIMARY KEY ,
company_type VARCHAR(5) NOT NULL,
company_name VARCHAR(255),
company_address VARCHAR(255),
other_company_details VARCHAR(255)
);
CREATE TABLE Maintenance_Contracts (
maintenance_contract_id INTEGER PRIMARY KEY,
maintenance_contract_company_id INTEGER NOT NULL,
contract_start_date DATETIME,
contract_end_date DATETIME,
other_contract_details VARCHAR(255),
FOREIGN KEY (maintenance_contract_company_id ) REFERENCES Third_Party_Companies(company_id )
);
CREATE TABLE Parts (
part_id INTEGER PRIMARY KEY,
part_name VARCHAR(255),
chargeable_yn VARCHAR(1),
chargeable_amount VARCHAR(20),
other_part_details VARCHAR(255)
);
CREATE TABLE Skills (
skill_id INTEGER PRIMARY KEY,
skill_code VARCHAR(20),
skill_description VARCHAR(255)
);
CREATE TABLE Staff (
staff_id INTEGER PRIMARY KEY,
staff_name VARCHAR(255),
gender VARCHAR(1),
other_staff_details VARCHAR(255)
);
CREATE TABLE Assets (
asset_id INTEGER PRIMARY KEY,
maintenance_contract_id INTEGER NOT NULL,
supplier_company_id INTEGER NOT NULL,
asset_details VARCHAR(255),
asset_make VARCHAR(20),
asset_model VARCHAR(20),
asset_acquired_date DATETIME,
asset_disposed_date DATETIME,
other_asset_details VARCHAR(255),
FOREIGN KEY (maintenance_contract_id )
REFERENCES Maintenance_Contracts(maintenance_contract_id ),
FOREIGN KEY (supplier_company_id ) REFERENCES Third_Party_Companies(company_id )
);
CREATE TABLE Asset_Parts (
asset_id INTEGER NOT NULL,
part_id INTEGER NOT NULL,
FOREIGN KEY (part_id ) REFERENCES Parts(part_id ),
FOREIGN KEY (asset_id ) REFERENCES Assets(asset_id )
);
CREATE TABLE Maintenance_Engineers (
engineer_id INTEGER PRIMARY KEY,
company_id INTEGER NOT NULL,
first_name VARCHAR(50),
last_name VARCHAR(50),
other_details VARCHAR(255),
FOREIGN KEY (company_id ) REFERENCES Third_Party_Companies(company_id )
);
CREATE TABLE Engineer_Skills (
engineer_id INTEGER NOT NULL,
skill_id INTEGER NOT NULL,
FOREIGN KEY (engineer_id ) REFERENCES Maintenance_Engineers(engineer_id ),
FOREIGN KEY (skill_id ) REFERENCES Skills(skill_id )
);
CREATE TABLE Fault_Log (
fault_log_entry_id INTEGER PRIMARY KEY,
asset_id INTEGER NOT NULL,
recorded_by_staff_id INTEGER NOT NULL,
fault_log_entry_datetime DATETIME,
fault_description VARCHAR(255),
other_fault_details VARCHAR(255),
FOREIGN KEY (asset_id ) REFERENCES Assets(asset_id ),
FOREIGN KEY (recorded_by_staff_id ) REFERENCES Staff(staff_id )
);
CREATE TABLE Engineer_Visits (
engineer_visit_id INTEGER PRIMARY KEY,
contact_staff_id INTEGER,
engineer_id INTEGER NOT NULL,
fault_log_entry_id INTEGER NOT NULL,
fault_status VARCHAR(10) NOT NULL,
visit_start_datetime DATETIME,
visit_end_datetime DATETIME,
other_visit_details VARCHAR(255),
FOREIGN KEY (fault_log_entry_id ) REFERENCES Fault_Log(fault_log_entry_id ),
FOREIGN KEY (engineer_id ) REFERENCES Maintenance_Engineers(engineer_id ),
FOREIGN KEY (contact_staff_id ) REFERENCES Staff(staff_id )
);
CREATE TABLE Part_Faults (
part_fault_id INTEGER PRIMARY KEY,
part_id INTEGER NOT NULL,
fault_short_name VARCHAR(20),
fault_description VARCHAR(255),
other_fault_details VARCHAR(255),
FOREIGN KEY (part_id ) REFERENCES Parts(part_id )
);
CREATE TABLE Fault_Log_Parts (
fault_log_entry_id INTEGER NOT NULL,
part_fault_id INTEGER NOT NULL,
fault_status VARCHAR(10) NOT NULL,
FOREIGN KEY (part_fault_id ) REFERENCES Part_Faults(part_fault_id ),
FOREIGN KEY (fault_log_entry_id ) REFERENCES Fault_Log(fault_log_entry_id )
);
CREATE TABLE Skills_Required_To_Fix (
part_fault_id INTEGER NOT NULL,
skill_id INTEGER NOT NULL,
FOREIGN KEY (part_fault_id ) REFERENCES Part_Faults(part_fault_id ),
FOREIGN KEY (skill_id ) REFERENCES Skills(skill_id )
);"
baseball_1,"CREATE TABLE all_star (
    player_id TEXT,
    year INTEGER,
    game_num INTEGER,
    game_id TEXT,
    team_id TEXT,
    league_id TEXT,
    gp NUMERIC,
    starting_pos NUMERIC,
    foreign key (player_id) references player(player_id)
);
CREATE TABLE appearances (
    year INTEGER,
    team_id TEXT,
    league_id TEXT,
    player_id TEXT,
    g_all NUMERIC,
    gs NUMERIC,
    g_batting INTEGER,
    g_defense NUMERIC,
    g_p INTEGER,
    g_c INTEGER,
    g_1b INTEGER,
    g_2b INTEGER,
    g_3b INTEGER,
    g_ss INTEGER,
    g_lf INTEGER,
    g_cf INTEGER,
    g_rf INTEGER,
    g_of INTEGER,
    g_dh NUMERIC,
    g_ph NUMERIC,
    g_pr NUMERIC,
    foreign key (team_id) references team(team_id),
    foreign key (player_id) references player(player_id)
);
CREATE TABLE manager_award (
    player_id TEXT,
    award_id TEXT,
    year INTEGER,
    league_id TEXT,
    tie TEXT,
    notes NUMERIC,
    foreign key (player_id) references player(player_id)
);
CREATE TABLE player_award ( 
 player_id TEXT, 
 award_id TEXT, 
 year INTEGER, 
 league_id TEXT,
     tie TEXT,
     notes TEXT,
 foreign key (player_id) references player(player_id)
);
CREATE TABLE manager_award_vote (
    award_id TEXT,
    year INTEGER,
    league_id TEXT,
    player_id TEXT,
    points_won INTEGER,
    points_max INTEGER,
    votes_first INTEGER);
CREATE TABLE player_award_vote (
    award_id TEXT,
    year INTEGER,
    league_id TEXT,
    player_id TEXT,
    points_won NUMERIC,
    points_max INTEGER,
    votes_first NUMERIC,
   foreign key (player_id) references player(player_id)
);
CREATE TABLE batting ( player_id TEXT, year INTEGER, stint INTEGER, team_id TEXT, league_id TEXT, g INTEGER, ab NUMERIC,
    r NUMERIC,
    h NUMERIC,
    double NUMERIC,
    triple NUMERIC,
    hr NUMERIC,
    rbi NUMERIC,
    sb NUMERIC,
    cs NUMERIC,
    bb NUMERIC,
    so NUMERIC,
    ibb NUMERIC,
    hbp NUMERIC,
    sh NUMERIC,
    sf NUMERIC,
    g_idp NUMERIC,
foreign key (player_id) references player(player_id)
);
CREATE TABLE batting_postseason (
    year INTEGER,
    round TEXT,
    player_id TEXT,
    team_id TEXT,
    league_id TEXT,
    g INTEGER,
    ab INTEGER,
    r INTEGER,
    h INTEGER,
    double INTEGER,
    triple INTEGER,
    hr INTEGER,
    rbi INTEGER,
    sb INTEGER,
    cs NUMERIC,
    bb INTEGER,
    so INTEGER,
    ibb NUMERIC,
    hbp NUMERIC,
    sh NUMERIC,
    sf NUMERIC,
    g_idp NUMERIC,
 foreign key (player_id) references player(player_id),
 foreign key (team_id) references team(team_id)
);
CREATE TABLE player_college ( player_id TEXT,
    college_id TEXT,
    year INTEGER,
 foreign key (player_id) references player(player_id),
 foreign key (college_id) references college(college_id)
);
CREATE TABLE fielding (
    player_id TEXT,
    year INTEGER,
    stint INTEGER,
    team_id TEXT,
    league_id TEXT,
    pos TEXT,
    g INTEGER,
    gs NUMERIC,
    inn_outs NUMERIC,
    po NUMERIC,
    a NUMERIC,
    e NUMERIC,
    dp NUMERIC,
    pb NUMERIC,
    wp NUMERIC,
    sb NUMERIC,
    cs NUMERIC,
    zr NUMERIC,
 foreign key (player_id) references player(player_id)
);
CREATE TABLE fielding_outfield (
    player_id TEXT,
    year INTEGER,
    stint INTEGER,
    glf NUMERIC,
    gcf NUMERIC,
    grf NUMERIC,
 foreign key (player_id) references player(player_id)
);
CREATE TABLE fielding_postseason (
    player_id TEXT,
    year INTEGER,
    team_id TEXT,
    league_id TEXT,
    round TEXT,
    pos TEXT,
    g INTEGER,
    gs NUMERIC,
    inn_outs NUMERIC,
    po INTEGER,
    a INTEGER,
    e INTEGER,
    dp INTEGER,
    tp INTEGER,
    pb NUMERIC,
    sb NUMERIC,
    cs NUMERIC,
 foreign key (player_id) references player(player_id),
 foreign key (team_id) references player(team_id)
);
CREATE TABLE hall_of_fame (
    player_id TEXT,
    yearid INTEGER,
    votedby TEXT,
    ballots NUMERIC,
    needed NUMERIC,
    votes NUMERIC,
    inducted TEXT,
    category TEXT,
    needed_note TEXT,
 foreign key (player_id) references player(player_id)
);
CREATE TABLE home_game (
    year INTEGER,
    league_id TEXT,
    team_id TEXT,
    park_id TEXT,
    span_first TEXT,
    span_last TEXT,
    games INTEGER,
    openings INTEGER,
    attendance INTEGER,
 foreign key (team_id) references team(team_id),
 foreign key (park_id) references park(park_id)
);
CREATE TABLE manager (
    player_id TEXT,
    year INTEGER,
    team_id TEXT,
    league_id TEXT,
    inseason INTEGER,
    g INTEGER,
    w INTEGER,
    l INTEGER,
    rank NUMERIC,
    plyr_mgr TEXT,
 foreign key (team_id) references team(team_id)
);
CREATE TABLE manager_half (
    player_id TEXT,
    year INTEGER,
    team_id TEXT,
    league_id TEXT,
    inseason INTEGER,
    half INTEGER,
    g INTEGER,
    w INTEGER,
    l INTEGER,
    rank INTEGER,
 foreign key (team_id) references team(team_id)
);
CREATE TABLE player (
    player_id TEXT,
    birth_year NUMERIC,
    birth_month NUMERIC,
    birth_day NUMERIC,
    birth_country TEXT,
    birth_state TEXT,
    birth_city TEXT,
    death_year NUMERIC,
    death_month NUMERIC,
    death_day NUMERIC,
    death_country TEXT,
    death_state TEXT,
    death_city TEXT,
    name_first TEXT,
    name_last TEXT,
    name_given TEXT,
    weight NUMERIC,
    height NUMERIC,
    bats TEXT,
    throws TEXT,
    debut TEXT,
    final_game TEXT,
    retro_id TEXT,
    bbref_id TEXT);
CREATE TABLE park (
    park_id TEXT,
    park_name TEXT,
    park_alias TEXT,
    city TEXT,
    state TEXT,
    country TEXT);
CREATE TABLE pitching (
    player_id TEXT,
    year INTEGER,
    stint INTEGER,
    team_id TEXT,
    league_id TEXT,
    w INTEGER,
    l INTEGER,
    g INTEGER,
    gs INTEGER,
    cg INTEGER,
    sho INTEGER,
    sv INTEGER,
    ipouts NUMERIC,
    h INTEGER,
    er INTEGER,
    hr INTEGER,
    bb INTEGER,
    so INTEGER,
    baopp NUMERIC,
    era NUMERIC,
    ibb NUMERIC,
    wp NUMERIC,
    hbp NUMERIC,
    bk INTEGER,
    bfp NUMERIC,
    gf NUMERIC,
    r INTEGER,
    sh NUMERIC,
    sf NUMERIC,
    g_idp NUMERIC);
CREATE TABLE pitching_postseason (
    player_id TEXT,
    year INTEGER,
    round TEXT,
    team_id TEXT,
    league_id TEXT,
    w INTEGER,
    l INTEGER,
    g INTEGER,
    gs INTEGER,
    cg INTEGER,
    sho INTEGER,
    sv INTEGER,
    ipouts INTEGER,
    h INTEGER,
    er INTEGER,
    hr INTEGER,
    bb INTEGER,
    so INTEGER,
    baopp TEXT,
    era NUMERIC,
    ibb NUMERIC,
    wp NUMERIC,
    hbp NUMERIC,
    bk NUMERIC,
    bfp NUMERIC,
    gf INTEGER,
    r INTEGER,
    sh NUMERIC,
    sf NUMERIC,
    g_idp NUMERIC);
CREATE TABLE salary (
    year INTEGER,
    team_id TEXT,
    league_id TEXT,
    player_id TEXT,
    salary INTEGER);
CREATE TABLE college (
    college_id TEXT,
    name_full TEXT,
    city TEXT,
    state TEXT,
    country TEXT);
CREATE TABLE postseason (
    year INTEGER,
    round TEXT,
    team_id_winner TEXT,
    league_id_winner TEXT,
    team_id_loser TEXT,
    league_id_loser TEXT,
    wins INTEGER,
    losses INTEGER,
    ties INTEGER);
CREATE TABLE team (
    year INTEGER,
    league_id TEXT,
    team_id TEXT,
    franchise_id TEXT,
    div_id TEXT,
    rank INTEGER,
    g INTEGER,
    ghome NUMERIC,
    w INTEGER,
    l INTEGER,
    div_win TEXT,
    wc_win TEXT,
    lg_win TEXT,
    ws_win TEXT,
    r INTEGER,
    ab INTEGER,
    h INTEGER,
    double INTEGER,
    triple INTEGER,
    hr INTEGER,
    bb INTEGER,
    so NUMERIC,
    sb NUMERIC,
    cs NUMERIC,
    hbp NUMERIC,
    sf NUMERIC,
    ra INTEGER,
    er INTEGER,
    era NUMERIC,
    cg INTEGER,
    sho INTEGER,
    sv INTEGER,
    ipouts INTEGER,
    ha INTEGER,
    hra INTEGER,
    bba INTEGER,
    soa INTEGER,
    e INTEGER,
    dp NUMERIC,
    fp NUMERIC,
    name TEXT,
    park TEXT,
    attendance NUMERIC,
    bpf INTEGER,
    ppf INTEGER,
    team_id_br TEXT,
    team_id_lahman45 TEXT,
    team_id_retro TEXT);
CREATE TABLE team_franchise (
    franchise_id TEXT,
    franchise_name TEXT,
    active TEXT,
    na_assoc TEXT);
CREATE TABLE team_half (
    year INTEGER,
    league_id TEXT,
    team_id TEXT,
    half INTEGER,
    div_id TEXT,
    div_win TEXT,
    rank INTEGER,
    g INTEGER,
    w INTEGER,
    l INTEGER);"
behavior_monitoring,"CREATE TABLE Ref_Address_Types (
address_type_code VARCHAR(15) PRIMARY KEY,
address_type_description VARCHAR(80)
);
CREATE TABLE Ref_Detention_Type (
detention_type_code VARCHAR(10) PRIMARY KEY,
detention_type_description VARCHAR(80)
);
CREATE TABLE Ref_Incident_Type (
incident_type_code VARCHAR(10) PRIMARY KEY,
incident_type_description VARCHAR(80)
);
CREATE TABLE Addresses (
address_id INTEGER PRIMARY KEY,
line_1 VARCHAR(120),
line_2 VARCHAR(120),
line_3 VARCHAR(120),
city VARCHAR(80),
zip_postcode VARCHAR(20),
state_province_county VARCHAR(50),
country VARCHAR(50),
other_address_details VARCHAR(255)
);
CREATE TABLE Students (
student_id INTEGER PRIMARY KEY,
address_id INTEGER NOT NULL,
first_name VARCHAR(80),
middle_name VARCHAR(40),
last_name VARCHAR(40),
cell_mobile_number VARCHAR(40),
email_address VARCHAR(40),
date_first_rental DATETIME,
date_left_university DATETIME,
other_student_details VARCHAR(255),
FOREIGN KEY (address_id ) REFERENCES Addresses(address_id )
);
CREATE TABLE Teachers (
teacher_id INTEGER PRIMARY KEY,
address_id INTEGER NOT NULL,
first_name VARCHAR(80),
middle_name VARCHAR(80),
last_name VARCHAR(80),
gender VARCHAR(1),
cell_mobile_number VARCHAR(40),
email_address VARCHAR(40),
other_details VARCHAR(255),
FOREIGN KEY (address_id ) REFERENCES Addresses(address_id )
);
CREATE TABLE Assessment_Notes (
notes_id INTEGER NOT NULL ,
student_id INTEGER,
teacher_id INTEGER NOT NULL,
date_of_notes DATETIME,
text_of_notes VARCHAR(255),
other_details VARCHAR(255),
FOREIGN KEY (student_id ) REFERENCES Students(student_id ),
FOREIGN KEY (teacher_id ) REFERENCES Teachers(teacher_id )
);
CREATE TABLE Behavior_Incident (
incident_id INTEGER PRIMARY KEY,
incident_type_code VARCHAR(10) NOT NULL,
student_id INTEGER NOT NULL,
date_incident_start DATETIME,
date_incident_end DATETIME,
incident_summary VARCHAR(255),
recommendations VARCHAR(255),
other_details VARCHAR(255),
FOREIGN KEY (incident_type_code ) REFERENCES Ref_Incident_Type(incident_type_code ),
FOREIGN KEY (student_id ) REFERENCES Students(student_id )
);
CREATE TABLE Detention (
detention_id INTEGER PRIMARY KEY,
detention_type_code VARCHAR(10) NOT NULL,
teacher_id INTEGER,
datetime_detention_start DATETIME,
datetime_detention_end DATETIME,
detention_summary VARCHAR(255),
other_details VARCHAR(255),
FOREIGN KEY (detention_type_code ) REFERENCES Ref_Detention_Type(detention_type_code ),
FOREIGN KEY (teacher_id ) REFERENCES Teachers(teacher_id )
);
CREATE TABLE Student_Addresses (
student_id INTEGER NOT NULL,
address_id INTEGER NOT NULL,
date_address_from DATETIME NOT NULL,
date_address_to DATETIME,
monthly_rental DECIMAL(19,4),
other_details VARCHAR(255),
FOREIGN KEY (address_id ) REFERENCES Addresses(address_id ),
FOREIGN KEY (student_id ) REFERENCES Students(student_id )
);
CREATE TABLE Students_in_Detention (
student_id INTEGER NOT NULL,
detention_id INTEGER NOT NULL,
incident_id INTEGER NOT NULL,
FOREIGN KEY (incident_id ) REFERENCES Behavior_Incident(incident_id ),
FOREIGN KEY (detention_id ) REFERENCES Detention(detention_id ),
FOREIGN KEY (student_id ) REFERENCES Students(student_id )
);"
bike_1,"CREATE TABLE station (
    id INTEGER PRIMARY KEY,
    name TEXT,
    lat NUMERIC,
    long NUMERIC,
    dock_count INTEGER,
    city TEXT,
    installation_date TEXT);
CREATE TABLE status (
    station_id INTEGER,
    bikes_available INTEGER,
    docks_available INTEGER,
    time TEXT,
    FOREIGN KEY (station_id) REFERENCES station(id)
);
CREATE TABLE trip (
    id INTEGER PRIMARY KEY,
    duration INTEGER,
    start_date TEXT,
    start_station_name TEXT, -- this should be removed
    start_station_id INTEGER,
    end_date TEXT,
    end_station_name TEXT, -- this should be removed
    end_station_id INTEGER,
    bike_id INTEGER,
    subscription_type TEXT,
    zip_code INTEGER);
CREATE TABLE weather (
    date TEXT,
    max_temperature_f INTEGER,
    mean_temperature_f INTEGER,
    min_temperature_f INTEGER,
    max_dew_point_f INTEGER,
    mean_dew_point_f INTEGER,
    min_dew_point_f INTEGER,
    max_humidity INTEGER,
    mean_humidity INTEGER,
    min_humidity INTEGER,
    max_sea_level_pressure_inches NUMERIC,
    mean_sea_level_pressure_inches NUMERIC,
    min_sea_level_pressure_inches NUMERIC,
    max_visibility_miles INTEGER,
    mean_visibility_miles INTEGER,
    min_visibility_miles INTEGER,
    max_wind_Speed_mph INTEGER,
    mean_wind_speed_mph INTEGER,
    max_gust_speed_mph INTEGER,
    precipitation_inches INTEGER,
    cloud_cover INTEGER,
    events TEXT,
    wind_dir_degrees INTEGER,
    zip_code INTEGER);"
body_builder,"CREATE TABLE body_builder (
Body_Builder_ID int,
People_ID int,
Snatch real,
Clean_Jerk real,
Total real,
PRIMARY KEY (Body_Builder_ID),
FOREIGN KEY (People_ID) REFERENCES people(People_ID)
);
CREATE TABLE people (
People_ID int,
Name text,
Height real,
Weight real,
Birth_Date text,
Birth_Place text,
PRIMARY KEY (People_ID)
);"
book_2,"CREATE TABLE publication (
Publication_ID int,
Book_ID int,
Publisher text,
Publication_Date text,
Price real,
PRIMARY KEY (Publication_ID),
FOREIGN KEY (Book_ID) REFERENCES book(Book_ID)
);
CREATE TABLE book (
Book_ID int,
Title text,
Issues real,
Writer text,
PRIMARY KEY (Book_ID)
);"
browser_web,"CREATE TABLE Web_client_accelerator (
id int,
name text,
Operating_system text,
Client text,
Connection text,
primary key(id)
);
CREATE TABLE browser (
id int,
name text,
market_share real,
primary key(id)
);
CREATE TABLE accelerator_compatible_browser (
accelerator_id int,
browser_id int,
compatible_since_year int,
primary key(accelerator_id, browser_id),
foreign key (accelerator_id) references Web_client_accelerator(id),
foreign key (browser_id) references browser(id)
);"
candidate_poll,"CREATE TABLE candidate (
Candidate_ID int,
People_ID int,
Poll_Source text,
Date text,
Support_rate real,
Consider_rate real,
Oppose_rate real,
Unsure_rate real,
PRIMARY KEY (Candidate_ID),
FOREIGN KEY (People_ID) REFERENCES people(People_ID)
);
CREATE TABLE people (
People_ID int,
Sex text,
Name text,
Date_of_Birth text,
Height real,
Weight real,
PRIMARY KEY (People_ID)
);"
chinook_1,"CREATE TABLE Album (
  AlbumId integer NOT NULL,
  Title varchar(160) NOT NULL,
  ArtistId integer NOT NULL,
  PRIMARY KEY (AlbumId),
  CONSTRAINT FK_AlbumArtistId FOREIGN KEY (ArtistId) REFERENCES Artist (ArtistId) ON DELETE NO ACTION ON UPDATE NO ACTION
);
CREATE TABLE Artist (
  ArtistId integer NOT NULL,
  Name varchar(120) DEFAULT NULL,
  PRIMARY KEY (ArtistId)
);
CREATE TABLE Customer (
  CustomerId integer NOT NULL,
  FirstName varchar(40) NOT NULL,
  LastName varchar(20) NOT NULL,
  Company varchar(80) DEFAULT NULL,
  Address varchar(70) DEFAULT NULL,
  City varchar(40) DEFAULT NULL,
  State varchar(40) DEFAULT NULL,
  Country varchar(40) DEFAULT NULL,
  PostalCode varchar(10) DEFAULT NULL,
  Phone varchar(24) DEFAULT NULL,
  Fax varchar(24) DEFAULT NULL,
  Email varchar(60) NOT NULL,
  SupportRepId integer DEFAULT NULL,
  PRIMARY KEY (CustomerId),
  CONSTRAINT FK_CustomerSupportRepId FOREIGN KEY (SupportRepId) REFERENCES Employee (EmployeeId) ON DELETE NO ACTION ON UPDATE NO ACTION
);
CREATE TABLE Employee (
  EmployeeId integer NOT NULL,
  LastName varchar(20) NOT NULL,
  FirstName varchar(20) NOT NULL,
  Title varchar(30) DEFAULT NULL,
  ReportsTo integer DEFAULT NULL,
  BirthDate datetime DEFAULT NULL,
  HireDate datetime DEFAULT NULL,
  Address varchar(70) DEFAULT NULL,
  City varchar(40) DEFAULT NULL,
  State varchar(40) DEFAULT NULL,
  Country varchar(40) DEFAULT NULL,
  PostalCode varchar(10) DEFAULT NULL,
  Phone varchar(24) DEFAULT NULL,
  Fax varchar(24) DEFAULT NULL,
  Email varchar(60) DEFAULT NULL,
  PRIMARY KEY (EmployeeId),
  CONSTRAINT FK_EmployeeReportsTo FOREIGN KEY (ReportsTo) REFERENCES Employee (EmployeeId) ON DELETE NO ACTION ON UPDATE NO ACTION
);
CREATE TABLE Genre (
  GenreId integer NOT NULL,
  Name varchar(120) DEFAULT NULL,
  PRIMARY KEY (GenreId)
);
CREATE TABLE Invoice (
  InvoiceId integer NOT NULL,
  CustomerId integer NOT NULL,
  InvoiceDate datetime NOT NULL,
  BillingAddress varchar(70) DEFAULT NULL,
  BillingCity varchar(40) DEFAULT NULL,
  BillingState varchar(40) DEFAULT NULL,
  BillingCountry varchar(40) DEFAULT NULL,
  BillingPostalCode varchar(10) DEFAULT NULL,
  Total decimal(10,2) NOT NULL,
  PRIMARY KEY (InvoiceId),
  CONSTRAINT FK_InvoiceCustomerId FOREIGN KEY (CustomerId) REFERENCES Customer (CustomerId) ON DELETE NO ACTION ON UPDATE NO ACTION
);
CREATE TABLE InvoiceLine (
  InvoiceLineId integer NOT NULL,
  InvoiceId integer NOT NULL,
  TrackId integer NOT NULL,
  UnitPrice decimal(10,2) NOT NULL,
  Quantity integer NOT NULL,
  PRIMARY KEY (InvoiceLineId),
  CONSTRAINT FK_InvoiceLineInvoiceId FOREIGN KEY (InvoiceId) REFERENCES Invoice (InvoiceId) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT FK_InvoiceLineTrackId FOREIGN KEY (TrackId) REFERENCES Track (TrackId) ON DELETE NO ACTION ON UPDATE NO ACTION
);
CREATE TABLE MediaType (
  MediaTypeId integer NOT NULL,
  Name varchar(120) DEFAULT NULL,
  PRIMARY KEY (MediaTypeId)
);
CREATE TABLE Playlist (
  PlaylistId integer NOT NULL,
  Name varchar(120) DEFAULT NULL,
  PRIMARY KEY (PlaylistId)
);
CREATE TABLE PlaylistTrack (
  PlaylistId integer NOT NULL,
  TrackId integer NOT NULL,
  PRIMARY KEY (PlaylistId,TrackId),
  CONSTRAINT FK_PlaylistTrackPlaylistId FOREIGN KEY (PlaylistId) REFERENCES Playlist (PlaylistId) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT FK_PlaylistTrackTrackId FOREIGN KEY (TrackId) REFERENCES Track (TrackId) ON DELETE NO ACTION ON UPDATE NO ACTION
);
CREATE TABLE Track (
  TrackId integer NOT NULL,
  Name varchar(200) NOT NULL,
  AlbumId integer DEFAULT NULL,
  MediaTypeId integer NOT NULL,
  GenreId integer DEFAULT NULL,
  Composer varchar(220) DEFAULT NULL,
  Milliseconds integer NOT NULL,
  Bytes integer DEFAULT NULL,
  UnitPrice decimal(10,2) NOT NULL,
  PRIMARY KEY (TrackId),
  CONSTRAINT FK_TrackAlbumId FOREIGN KEY (AlbumId) REFERENCES Album (AlbumId) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT FK_TrackGenreId FOREIGN KEY (GenreId) REFERENCES Genre (GenreId) ON DELETE NO ACTION ON UPDATE NO ACTION,
CONSTRAINT FK_TrackMediaTypeId FOREIGN KEY (MediaTypeId) REFERENCES MediaType (MediaTypeId) ON DELETE NO ACTION ON UPDATE NO ACTION
);
CREATE INDEX IF NOT EXISTS idx_Album_IFK_AlbumArtistId ON Album (ArtistId);
CREATE INDEX IF NOT EXISTS idx_Customer_IFK_CustomerSupportRepId ON Customer (SupportRepId);
CREATE INDEX IF NOT EXISTS idx_Employee_IFK_EmployeeReportsTo ON Employee (ReportsTo);
CREATE INDEX IF NOT EXISTS idx_Invoice_IFK_InvoiceCustomerId ON Invoice (CustomerId);
CREATE INDEX IF NOT EXISTS idx_InvoiceLine_IFK_InvoiceLineInvoiceId ON InvoiceLine (InvoiceId);
CREATE INDEX IF NOT EXISTS idx_InvoiceLine_IFK_InvoiceLineTrackId ON InvoiceLine (TrackId);
CREATE INDEX IF NOT EXISTS idx_PlaylistTrack_IFK_PlaylistTrackTrackId ON PlaylistTrack (TrackId);
CREATE INDEX IF NOT EXISTS idx_Track_IFK_TrackAlbumId ON Track (AlbumId);
CREATE INDEX IF NOT EXISTS idx_Track_IFK_TrackGenreId ON Track (GenreId);
CREATE INDEX IF NOT EXISTS idx_Track_IFK_TrackMediaTypeId ON Track (MediaTypeId);"
cinema,"CREATE TABLE film (
Film_ID int,
Rank_in_series int,
Number_in_season int,
Title text,
Directed_by text,
Original_air_date text,
Production_code text,
PRIMARY KEY (Film_ID)
);
CREATE TABLE cinema (
Cinema_ID int,
Name text,
Openning_year int,
Capacity int,
Location text,
PRIMARY KEY (Cinema_ID));
CREATE TABLE schedule (
Cinema_ID int,
Film_ID int,
Date text,
Show_times_per_day int,
Price float,
PRIMARY KEY (Cinema_ID,Film_ID),
FOREIGN KEY (Film_ID) REFERENCES film(Film_ID),
FOREIGN KEY (Cinema_ID) REFERENCES cinema(Cinema_ID)
);"
city_record,"CREATE TABLE city (
City_ID int,
City text,
Hanzi text,
Hanyu_Pinyin text,
Regional_Population int,
GDP real,
PRIMARY KEY (City_ID)
);
CREATE TABLE match (
Match_ID int,
Date text,
Venue text,
Score text,
Result text,
Competition text,
PRIMARY KEY (Match_ID)
);
CREATE TABLE temperature (
City_ID int,
Jan real,
Feb real,
Mar real,
Apr real,
Jun real,
Jul real,
Aug real,
Sep real,
Oct real,
Nov real,
Dec real,
PRIMARY KEY (City_ID),
FOREIGN KEY (City_ID) REFERENCES city(City_ID)
);
CREATE TABLE hosting_city (
  Year int,
  Match_ID int,
  Host_City text,
  PRIMARY KEY (Year),
  FOREIGN KEY (Host_City) REFERENCES city(City_ID),
  FOREIGN KEY (Match_ID) REFERENCES match(Match_ID)
);"
climbing,"CREATE TABLE mountain (
Mountain_ID int,
Name text,
Height real,
Prominence real,
Range text,
Country text,
PRIMARY KEY (Mountain_ID)
);
CREATE TABLE climber (
Climber_ID int,
Name text,
Country text,
Time text,
Points real,
Mountain_ID int,
PRIMARY KEY (Climber_ID),
FOREIGN KEY (Mountain_ID) REFERENCES mountain(Mountain_ID)
);"
club_1,"CREATE TABLE Student (
         StuID        INTEGER PRIMARY KEY,
         LName        VARCHAR(12),
         Fname        VARCHAR(12),
         Age      INTEGER,
         Sex      VARCHAR(1),
         Major        INTEGER,
         Advisor      INTEGER,
         city_code    VARCHAR(3)
  );
CREATE TABLE Club (
       ClubID           INTEGER PRIMARY KEY,
       ClubName         VARCHAR(40),
       ClubDesc         VARCHAR(1024),
       ClubLocation VARCHAR(40)
);
CREATE TABLE Member_of_club (
       StuID            INTEGER,
       ClubID           INTEGER,
       Position     VARCHAR(40),
       FOREIGN KEY(StuID) REFERENCES Student(StuID),
       FOREIGN KEY(ClubID) REFERENCES Club(ClubID)
);"
coffee_shop,"CREATE TABLE shop (
Shop_ID int,
Address text,
Num_of_staff text,
Score real,
Open_Year text,
PRIMARY KEY (Shop_ID)
);
CREATE TABLE member (
Member_ID int,
Name text,
Membership_card text,
Age int,
Time_of_purchase int,
Level_of_membership int,
Address text,
PRIMARY KEY (Member_ID)
);
CREATE TABLE happy_hour (
HH_ID int,
Shop_ID int,
Month text,
Num_of_shaff_in_charge int,
PRIMARY KEY (HH_ID,Shop_ID,Month),
FOREIGN KEY (Shop_ID) REFERENCES shop(Shop_ID)
);
CREATE TABLE happy_hour_member (
HH_ID int,
Member_ID int,
Total_amount real,
PRIMARY KEY (HH_ID,Member_ID),
FOREIGN KEY (Member_ID) REFERENCES member(Member_ID)
);"
college_1,"CREATE TABLE CLASS (
CLASS_CODE varchar(5) PRIMARY KEY,
CRS_CODE varchar(10),
CLASS_SECTION varchar(2),
CLASS_TIME varchar(20),
CLASS_ROOM varchar(8),
PROF_NUM int,
FOREIGN KEY (CRS_CODE) REFERENCES COURSE(CRS_CODE)
FOREIGN KEY (PROF_NUM) REFERENCES EMPLOYEE(EMP_NUM)
);
CREATE TABLE COURSE (
CRS_CODE varchar(10) PRIMARY KEY,
DEPT_CODE varchar(10),
CRS_DESCRIPTION varchar(35),
CRS_CREDIT float(8),
FOREIGN KEY (DEPT_CODE) REFERENCES DEPARTMENT(DEPT_CODE)
);
CREATE TABLE DEPARTMENT (
DEPT_CODE varchar(10) PRIMARY KEY,
DEPT_NAME varchar(30),
SCHOOL_CODE varchar(8),
EMP_NUM int,
DEPT_ADDRESS varchar(20),
DEPT_EXTENSION varchar(4),
FOREIGN KEY (EMP_NUM) REFERENCES EMPLOYEE(EMP_NUM)
);
CREATE TABLE EMPLOYEE (
EMP_NUM int PRIMARY KEY,
EMP_LNAME varchar(15),
EMP_FNAME varchar(12),
EMP_INITIAL varchar(1),
EMP_JOBCODE varchar(5),
EMP_HIREDATE datetime,
EMP_DOB datetime
);
CREATE TABLE ENROLL (
CLASS_CODE varchar(5),
STU_NUM int,
ENROLL_GRADE varchar(50),
FOREIGN KEY (CLASS_CODE) REFERENCES CLASS(CLASS_CODE)
FOREIGN KEY (STU_NUM) REFERENCES STUDENT(STU_NUM)
);
CREATE TABLE PROFESSOR (
EMP_NUM int,
DEPT_CODE varchar(10),
PROF_OFFICE varchar(50),
PROF_EXTENSION varchar(4),
PROF_HIGH_DEGREE varchar(5),
FOREIGN KEY (EMP_NUM) REFERENCES EMPLOYEE(EMP_NUM),
FOREIGN KEY (DEPT_CODE) REFERENCES DEPARTMENT(DEPT_CODE)
);
CREATE TABLE STUDENT (
STU_NUM int PRIMARY KEY,
STU_LNAME varchar(15),
STU_FNAME varchar(15),
STU_INIT varchar(1),
STU_DOB datetime,
STU_HRS int,
STU_CLASS varchar(2),
STU_GPA float(8),
STU_TRANSFER numeric,
DEPT_CODE varchar(18),
STU_PHONE varchar(4),
PROF_NUM int,
FOREIGN KEY (DEPT_CODE) REFERENCES DEPARTMENT(DEPT_CODE)
);"
college_2,"CREATE TABLE classroom (
building  varchar(15),
  room_number  varchar(7),
  capacity  numeric(4,0),
  primary key (building, room_number)
 );
CREATE TABLE department (
dept_name  varchar(20),
  building  varchar(15),
  budget          numeric(12,2) check (budget > 0),
  primary key (dept_name)
 );
CREATE TABLE course (
course_id  varchar(8),
  title   varchar(50),
  dept_name  varchar(20) NULL,
  credits  numeric(2,0) check (credits > 0),
  primary key (course_id),
  FOREIGN KEY (dept_name)
  REFERENCES department (dept_name)
    ON DELETE SET NULL
--    ON UPDATE NO ACTION
--    foreign key (dept_name) references department
-- on delete set null
   );
CREATE TABLE instructor (
ID   varchar(5),
  name   varchar(20) not null,
  dept_name  varchar(20),
  salary   numeric(8,2) check (salary > 29000),
  primary key (ID),
  foreign key (dept_name) references department (dept_name)
  on delete set null
 );
CREATE TABLE section (
course_id  varchar(8),
  sec_id   varchar(8),
  semester  varchar(6) check (semester in ('Fall', 'Winter', 'Spring', 'Summer')),
  year   numeric(4,0) check (year > 1701 and year < 2100),
  building  varchar(15),
  room_number  varchar(7),
  time_slot_id  varchar(4),
  primary key (course_id, sec_id, semester, year),
  foreign key (course_id) references course (course_id)
  on delete cascade,
  foreign key (building, room_number) references classroom (building, room_number)
  on delete set null
 );
CREATE TABLE teaches (
ID   varchar(5),
  course_id  varchar(8),
  sec_id   varchar(8),
  semester  varchar(6),
  year   numeric(4,0),
  primary key (ID, course_id, sec_id, semester, year),
  foreign key (course_id,sec_id, semester, year) references section (course_id, sec_id, semester, year)
  on delete cascade,
  foreign key (ID) references instructor (ID)
  on delete cascade
 );
CREATE TABLE student (
ID   varchar(5),
  name   varchar(20) not null,
  dept_name  varchar(20),
  tot_cred  numeric(3,0) check (tot_cred >= 0),
  primary key (ID),
  foreign key (dept_name) references department (dept_name)
  on delete set null
 );
CREATE TABLE takes (
ID   varchar(5),
  course_id  varchar(8),
  sec_id   varchar(8),
  semester  varchar(6),
  year   numeric(4,0),
  grade          varchar(2),
  primary key (ID, course_id, sec_id, semester, year),
  foreign key (course_id,sec_id, semester, year) references section (course_id, sec_id, semester, year)
  on delete cascade,
  foreign key (ID) references student (ID)
  on delete cascade
 );
CREATE TABLE advisor (
s_ID   varchar(5),
  i_ID   varchar(5),
  primary key (s_ID),
  foreign key (i_ID) references instructor (ID)
  on delete set null,
  foreign key (s_ID) references student (ID)
  on delete cascade
 );
CREATE TABLE time_slot (
time_slot_id  varchar(4),
  day   varchar(1),
  start_hr  numeric(2) check (start_hr >= 0 and start_hr < 24),
  start_min  numeric(2) check (start_min >= 0 and start_min < 60),
  end_hr   numeric(2) check (end_hr >= 0 and end_hr < 24),
  end_min  numeric(2) check (end_min >= 0 and end_min < 60),
  primary key (time_slot_id, day, start_hr, start_min)
 );
CREATE TABLE prereq (
course_id  varchar(8),
  prereq_id  varchar(8),
  primary key (course_id, prereq_id),
  foreign key (course_id) references course (course_id)
  on delete cascade,
  foreign key (prereq_id) references course (course_id)
 );"
college_3,"CREATE TABLE Student (
        StuID        INTEGER PRIMARY KEY,
        LName        VARCHAR(12),
        Fname        VARCHAR(12),
        Age      INTEGER,
        Sex      VARCHAR(1),
        Major        INTEGER,
        Advisor      INTEGER,
        city_code    VARCHAR(3)
 );
CREATE TABLE Faculty (
       FacID         INTEGER PRIMARY KEY,
       Lname  VARCHAR(15),
       Fname  VARCHAR(15),
       Rank  VARCHAR(15),
       Sex  VARCHAR(1),
       Phone  INTEGER,
       Room  VARCHAR(5),
       Building  VARCHAR(13)
);
CREATE TABLE Department (
       DNO     INTEGER PRIMARY KEY,
       Division  VARCHAR(2),
       DName  VARCHAR(25),
       Room  VARCHAR(5),
       Building  VARCHAR(13),
       DPhone  INTEGER
);
CREATE TABLE Member_of (
       FacID         INTEGER,
       DNO        INTEGER,
       Appt_Type       VARCHAR(15),
       FOREIGN KEY(FacID) REFERENCES Faculty(FacID),
       FOREIGN KEY(DNO) REFERENCES Department(DNO)
);
CREATE TABLE Course (
       CID         VARCHAR(7) PRIMARY KEY,
       CName  VARCHAR(40),
       Credits  INTEGER,
       Instructor INTEGER,
       Days  VARCHAR(5),
       Hours  VARCHAR(11),
       DNO  INTEGER,
       FOREIGN KEY(Instructor) REFERENCES Faculty(FacID),
       FOREIGN KEY(DNO) REFERENCES Department(DNO)
);
CREATE TABLE Minor_in (
       StuID        INTEGER,
       DNO  INTEGER,
       FOREIGN KEY(StuID) REFERENCES Student(StuID),
       FOREIGN KEY(DNO) REFERENCES Department(DNO)
);
CREATE TABLE Enrolled_in (
       StuID    INTEGER,
       CID  VARCHAR(7),
       Grade  VARCHAR(2),
       FOREIGN KEY(StuID) REFERENCES Student(StuID),
       FOREIGN KEY(CID) REFERENCES Course(CID),
       FOREIGN KEY(Grade) REFERENCES Gradeconversion(lettergrade)
);
CREATE TABLE Gradeconversion (
       lettergrade      VARCHAR(2) PRIMARY KEY,
       gradepoint      FLOAT
);"
company_1,"CREATE TABLE department (
Dname TEXT,
Dnumber INTEGER PRIMARY KEY,
Mgr_ssn INTEGER,
Mgr_start_date TEXT);
CREATE TABLE dependent (
Essn INTEGER,
Dependent_name TEXT,
Sex TEXT,
Bdate TEXT,
Relationship TEXT,
PRIMARY KEY(Essn, Dependent_name));
CREATE TABLE dept_locations (
Dnumber INTEGER,
Dlocation TEXT,
PRIMARY KEY(Dnumber, Dlocation));
CREATE TABLE employee (
Fname TEXT,
Minit TEXT,
Lname TEXT,
Ssn INTEGER PRIMARY KEY,
Bdate TEXT,
Address TEXT,
Sex TEXT,
Salary INTEGER,
Super_ssn INTEGER, 
Dno INTEGER);
CREATE TABLE project (
Pname Text,
Pnumber INTEGER PRIMARY KEY,
Plocation TEXT,
Dnum INTEGER);
CREATE TABLE works_on (
Essn INTEGER,
Pno INTEGER,
Hours REAL,
PRIMARY KEY(Essn, Pno));"
company_employee,"CREATE TABLE people (
    People_ID int,
    Age int,
    Name text,
    Nationality text,
    Graduation_College text,
    PRIMARY KEY (People_ID)
);
CREATE TABLE company (
    Company_ID real,
    Name text,
    Headquarters text,
    Industry text,
    Sales_in_Billion real,
    Profits_in_Billion real,
    Assets_in_Billion real,
    Market_Value_in_Billion real,
    PRIMARY KEY (Company_ID)
);
CREATE TABLE employment (
    Company_ID int,
    People_ID int,
    Year_working int,
    PRIMARY KEY (Company_ID,People_ID),
    FOREIGN KEY (Company_ID) REFERENCES company(Company_ID),
    FOREIGN KEY (People_ID) REFERENCES people(People_ID)
);"
company_office,"CREATE TABLE buildings (
id int,
name text,
City text,
Height int,
Stories int,
Status text,
PRIMARY KEY(id)
);
CREATE TABLE Companies (
id int,
name text,
Headquarters text,
Industry text,
Sales_billion real,
Profits_billion real,
Assets_billion real,
Market_Value_billion text,
PRIMARY KEY (id)
);
CREATE TABLE Office_locations (
building_id int,
company_id int,
move_in_year int,
PRIMARY KEY (building_id, company_id),
FOREIGN KEY (building_id) REFERENCES buildings(id),
FOREIGN KEY (company_id) REFERENCES Companies(id)
);"
county_public_safety,"CREATE TABLE county_public_safety (
County_ID int,
Name text,
Population int,
Police_officers int,
Residents_per_officer int,
Case_burden int,
Crime_rate real,
Police_force text,
Location text,
PRIMARY KEY (County_ID)
);
CREATE TABLE city (
City_ID int,
County_ID int,
Name text,
White real,
Black real,
Amerindian real,
Asian real,
Multiracial real,
Hispanic real,
PRIMARY KEY (City_ID),
FOREIGN KEY (County_ID) REFERENCES county_public_safety(County_ID)
);"
cre_Doc_Control_Systems,"CREATE TABLE Ref_Document_Types (
document_type_code CHAR(15) NOT NULL,
document_type_description VARCHAR(255) NOT NULL,
PRIMARY KEY (document_type_code)
);
CREATE TABLE Roles (
role_code CHAR(15) NOT NULL,
role_description VARCHAR(255),
PRIMARY KEY (role_code)
);
CREATE TABLE Addresses (
address_id INTEGER NOT NULL,
address_details VARCHAR(255),
PRIMARY KEY (address_id)
);
CREATE TABLE Ref_Document_Status (
document_status_code CHAR(15) NOT NULL,
document_status_description VARCHAR(255) NOT NULL,
PRIMARY KEY (document_status_code)
);
CREATE TABLE Ref_Shipping_Agents (
shipping_agent_code CHAR(15) NOT NULL,
shipping_agent_name VARCHAR(255) NOT NULL,
shipping_agent_description VARCHAR(255) NOT NULL,
PRIMARY KEY (shipping_agent_code)
);
CREATE TABLE Documents (
document_id INTEGER NOT NULL,
document_status_code CHAR(15) NOT NULL,
document_type_code CHAR(15) NOT NULL,
shipping_agent_code CHAR(15),
receipt_date DATETIME,
receipt_number VARCHAR(255),
other_details VARCHAR(255),
PRIMARY KEY (document_id),
FOREIGN KEY (document_type_code) REFERENCES Ref_Document_Types (document_type_code),
FOREIGN KEY (document_status_code) REFERENCES Ref_Document_Status (document_status_code),
FOREIGN KEY (shipping_agent_code) REFERENCES Ref_Shipping_Agents (shipping_agent_code)
);
CREATE TABLE Employees (
employee_id INTEGER NOT NULL,
role_code CHAR(15) NOT NULL,
employee_name VARCHAR(255),
other_details VARCHAR(255),
PRIMARY KEY (employee_id),
FOREIGN KEY (role_code) REFERENCES Roles (role_code)
);
CREATE TABLE Document_Drafts (
document_id INTEGER NOT NULL,
draft_number INTEGER NOT NULL,
draft_details VARCHAR(255),
PRIMARY KEY (document_id, draft_number),
FOREIGN KEY (document_id) REFERENCES Documents (document_id)
);
CREATE TABLE Draft_Copies (
document_id INTEGER NOT NULL,
draft_number INTEGER NOT NULL,
copy_number INTEGER NOT NULL,
PRIMARY KEY (document_id, draft_number, copy_number),
FOREIGN KEY (document_id, draft_number) REFERENCES Document_Drafts (document_id,draft_number)
);
CREATE TABLE Circulation_History (
document_id INTEGER NOT NULL,
draft_number INTEGER NOT NULL,
copy_number INTEGER NOT NULL,
employee_id INTEGER NOT NULL,
PRIMARY KEY (document_id, draft_number, copy_number, employee_id),
FOREIGN KEY (document_id, draft_number, copy_number) REFERENCES Draft_Copies (document_id,draft_number,copy_number),
FOREIGN KEY (employee_id) REFERENCES Employees (employee_id)
);
CREATE TABLE Documents_Mailed (
document_id INTEGER NOT NULL,
mailed_to_address_id INTEGER NOT NULL,
mailing_date DATETIME,
PRIMARY KEY (document_id, mailed_to_address_id),
FOREIGN KEY (document_id) REFERENCES Documents (document_id),
FOREIGN KEY (mailed_to_address_id) REFERENCES Addresses (address_id)
);"
cre_Doc_Tracking_DB,"CREATE TABLE Ref_Document_Types (
Document_Type_Code CHAR(15) NOT NULL,
Document_Type_Name VARCHAR(255) NOT NULL,
Document_Type_Description VARCHAR(255) NOT NULL,
PRIMARY KEY (Document_Type_Code)
);
CREATE TABLE Ref_Calendar (
Calendar_Date DATETIME NOT NULL,
Day_Number INTEGER,
PRIMARY KEY (Calendar_Date)
);
CREATE TABLE Ref_Locations (
Location_Code CHAR(15) NOT NULL,
Location_Name VARCHAR(255) NOT NULL,
Location_Description VARCHAR(255) NOT NULL,
PRIMARY KEY (Location_Code)
);
CREATE TABLE Roles (
Role_Code CHAR(15) NOT NULL,
Role_Name VARCHAR(255),
Role_Description VARCHAR(255),
PRIMARY KEY (Role_Code)
);
CREATE TABLE All_Documents (
Document_ID INTEGER NOT NULL,
Date_Stored DATETIME,
Document_Type_Code CHAR(15) NOT NULL,
Document_Name CHAR(255),
Document_Description CHAR(255),
Other_Details VARCHAR(255),
PRIMARY KEY (Document_ID),
FOREIGN KEY (Document_Type_Code) REFERENCES Ref_Document_Types (Document_Type_Code),
FOREIGN KEY (Date_Stored) REFERENCES Ref_Calendar (Calendar_Date)
);
CREATE TABLE Employees (
Employee_ID INTEGER NOT NULL,
Role_Code CHAR(15) NOT NULL,
Employee_Name VARCHAR(255),
Gender_MFU CHAR(1) NOT NULL,
Date_of_Birth DATETIME NOT NULL,
Other_Details VARCHAR(255),
PRIMARY KEY (Employee_ID),
FOREIGN KEY (Role_Code) REFERENCES Roles (Role_Code)
);
CREATE TABLE Document_Locations (
Document_ID INTEGER NOT NULL,
Location_Code CHAR(15) NOT NULL,
Date_in_Location_From DATETIME NOT NULL,
Date_in_Locaton_To DATETIME,
PRIMARY KEY (Document_ID, Location_Code, Date_in_Location_From),
FOREIGN KEY (Location_Code) REFERENCES Ref_Locations (Location_Code),
FOREIGN KEY (Date_in_Location_From) REFERENCES Ref_Calendar (Calendar_Date),
FOREIGN KEY (Date_in_Locaton_To) REFERENCES Ref_Calendar (Calendar_Date),
FOREIGN KEY (Document_ID) REFERENCES All_Documents (Document_ID)
);
CREATE TABLE Documents_to_be_Destroyed (
Document_ID INTEGER NOT NULL,
Destruction_Authorised_by_Employee_ID INTEGER,
Destroyed_by_Employee_ID INTEGER,
Planned_Destruction_Date DATETIME,
Actual_Destruction_Date DATETIME,
Other_Details VARCHAR(255),
PRIMARY KEY (Document_ID),
FOREIGN KEY (Destroyed_by_Employee_ID) REFERENCES Employees (Employee_ID),
FOREIGN KEY (Destruction_Authorised_by_Employee_ID) REFERENCES Employees (Employee_ID),
FOREIGN KEY (Planned_Destruction_Date) REFERENCES Ref_Calendar (Calendar_Date),
FOREIGN KEY (Actual_Destruction_Date) REFERENCES Ref_Calendar (Calendar_Date),
FOREIGN KEY (Document_ID) REFERENCES All_Documents (Document_ID)
);"
cre_Docs_and_Epenses,"CREATE TABLE Ref_Document_Types (
Document_Type_Code CHAR(15) NOT NULL,
Document_Type_Name VARCHAR(255) NOT NULL,
Document_Type_Description VARCHAR(255) NOT NULL,
PRIMARY KEY (Document_Type_Code)
);
CREATE TABLE Ref_Budget_Codes (
Budget_Type_Code CHAR(15) NOT NULL,
Budget_Type_Description VARCHAR(255) NOT NULL,
PRIMARY KEY (Budget_Type_Code)
);
CREATE TABLE Projects (
Project_ID INTEGER NOT NULL,
Project_Details VARCHAR(255),
PRIMARY KEY (Project_ID)
);
CREATE TABLE Documents (
Document_ID INTEGER NOT NULL,
Document_Type_Code CHAR(15) NOT NULL,
Project_ID INTEGER NOT NULL,
Document_Date DATETIME,
Document_Name VARCHAR(255),
Document_Description VARCHAR(255),
Other_Details VARCHAR(255),
PRIMARY KEY (Document_ID),
FOREIGN KEY (Document_Type_Code) REFERENCES Ref_Document_Types (Document_Type_Code),
FOREIGN KEY (Project_ID) REFERENCES Projects (Project_ID)
);
CREATE TABLE Statements (
Statement_ID INTEGER NOT NULL,
Statement_Details VARCHAR(255),
PRIMARY KEY (Statement_ID),
FOREIGN KEY (Statement_ID) REFERENCES Documents (Document_ID)
);
CREATE TABLE Documents_with_Expenses (
Document_ID INTEGER NOT NULL,
Budget_Type_Code CHAR(15) NOT NULL,
Document_Details VARCHAR(255),
PRIMARY KEY (Document_ID),
FOREIGN KEY (Budget_Type_Code) REFERENCES Ref_Budget_Codes (Budget_Type_Code),
FOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)
);
CREATE TABLE Accounts (
Account_ID INTEGER NOT NULL,
Statement_ID INTEGER NOT NULL,
Account_Details VARCHAR(255),
PRIMARY KEY (Account_ID),
FOREIGN KEY (Statement_ID) REFERENCES Statements (Statement_ID)
);"
cre_Drama_Workshop_Groups,"CREATE TABLE Ref_Payment_Methods (
payment_method_code CHAR(10) NOT NULL,
payment_method_description VARCHAR(80),
PRIMARY KEY (payment_method_code),
UNIQUE (payment_method_code)
);
CREATE TABLE Ref_Service_Types (
Service_Type_Code CHAR(15) NOT NULL,
Parent_Service_Type_Code CHAR(15),
Service_Type_Description VARCHAR(255),
PRIMARY KEY (Service_Type_Code),
UNIQUE (Service_Type_Code)
);
CREATE TABLE Addresses (
Address_ID VARCHAR(100) NOT NULL,
Line_1 VARCHAR(255),
Line_2 VARCHAR(255),
City_Town VARCHAR(255),
State_County VARCHAR(255),
Other_Details VARCHAR(255),
PRIMARY KEY (Address_ID),
UNIQUE (Address_ID)
);
CREATE TABLE Products (
Product_ID VARCHAR(100) NOT NULL,
Product_Name VARCHAR(255),
Product_Price DECIMAL(20,4),
Product_Description VARCHAR(255),
Other_Product_Service_Details VARCHAR(255),
PRIMARY KEY (Product_ID),
UNIQUE (Product_ID)
);
CREATE TABLE Marketing_Regions (
Marketing_Region_Code CHAR(15) NOT NULL,
Marketing_Region_Name VARCHAR(255) NOT NULL,
Marketing_Region_Descriptrion VARCHAR(255) NOT NULL,
Other_Details VARCHAR(255),
PRIMARY KEY (Marketing_Region_Code),
UNIQUE (Marketing_Region_Code)
);
CREATE TABLE Clients (
Client_ID INTEGER NOT NULL,
Address_ID INTEGER NOT NULL,
Customer_Email_Address VARCHAR(255),
Customer_Name VARCHAR(255),
Customer_Phone VARCHAR(255),
Other_Details VARCHAR(255),
PRIMARY KEY (Client_ID),
UNIQUE (Client_ID),
FOREIGN KEY (Address_ID) REFERENCES Addresses (Address_ID)
);
CREATE TABLE Drama_Workshop_Groups (
Workshop_Group_ID INTEGER NOT NULL,
Address_ID INTEGER NOT NULL,
Currency_Code CHAR(15) NOT NULL,
Marketing_Region_Code CHAR(15) NOT NULL,
Store_Name VARCHAR(255),
Store_Phone VARCHAR(255),
Store_Email_Address VARCHAR(255),
Other_Details VARCHAR(255),
PRIMARY KEY (Workshop_Group_ID),
UNIQUE (Workshop_Group_ID),
FOREIGN KEY (Address_ID) REFERENCES Addresses (Address_ID)
);
CREATE TABLE Performers (
Performer_ID INTEGER NOT NULL,
Address_ID INTEGER NOT NULL,
Customer_Name VARCHAR(255),
Customer_Phone VARCHAR(255),
Customer_Email_Address VARCHAR(255),
Other_Details VARCHAR(255),
PRIMARY KEY (Performer_ID),
UNIQUE (Performer_ID),
FOREIGN KEY (Address_ID) REFERENCES Addresses (Address_ID)
);
CREATE TABLE Customers (
Customer_ID VARCHAR(100) NOT NULL,
Address_ID INTEGER NOT NULL,
Customer_Name VARCHAR(255),
Customer_Phone VARCHAR(255),
Customer_Email_Address VARCHAR(255),
Other_Details VARCHAR(255),
PRIMARY KEY (Customer_ID),
UNIQUE (Customer_ID),
FOREIGN KEY (Address_ID) REFERENCES Addresses (Address_ID)
);
CREATE TABLE Stores (
Store_ID VARCHAR(100) NOT NULL,
Address_ID INTEGER NOT NULL,
Marketing_Region_Code CHAR(15) NOT NULL,
Store_Name VARCHAR(255),
Store_Phone VARCHAR(255),
Store_Email_Address VARCHAR(255),
Other_Details VARCHAR(255),
PRIMARY KEY (Store_ID),
UNIQUE (Store_ID),
FOREIGN KEY (Address_ID) REFERENCES Addresses (Address_ID),
FOREIGN KEY (Marketing_Region_Code) REFERENCES Marketing_Regions (Marketing_Region_Code)
);
CREATE TABLE Bookings (
Booking_ID INTEGER NOT NULL ,
Customer_ID INTEGER NOT NULL,
Workshop_Group_ID VARCHAR(100) NOT NULL,
Status_Code CHAR(15) NOT NULL,
Store_ID INTEGER NOT NULL,
Order_Date DATETIME NOT NULL,
Planned_Delivery_Date DATETIME NOT NULL,
Actual_Delivery_Date DATETIME NOT NULL,
Other_Order_Details VARCHAR(255),
PRIMARY KEY (Booking_ID),
UNIQUE (Booking_ID),
FOREIGN KEY (Customer_ID) REFERENCES Clients (Client_ID),
FOREIGN KEY (Workshop_Group_ID) REFERENCES Drama_Workshop_Groups (Workshop_Group_ID)
);
CREATE TABLE Performers_in_Bookings (
Order_ID INTEGER NOT NULL,
Performer_ID INTEGER NOT NULL,
PRIMARY KEY (Order_ID, Performer_ID),
FOREIGN KEY (Performer_ID) REFERENCES Performers (Performer_ID),
FOREIGN KEY (Order_ID) REFERENCES Bookings (Booking_ID)
);
CREATE TABLE Customer_Orders (
Order_ID INTEGER NOT NULL ,
Customer_ID INTEGER NOT NULL,
Store_ID INTEGER NOT NULL,
Order_Date DATETIME NOT NULL,
Planned_Delivery_Date DATETIME NOT NULL,
Actual_Delivery_Date DATETIME NOT NULL,
Other_Order_Details VARCHAR(255),
PRIMARY KEY (Order_ID),
UNIQUE (Order_ID),
FOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID),
FOREIGN KEY (Store_ID) REFERENCES Stores (Store_ID)
);
CREATE TABLE Order_Items (
Order_Item_ID INTEGER NOT NULL ,
Order_ID INTEGER NOT NULL,
Product_ID INTEGER NOT NULL,
Order_Quantity VARCHAR(288),
Other_Item_Details VARCHAR(255),
PRIMARY KEY (Order_Item_ID),
FOREIGN KEY (Order_ID) REFERENCES Customer_Orders (Order_ID),
FOREIGN KEY (Product_ID) REFERENCES Products (Product_ID)
);
CREATE TABLE Invoices (
Invoice_ID INTEGER NOT NULL,
Order_ID INTEGER NOT NULL,
payment_method_code CHAR(15),
Product_ID INTEGER NOT NULL,
Order_Quantity VARCHAR(288),
Other_Item_Details VARCHAR(255),
Order_Item_ID INTEGER NOT NULL,
PRIMARY KEY (Invoice_ID),
FOREIGN KEY (Order_ID) REFERENCES Customer_Orders (Order_ID),
FOREIGN KEY (Order_ID) REFERENCES Bookings (Booking_ID),
FOREIGN KEY (payment_method_code) REFERENCES Ref_Payment_Methods (payment_method_code)
);
CREATE TABLE Services (
Service_ID INTEGER NOT NULL,
Service_Type_Code CHAR(15),
Workshop_Group_ID INTEGER NOT NULL,
Product_Description VARCHAR(255),
Product_Name VARCHAR(255),
Product_Price DECIMAL(20,4),
Other_Product_Service_Details VARCHAR(255),
PRIMARY KEY (Service_ID),
UNIQUE (Service_ID),
FOREIGN KEY (Workshop_Group_ID) REFERENCES Drama_Workshop_Groups (Workshop_Group_ID),
FOREIGN KEY (Service_Type_Code) REFERENCES Ref_Service_Types (Service_Type_Code)
);
CREATE TABLE Bookings_Services (
Order_ID INTEGER NOT NULL,
Product_ID INTEGER NOT NULL,
PRIMARY KEY (Order_ID, Product_ID),
FOREIGN KEY (Order_ID) REFERENCES Bookings (Booking_ID),
FOREIGN KEY (Product_ID) REFERENCES Services (Service_ID)
);
CREATE TABLE Invoice_Items (
Invoice_Item_ID INTEGER NOT NULL ,
Invoice_ID INTEGER NOT NULL,
Order_ID INTEGER NOT NULL,
Order_Item_ID INTEGER NOT NULL,
Product_ID INTEGER NOT NULL,
Order_Quantity INTEGER,
Other_Item_Details VARCHAR(255),
PRIMARY KEY (Invoice_Item_ID),
FOREIGN KEY (Order_Item_ID) REFERENCES Order_Items (Order_Item_ID),
FOREIGN KEY (Invoice_ID) REFERENCES Invoices (Invoice_ID),
FOREIGN KEY (Order_ID, Product_ID) REFERENCES Bookings_Services (Order_ID,Product_ID)
);"
cre_Theme_park,"CREATE TABLE Ref_Hotel_Star_Ratings (
star_rating_code CHAR(15) NOT NULL,
star_rating_description VARCHAR(80),
PRIMARY KEY (star_rating_code),
UNIQUE (star_rating_code)
);
CREATE TABLE Locations (
Location_ID INTEGER NOT NULL,
Location_Name VARCHAR(255),
Address VARCHAR(255),
Other_Details VARCHAR(255),
PRIMARY KEY (Location_ID)
);
CREATE TABLE Ref_Attraction_Types (
Attraction_Type_Code CHAR(15) NOT NULL,
Attraction_Type_Description VARCHAR(255),
PRIMARY KEY (Attraction_Type_Code),
UNIQUE (Attraction_Type_Code)
);
CREATE TABLE Visitors (
Tourist_ID INTEGER NOT NULL,
Tourist_Details VARCHAR(255),
PRIMARY KEY (Tourist_ID),
UNIQUE (Tourist_ID)
);
CREATE TABLE Features (
Feature_ID INTEGER NOT NULL,
Feature_Details VARCHAR(255),
PRIMARY KEY (Feature_ID)
);
CREATE TABLE Hotels (
hotel_id INTEGER NOT NULL,
star_rating_code CHAR(15) NOT NULL,
pets_allowed_yn CHAR(1),
price_range real,
other_hotel_details VARCHAR(255),
PRIMARY KEY (hotel_id),
FOREIGN KEY (star_rating_code) REFERENCES Ref_Hotel_Star_Ratings (star_rating_code)
);
CREATE TABLE Tourist_Attractions (
Tourist_Attraction_ID INTEGER NOT NULL,
Attraction_Type_Code CHAR(15) NOT NULL,
Location_ID INTEGER NOT NULL,
How_to_Get_There VARCHAR(255),
Name VARCHAR(255),
Description VARCHAR(255),
Opening_Hours VARCHAR(255),
Other_Details VARCHAR(255),
PRIMARY KEY (Tourist_Attraction_ID),
FOREIGN KEY (Location_ID) REFERENCES Locations (Location_ID),
FOREIGN KEY (Attraction_Type_Code) REFERENCES Ref_Attraction_Types (Attraction_Type_Code)
);
CREATE TABLE Street_Markets (
Market_ID INTEGER NOT NULL,
Market_Details VARCHAR(255),
PRIMARY KEY (Market_ID),
FOREIGN KEY (Market_ID) REFERENCES Tourist_Attractions (Tourist_Attraction_ID)
);
CREATE TABLE Shops (
Shop_ID INTEGER NOT NULL,
Shop_Details VARCHAR(255),
PRIMARY KEY (Shop_ID),
FOREIGN KEY (Shop_ID) REFERENCES Tourist_Attractions (Tourist_Attraction_ID)
);
CREATE TABLE Museums (
Museum_ID INTEGER NOT NULL,
Museum_Details VARCHAR(255),
PRIMARY KEY (Museum_ID),
FOREIGN KEY (Museum_ID) REFERENCES Tourist_Attractions (Tourist_Attraction_ID)
);
CREATE TABLE Royal_Family (
Royal_Family_ID INTEGER NOT NULL,
Royal_Family_Details VARCHAR(255),
PRIMARY KEY (Royal_Family_ID),
FOREIGN KEY (Royal_Family_ID) REFERENCES Tourist_Attractions (Tourist_Attraction_ID)
);
CREATE TABLE Theme_Parks (
Theme_Park_ID INTEGER NOT NULL,
Theme_Park_Details VARCHAR(255),
PRIMARY KEY (Theme_Park_ID),
FOREIGN KEY (Theme_Park_ID) REFERENCES Tourist_Attractions (Tourist_Attraction_ID)
);
CREATE TABLE Visits (
Visit_ID INTEGER NOT NULL,
Tourist_Attraction_ID INTEGER NOT NULL,
Tourist_ID INTEGER NOT NULL,
Visit_Date DATETIME NOT NULL,
Visit_Details VARCHAR(40) NOT NULL,
PRIMARY KEY (Visit_ID),
FOREIGN KEY (Tourist_Attraction_ID) REFERENCES Tourist_Attractions (Tourist_Attraction_ID),
FOREIGN KEY (Tourist_ID) REFERENCES Visitors (Tourist_ID)
);
CREATE TABLE Photos (
Photo_ID INTEGER NOT NULL,
Tourist_Attraction_ID INTEGER NOT NULL,
Name VARCHAR(255),
Description VARCHAR(255),
Filename VARCHAR(255),
Other_Details VARCHAR(255),
PRIMARY KEY (Photo_ID),
FOREIGN KEY (Tourist_Attraction_ID) REFERENCES Tourist_Attractions (Tourist_Attraction_ID)
);
CREATE TABLE Staff (
Staff_ID INTEGER NOT NULL,
Tourist_Attraction_ID INTEGER NOT NULL,
Name VARCHAR(40),
Other_Details VARCHAR(255),
PRIMARY KEY (Staff_ID),
FOREIGN KEY (Tourist_Attraction_ID) REFERENCES Tourist_Attractions (Tourist_Attraction_ID)
);
CREATE TABLE Tourist_Attraction_Features (
Tourist_Attraction_ID INTEGER NOT NULL,
Feature_ID INTEGER NOT NULL,
PRIMARY KEY (Tourist_Attraction_ID, Feature_ID),
FOREIGN KEY (Tourist_Attraction_ID) REFERENCES Tourist_Attractions (Tourist_Attraction_ID),
FOREIGN KEY (Feature_ID) REFERENCES Features (Feature_ID)
);"
csu_1,"CREATE TABLE Campuses (
 Id INTEGER PRIMARY KEY, 
 Campus TEXT, 
 Location TEXT, 
 County TEXT, 
 Year INTEGER 
);
CREATE TABLE csu_fees ( 
 Campus INTEGER PRIMARY KEY, 
 Year INTEGER, 
 CampusFee INTEGER,
 FOREIGN KEY (Campus) REFERENCES Campuses(Id)
);
CREATE TABLE degrees ( 
 Year INTEGER,
 Campus INTEGER, 
 Degrees INTEGER,
 PRIMARY KEY (Year, Campus),
 FOREIGN KEY (Campus) REFERENCES Campuses(Id)
);
CREATE TABLE discipline_enrollments ( 
 Campus INTEGER, 
 Discipline INTEGER, 
 Year INTEGER, 
 Undergraduate INTEGER, 
 Graduate INTEGER,
 PRIMARY KEY (Campus, Discipline),
 FOREIGN KEY (Campus) REFERENCES Campuses(Id)
);
CREATE TABLE enrollments ( 
 Campus INTEGER, 
 Year INTEGER, 
 TotalEnrollment_AY INTEGER, 
 FTE_AY INTEGER,
 PRIMARY KEY(Campus, Year),
 FOREIGN KEY (Campus) REFERENCES Campuses(Id)
);
CREATE TABLE faculty ( 
 Campus INTEGER, 
 Year INTEGER, 
 Faculty REAL,
 FOREIGN KEY (Campus) REFERENCES Campuses(Id) 
);"
culture_company,"CREATE TABLE book_club (
book_club_id int,
Year int,
Author_or_Editor text,
Book_Title text,
Publisher text,
Category text,
Result text,
PRIMARY KEY (book_club_id)
);
CREATE TABLE movie (
movie_id int,
Title text,
Year int,
Director text,
Budget_million real,
Gross_worldwide int,
PRIMARY KEY(movie_id)
);
CREATE TABLE culture_company (
Company_name text,
Type text,
Incorporated_in text,
Group_Equity_Shareholding real,
book_club_id text,
movie_id text,
PRIMARY KEY(Company_name),
FOREIGN KEY (book_club_id) REFERENCES book_club(book_club_id),
FOREIGN KEY (movie_id) REFERENCES movie(movie_id)
);"
customer_complaints,"CREATE TABLE Staff (
staff_id INTEGER PRIMARY KEY,
gender VARCHAR(1),
first_name VARCHAR(80),
last_name VARCHAR(80),
email_address VARCHAR(255),
phone_number VARCHAR(80)
);
CREATE TABLE Customers (
customer_id INTEGER PRIMARY KEY,
customer_type_code VARCHAR(20) NOT NULL,
address_line_1 VARCHAR(80),
address_line_2 VARCHAR(80),
town_city VARCHAR(80),
state VARCHAR(80),
email_address VARCHAR(255),
phone_number VARCHAR(80)
);
CREATE TABLE Products (
product_id INTEGER PRIMARY KEY,
parent_product_id INTEGER,
product_category_code VARCHAR(20) NOT NULL,
date_product_first_available DATETIME,
date_product_discontinued DATETIME,
product_name VARCHAR(80),
product_description VARCHAR(255),
product_price DECIMAL(19,4)
);
CREATE TABLE Complaints (
complaint_id INTEGER NOT NULL ,
product_id INTEGER NOT NULL,
customer_id INTEGER NOT NULL,
complaint_outcome_code VARCHAR(20) NOT NULL,
complaint_status_code VARCHAR(20) NOT NULL,
complaint_type_code VARCHAR(20) NOT NULL,
date_complaint_raised DATETIME,
date_complaint_closed DATETIME,
staff_id INTEGER NOT NULL ,
FOREIGN KEY (staff_id ) REFERENCES Staff(staff_id ),
FOREIGN KEY (product_id ) REFERENCES Products(product_id ),
FOREIGN KEY (customer_id ) REFERENCES Customers(customer_id )
);"
customer_deliveries,"CREATE TABLE Products (
product_id INTEGER PRIMARY KEY,
product_name VARCHAR(20),
product_price DECIMAL(19,4),
product_description VARCHAR(255)
);
CREATE TABLE Addresses (
address_id INTEGER PRIMARY KEY,
address_details VARCHAR(80),
city VARCHAR(50),
zip_postcode VARCHAR(20),
state_province_county VARCHAR(50),
country VARCHAR(50)
);
CREATE TABLE Customers (
customer_id INTEGER PRIMARY KEY,
payment_method VARCHAR(10) NOT NULL,
customer_name VARCHAR(80),
customer_phone VARCHAR(80),
customer_email VARCHAR(80),
date_became_customer DATETIME
);
CREATE TABLE Regular_Orders (
regular_order_id INTEGER PRIMARY KEY,
distributer_id INTEGER NOT NULL,
FOREIGN KEY (distributer_id ) REFERENCES Customers(customer_id )
);
CREATE TABLE Regular_Order_Products (
regular_order_id INTEGER NOT NULL,
product_id INTEGER NOT NULL,
FOREIGN KEY (product_id ) REFERENCES Products(product_id ),
FOREIGN KEY (regular_order_id ) REFERENCES Regular_Orders(regular_order_id )
);
CREATE TABLE Actual_Orders (
actual_order_id INTEGER PRIMARY KEY,
order_status_code VARCHAR(10) NOT NULL,
regular_order_id INTEGER NOT NULL,
actual_order_date DATETIME,
FOREIGN KEY (regular_order_id ) REFERENCES Regular_Orders(regular_order_id )
);
CREATE TABLE Actual_Order_Products (
actual_order_id INTEGER NOT NULL,
product_id INTEGER NOT NULL,
FOREIGN KEY (product_id ) REFERENCES Products(product_id ),
FOREIGN KEY (actual_order_id ) REFERENCES Actual_Orders(actual_order_id )
);
CREATE TABLE Customer_Addresses (
customer_id INTEGER NOT NULL,
address_id INTEGER NOT NULL,
date_from DATETIME NOT NULL,
address_type VARCHAR(10) NOT NULL,
date_to DATETIME,
FOREIGN KEY (customer_id ) REFERENCES Customers(customer_id ),
FOREIGN KEY (address_id ) REFERENCES Addresses(address_id )
);
CREATE TABLE Delivery_Routes (
route_id INTEGER PRIMARY KEY,
route_name VARCHAR(50),
other_route_details VARCHAR(255)
);
CREATE TABLE Delivery_Route_Locations (
location_code VARCHAR(10) PRIMARY KEY,
route_id INTEGER NOT NULL,
location_address_id INTEGER NOT NULL,
location_name VARCHAR(50),
FOREIGN KEY (location_address_id ) REFERENCES Addresses(address_id ),
FOREIGN KEY (route_id ) REFERENCES Delivery_Routes(route_id )
);
CREATE TABLE Trucks (
truck_id INTEGER PRIMARY KEY,
truck_licence_number VARCHAR(20),
truck_details VARCHAR(255)
);
CREATE TABLE Employees (
employee_id INTEGER PRIMARY KEY,
employee_address_id INTEGER NOT NULL,
employee_name VARCHAR(80),
employee_phone VARCHAR(80),
FOREIGN KEY (employee_address_id ) REFERENCES Addresses(address_id )
);
CREATE TABLE Order_Deliveries (
location_code VARCHAR(10) NOT NULL,
actual_order_id INTEGER NOT NULL,
delivery_status_code VARCHAR(10) NOT NULL,
driver_employee_id INTEGER NOT NULL,
truck_id INTEGER NOT NULL,
delivery_date DATETIME,
FOREIGN KEY (truck_id ) REFERENCES Trucks(truck_id ),
FOREIGN KEY (actual_order_id ) REFERENCES Actual_Orders(actual_order_id ),
FOREIGN KEY (location_code ) REFERENCES Delivery_Route_Locations(location_code ),
FOREIGN KEY (driver_employee_id ) REFERENCES Employees(employee_id )
);"
customers_and_addresses,"CREATE TABLE Addresses (
address_id INTEGER PRIMARY KEY,
address_content VARCHAR(80),
city VARCHAR(50),
zip_postcode VARCHAR(20),
state_province_county VARCHAR(50),
country VARCHAR(50),
other_address_details VARCHAR(255)
);
CREATE TABLE Products (
product_id INTEGER PRIMARY KEY,
product_details VARCHAR(255)
);
INSERT INTO Products (product_id, product_details) VALUES (1, 'Americano');
INSERT INTO Products (product_id, product_details) VALUES (2, 'Dove Chocolate');
INSERT INTO Products (product_id, product_details) VALUES (3, 'Latte');
CREATE TABLE Customers (
customer_id INTEGER PRIMARY KEY,
payment_method VARCHAR(15) NOT NULL,
customer_name VARCHAR(80),
date_became_customer DATETIME,
other_customer_details VARCHAR(255)
);
CREATE TABLE Customer_Addresses (
customer_id INTEGER NOT NULL,
address_id INTEGER NOT NULL,
date_address_from DATETIME NOT NULL,
address_type VARCHAR(15) NOT NULL,
date_address_to DATETIME,
FOREIGN KEY (address_id ) REFERENCES Addresses(address_id ),
FOREIGN KEY (customer_id ) REFERENCES Customers(customer_id )
);
CREATE TABLE Customer_Contact_Channels (
customer_id INTEGER NOT NULL,
channel_code VARCHAR(15) NOT NULL,
active_from_date DATETIME NOT NULL,
active_to_date DATETIME,
contact_number VARCHAR(50) NOT NULL,
FOREIGN KEY (customer_id ) REFERENCES Customers(customer_id )
);
CREATE TABLE Customer_Orders (
order_id INTEGER PRIMARY KEY,
customer_id INTEGER NOT NULL,
order_status VARCHAR(15) NOT NULL,
order_date DATETIME,
order_details VARCHAR(255),
FOREIGN KEY (customer_id ) REFERENCES Customers(customer_id )
);

CREATE TABLE Order_Items (
order_id INTEGER NOT NULL,
product_id INTEGER NOT NULL,
order_quantity VARCHAR(15),
FOREIGN KEY (product_id ) REFERENCES Products(product_id ),
FOREIGN KEY (order_id ) REFERENCES Customer_Orders(order_id )
);"
customers_and_invoices,"CREATE TABLE Customers (
customer_id INTEGER PRIMARY KEY,
customer_first_name VARCHAR(50),
customer_middle_initial VARCHAR(1),
customer_last_name VARCHAR(50),
gender VARCHAR(1),
email_address VARCHAR(255),
login_name VARCHAR(80),
login_password VARCHAR(20),
phone_number VARCHAR(255),
town_city VARCHAR(50),
state_county_province VARCHAR(50),
country VARCHAR(50)
);
CREATE TABLE Orders (
order_id INTEGER PRIMARY KEY,
customer_id INTEGER NOT NULL,
date_order_placed DATETIME NOT NULL,
order_details VARCHAR(255),
FOREIGN KEY (customer_id ) REFERENCES Customers(customer_id )
);
CREATE TABLE Invoices (
invoice_number INTEGER PRIMARY KEY,
order_id INTEGER NOT NULL,
invoice_date DATETIME,
FOREIGN KEY (order_id ) REFERENCES Orders(order_id )
);
CREATE TABLE Accounts (
account_id INTEGER PRIMARY KEY,
customer_id INTEGER NOT NULL,
date_account_opened DATETIME,
account_name VARCHAR(50),
other_account_details VARCHAR(255),
FOREIGN KEY (customer_id ) REFERENCES Customers(customer_id )
);
CREATE TABLE Product_Categories (
production_type_code VARCHAR(15) PRIMARY KEY,
product_type_description VARCHAR(80),
vat_rating DECIMAL(19,4)
);
CREATE TABLE Products (
product_id INTEGER PRIMARY KEY,
parent_product_id INTEGER,
production_type_code VARCHAR(15) NOT NULL,
unit_price DECIMAL(19,4),
product_name VARCHAR(80),
product_color VARCHAR(20),
product_size VARCHAR(20),
FOREIGN KEY (production_type_code ) REFERENCES Product_Categories(production_type_code )
);
CREATE TABLE Financial_Transactions (
transaction_id INTEGER NOT NULL ,
account_id INTEGER NOT NULL,
invoice_number INTEGER,
transaction_type VARCHAR(15) NOT NULL,
transaction_date DATETIME,
transaction_amount DECIMAL(19,4),
transaction_comment VARCHAR(255),
other_transaction_details VARCHAR(255),
FOREIGN KEY (invoice_number ) REFERENCES Invoices(invoice_number ),
FOREIGN KEY (account_id ) REFERENCES Accounts(account_id )
);
CREATE TABLE Order_Items (
order_item_id INTEGER PRIMARY KEY,
order_id INTEGER NOT NULL,
product_id INTEGER NOT NULL,
product_quantity VARCHAR(50),
other_order_item_details VARCHAR(255),
FOREIGN KEY (product_id ) REFERENCES Products(product_id ),
FOREIGN KEY (order_id ) REFERENCES Orders(order_id )
);
CREATE TABLE Invoice_Line_Items (
order_item_id INTEGER NOT NULL,
invoice_number INTEGER NOT NULL,
product_id INTEGER NOT NULL,
product_title VARCHAR(80),
product_quantity VARCHAR(50),
product_price DECIMAL(19,4),
derived_product_cost DECIMAL(19,4),
derived_vat_payable DECIMAL(19,4),
derived_total_cost DECIMAL(19,4),
FOREIGN KEY (order_item_id ) REFERENCES Order_Items(order_item_id ),
FOREIGN KEY (invoice_number ) REFERENCES Invoices(invoice_number ),
FOREIGN KEY (product_id ) REFERENCES Products(product_id )
);"
customers_and_products_contacts,"CREATE TABLE Addresses (
address_id INTEGER PRIMARY KEY,
line_1_number_building VARCHAR(80),
city VARCHAR(50),
zip_postcode VARCHAR(20),
state_province_county VARCHAR(50),
country VARCHAR(50)
);
CREATE TABLE Products (
product_id INTEGER PRIMARY KEY,
product_type_code VARCHAR(15),
product_name VARCHAR(80),
product_price DOUBLE NULL
);
CREATE TABLE Customers (
customer_id INTEGER PRIMARY KEY,
payment_method_code VARCHAR(15),
customer_number VARCHAR(20),
customer_name VARCHAR(80),
customer_address VARCHAR(255),
customer_phone VARCHAR(80),
customer_email VARCHAR(80)
);
CREATE TABLE Contacts (
contact_id INTEGER PRIMARY KEY,
customer_id INTEGER NOT NULL,
gender VARCHAR(1),
first_name VARCHAR(80),
last_name VARCHAR(50),
contact_phone VARCHAR(80)
);
CREATE TABLE Customer_Address_History (
customer_id INTEGER NOT NULL,
address_id INTEGER NOT NULL,
date_from DATETIME NOT NULL,
date_to DATETIME,
FOREIGN KEY (customer_id ) REFERENCES Customers(customer_id ),
FOREIGN KEY (address_id ) REFERENCES Addresses(address_id )
);
CREATE TABLE Customer_Orders (
order_id INTEGER PRIMARY KEY,
customer_id INTEGER NOT NULL,
order_date DATETIME NOT NULL,
order_status_code VARCHAR(15),
FOREIGN KEY (customer_id ) REFERENCES Customers(customer_id )
);
CREATE TABLE Order_Items (
order_item_id INTEGER NOT NULL ,
order_id INTEGER NOT NULL,
product_id INTEGER NOT NULL,
order_quantity VARCHAR(80),
FOREIGN KEY (product_id ) REFERENCES Products(product_id ),
FOREIGN KEY (order_id ) REFERENCES Customer_Orders(order_id )
);"
customers_campaigns_ecommerce,"CREATE TABLE Premises (
premise_id INTEGER PRIMARY KEY,
premises_type VARCHAR(15) NOT NULL,
premise_details VARCHAR(255)
);
CREATE TABLE Products (
product_id INTEGER PRIMARY KEY,
product_category VARCHAR(15) NOT NULL,
product_name VARCHAR(80)
);
CREATE TABLE Customers (
customer_id INTEGER PRIMARY KEY,
payment_method VARCHAR(15) NOT NULL,
customer_name VARCHAR(80),
customer_phone VARCHAR(80),
customer_email VARCHAR(80),
customer_address VARCHAR(255),
customer_login VARCHAR(80),
customer_password VARCHAR(10)
);
CREATE TABLE Mailshot_Campaigns (
mailshot_id INTEGER PRIMARY KEY,
product_category VARCHAR(15),
mailshot_name VARCHAR(80),
mailshot_start_date DATETIME,
mailshot_end_date DATETIME
);
CREATE TABLE Customer_Addresses (
customer_id INTEGER NOT NULL,
premise_id INTEGER NOT NULL,
date_address_from DATETIME NOT NULL,
address_type_code VARCHAR(15) NOT NULL,
date_address_to DATETIME,
FOREIGN KEY (premise_id ) REFERENCES Premises(premise_id )
FOREIGN KEY (customer_id ) REFERENCES Customers(customer_id )
);
CREATE TABLE Customer_Orders (
order_id INTEGER PRIMARY KEY,
customer_id INTEGER NOT NULL,
order_status_code VARCHAR(15) NOT NULL,
shipping_method_code VARCHAR(15) NOT NULL,
order_placed_datetime DATETIME NOT NULL,
order_delivered_datetime DATETIME,
order_shipping_charges VARCHAR(255),
FOREIGN KEY (customer_id ) REFERENCES Customers(customer_id )
);
CREATE TABLE Mailshot_Customers (
mailshot_id INTEGER NOT NULL,
customer_id INTEGER NOT NULL,
outcome_code VARCHAR(15) NOT NULL,
mailshot_customer_date DATETIME,
FOREIGN KEY (customer_id ) REFERENCES Customers(customer_id ),
FOREIGN KEY (mailshot_id ) REFERENCES Mailshot_Campaigns(mailshot_id )
);
CREATE TABLE Order_Items (
item_id INTEGER NOT NULL ,
order_item_status_code VARCHAR(15) NOT NULL,
order_id INTEGER NOT NULL,
product_id INTEGER NOT NULL,
item_status_code VARCHAR(15),
item_delivered_datetime DATETIME,
item_order_quantity VARCHAR(80),
FOREIGN KEY (product_id ) REFERENCES Products(product_id ),
FOREIGN KEY (order_id ) REFERENCES Customer_Orders(order_id )
);"
customers_card_transactions,"CREATE TABLE Accounts (
account_id INTEGER PRIMARY KEY,
customer_id INTEGER NOT NULL,
account_name VARCHAR(50),
other_account_details VARCHAR(255)
);
CREATE TABLE Customers (
customer_id INTEGER PRIMARY KEY,
customer_first_name VARCHAR(20),
customer_last_name VARCHAR(20),
customer_address VARCHAR(255),
customer_phone VARCHAR(255),
customer_email VARCHAR(255),
other_customer_details VARCHAR(255)
);
CREATE TABLE Customers_Cards (
card_id INTEGER PRIMARY KEY,
customer_id INTEGER NOT NULL,
card_type_code VARCHAR(15) NOT NULL,
card_number VARCHAR(80),
date_valid_from DATETIME,
date_valid_to DATETIME,
other_card_details VARCHAR(255)
);
CREATE TABLE Financial_Transactions (
transaction_id INTEGER NOT NULL ,
previous_transaction_id INTEGER,
account_id INTEGER NOT NULL,
card_id INTEGER NOT NULL,
transaction_type VARCHAR(15) NOT NULL,
transaction_date DATETIME,
transaction_amount DOUBLE NULL,
transaction_comment VARCHAR(255),
other_transaction_details VARCHAR(255),
FOREIGN KEY (card_id ) REFERENCES Customers_Cards(card_id ),
FOREIGN KEY (account_id ) REFERENCES Accounts(account_id )
);"
debate,"CREATE TABLE people (
People_ID int,
District text,
Name text,
Party text,
Age int,
PRIMARY KEY (People_ID)
);
CREATE TABLE debate (
Debate_ID int,
Date text,
Venue text,
Num_of_Audience int,
PRIMARY KEY (Debate_ID)
);
CREATE TABLE debate_people (
Debate_ID int,
Affirmative int,
Negative int,
If_Affirmative_Win bool,
PRIMARY KEY (Debate_ID,Affirmative,Negative),
FOREIGN KEY (Debate_ID) REFERENCES debate(Debate_ID),
FOREIGN KEY (Affirmative) REFERENCES people(People_ID),
FOREIGN KEY (Negative) REFERENCES people(People_ID)
);"
decoration_competition,"CREATE TABLE college (
College_ID int,
Name text,
Leader_Name text,
College_Location text,
PRIMARY KEY (College_ID)
);
CREATE TABLE member (
Member_ID int,
Name text,
Country text,
College_ID int,
PRIMARY KEY (Member_ID),
FOREIGN KEY (College_ID) REFERENCES college(College_ID)
);
CREATE TABLE round (
Round_ID int,
Member_ID int,
Decoration_Theme text,
Rank_in_Round int,
PRIMARY KEY (Member_ID,Round_ID),
FOREIGN KEY (Member_ID) REFERENCES member(Member_ID)
);"
department_management,"CREATE TABLE department (
Department_ID int,
Name text,
Creation text,
Ranking int,
Budget_in_Billions real,
Num_Employees real,
PRIMARY KEY (Department_ID)
);
CREATE TABLE head (
head_ID int,
name text,
born_state text,
age real,
PRIMARY KEY (head_ID)
);
CREATE TABLE management (
department_ID int,
head_ID int,
temporary_acting text,
PRIMARY KEY (Department_ID,head_ID),
FOREIGN KEY (Department_ID) REFERENCES department(Department_ID),
FOREIGN KEY (head_ID) REFERENCES head(head_ID)
);"
department_store,"CREATE TABLE Addresses (
address_id INTEGER PRIMARY KEY,
address_details VARCHAR(255)
);
CREATE TABLE Staff (
staff_id INTEGER PRIMARY KEY,
staff_gender VARCHAR(1),
staff_name VARCHAR(80)
);
CREATE TABLE Suppliers (
supplier_id INTEGER PRIMARY KEY,
supplier_name VARCHAR(80),
supplier_phone VARCHAR(80)
);
CREATE TABLE Department_Store_Chain (
dept_store_chain_id INTEGER PRIMARY KEY,
dept_store_chain_name VARCHAR(80)
);
CREATE TABLE Customers (
customer_id INTEGER PRIMARY KEY,
payment_method_code VARCHAR(10) NOT NULL,
customer_code VARCHAR(20),
customer_name VARCHAR(80),
customer_address VARCHAR(255),
customer_phone VARCHAR(80),
customer_email VARCHAR(80)
);
CREATE TABLE Products (
product_id INTEGER PRIMARY KEY,
product_type_code VARCHAR(10) NOT NULL,
product_name VARCHAR(80),
product_price DECIMAL(19,4)
);
CREATE TABLE Supplier_Addresses (
supplier_id INTEGER NOT NULL,
address_id INTEGER NOT NULL,
date_from DATETIME NOT NULL,
date_to DATETIME,
PRIMARY KEY (supplier_id, address_id),
FOREIGN KEY (address_id ) REFERENCES Addresses(address_id ),
FOREIGN KEY (supplier_id ) REFERENCES Suppliers(supplier_id )
);
CREATE TABLE Customer_Addresses (
customer_id INTEGER NOT NULL,
address_id INTEGER NOT NULL,
date_from DATETIME NOT NULL,
date_to DATETIME,
PRIMARY KEY (customer_id, address_id),
FOREIGN KEY (address_id ) REFERENCES Addresses(address_id ),
FOREIGN KEY (customer_id ) REFERENCES Customers(customer_id )
);
CREATE TABLE Customer_Orders (
order_id INTEGER PRIMARY KEY,
customer_id INTEGER NOT NULL,
order_status_code VARCHAR(10) NOT NULL,
order_date DATETIME NOT NULL,
FOREIGN KEY (customer_id ) REFERENCES Customers(customer_id )
);
CREATE TABLE Department_Stores (
dept_store_id INTEGER PRIMARY KEY,
dept_store_chain_id INTEGER,
store_name VARCHAR(80),
store_address VARCHAR(255),
store_phone VARCHAR(80),
store_email VARCHAR(80),
FOREIGN KEY (dept_store_chain_id ) REFERENCES Department_Store_Chain(dept_store_chain_id )
);
CREATE TABLE Departments (
department_id INTEGER PRIMARY KEY,
dept_store_id INTEGER NOT NULL,
department_name VARCHAR(80),
FOREIGN KEY (dept_store_id ) REFERENCES Department_Stores(dept_store_id )
);
CREATE TABLE Order_Items (
order_item_id INTEGER PRIMARY KEY,
order_id INTEGER NOT NULL,
product_id INTEGER NOT NULL,
FOREIGN KEY (order_id ) REFERENCES Customer_Orders(order_id ),
FOREIGN KEY (product_id ) REFERENCES Products(product_id )
);
CREATE TABLE Product_Suppliers (
product_id INTEGER NOT NULL,
supplier_id INTEGER NOT NULL,
date_supplied_from DATETIME NOT NULL,
date_supplied_to DATETIME,
total_amount_purchased VARCHAR(80),
total_value_purchased DECIMAL(19,4),
PRIMARY KEY (product_id, supplier_id),
FOREIGN KEY (supplier_id ) REFERENCES Suppliers(supplier_id ),
FOREIGN KEY (product_id ) REFERENCES Products(product_id )
);
CREATE TABLE Staff_Department_Assignments (
staff_id INTEGER NOT NULL,
department_id INTEGER NOT NULL,
date_assigned_from DATETIME NOT NULL,
job_title_code VARCHAR(10) NOT NULL,
date_assigned_to DATETIME,
PRIMARY KEY (staff_id, department_id),
FOREIGN KEY (department_id ) REFERENCES Departments(department_id ),
FOREIGN KEY (staff_id ) REFERENCES Staff(staff_id )
);"
device,"CREATE TABLE device (
Device_ID int,
Device text,
Carrier text,
Package_Version text,
Applications text,
Software_Platform text,
PRIMARY KEY (Device_ID)
);
CREATE TABLE shop (
Shop_ID int,
Shop_Name text,
Location text,
Open_Date text,
Open_Year int,
PRIMARY KEY (Shop_ID)
);
CREATE TABLE stock (
Shop_ID int,
Device_ID int,
Quantity int,
PRIMARY KEY (Shop_ID,Device_ID),
FOREIGN KEY (Shop_ID) REFERENCES shop(Shop_ID),
FOREIGN KEY (Device_ID) REFERENCES device(Device_ID)
);"
document_management,"CREATE TABLE Roles (
role_code VARCHAR(15) PRIMARY KEY,
role_description VARCHAR(80)
);
CREATE TABLE Users (
user_id INTEGER PRIMARY KEY,
role_code VARCHAR(15) NOT NULL,
user_name VARCHAR(40),
user_login VARCHAR(40),
password VARCHAR(40),
FOREIGN KEY (role_code ) REFERENCES Roles(role_code )
);
CREATE TABLE Document_Structures (
document_structure_code VARCHAR(15) PRIMARY KEY,
parent_document_structure_code VARCHAR(15),
document_structure_description VARCHAR(80)
);
CREATE TABLE Functional_Areas (
functional_area_code VARCHAR(15) PRIMARY KEY,
parent_functional_area_code VARCHAR(15),
functional_area_description VARCHAR(80) NOT NULL
);
CREATE TABLE Images (
image_id INTEGER PRIMARY KEY,
image_alt_text VARCHAR(80),
image_name VARCHAR(40),
image_url VARCHAR(255)
);
CREATE TABLE Documents (
document_code VARCHAR(15) PRIMARY KEY,
document_structure_code VARCHAR(15) NOT NULL,
document_type_code VARCHAR(15) NOT NULL,
access_count INTEGER,
document_name VARCHAR(80),
FOREIGN KEY (document_structure_code ) REFERENCES Document_Structures(document_structure_code )
);
CREATE TABLE Document_Functional_Areas (
document_code VARCHAR(15) NOT NULL,
functional_area_code VARCHAR(15) NOT NULL,
FOREIGN KEY (document_code ) REFERENCES Documents(document_code ),
FOREIGN KEY (functional_area_code ) REFERENCES Functional_Areas(functional_area_code )
);
CREATE TABLE Document_Sections (
section_id INTEGER PRIMARY KEY,
document_code VARCHAR(15) NOT NULL,
section_sequence INTEGER,
section_code VARCHAR(20),
section_title VARCHAR(80),
FOREIGN KEY (document_code ) REFERENCES Documents(document_code )
);
CREATE TABLE Document_Sections_Images (
section_id INTEGER NOT NULL,
image_id INTEGER NOT NULL,
PRIMARY KEY (section_id,image_id),
FOREIGN KEY (section_id ) REFERENCES Document_Sections(section_id ),
FOREIGN KEY (image_id ) REFERENCES Images(image_id )
);"
dorm_1,"CREATE TABLE Student (
        StuID        INTEGER PRIMARY KEY,
        LName        VARCHAR(12),
        Fname        VARCHAR(12),
        Age      INTEGER,
        Sex      VARCHAR(1),
        Major        INTEGER,
        Advisor      INTEGER,
        city_code    VARCHAR(3)
 );

CREATE TABLE Dorm (
       dormid  INTEGER,
       dorm_name VARCHAR(20),
       student_capacity INTEGER,
       gender   VARCHAR(1)
) ;
CREATE TABLE Dorm_amenity (
       amenid   INTEGER,
       amenity_name  VARCHAR(25)
) ;
CREATE TABLE Has_amenity (
       dormid   INTEGER,
       amenid    INTEGER,
 FOREIGN KEY (dormid) REFERENCES Dorm(dormid),
 FOREIGN KEY (amenid) REFERENCES Dorm_amenity(amenid)
);
CREATE TABLE Lives_in (
       stuid        INTEGER,
       dormid  INTEGER,
       room_number INTEGER,
 FOREIGN KEY (stuid) REFERENCES Student(StuID),
        FOREIGN KEY (dormid) REFERENCES Dorm(dormid)
);"
driving_school,"CREATE TABLE Addresses (
address_id INTEGER PRIMARY KEY,
line_1_number_building VARCHAR(80),
city VARCHAR(50),
zip_postcode VARCHAR(20),
state_province_county VARCHAR(50),
country VARCHAR(50)
);
CREATE TABLE Staff (
staff_id INTEGER PRIMARY KEY,
staff_address_id INTEGER NOT NULL,
nickname VARCHAR(80),
first_name VARCHAR(80),
middle_name VARCHAR(80),
last_name VARCHAR(80),
date_of_birth DATETIME,
date_joined_staff DATETIME,
date_left_staff DATETIME,
FOREIGN KEY (staff_address_id ) REFERENCES Addresses(address_id )
);
CREATE TABLE Vehicles (
vehicle_id INTEGER PRIMARY KEY,
vehicle_details VARCHAR(255)
);
CREATE TABLE Customers (
customer_id INTEGER PRIMARY KEY,
customer_address_id INTEGER NOT NULL,
customer_status_code VARCHAR(15) NOT NULL,
date_became_customer DATETIME,
date_of_birth DATETIME,
first_name VARCHAR(80),
last_name VARCHAR(80),
amount_outstanding DOUBLE NULL,
email_address VARCHAR(250),
phone_number VARCHAR(255),
cell_mobile_phone_number VARCHAR(255),
FOREIGN KEY (customer_address_id ) REFERENCES Addresses(address_id )
);
CREATE TABLE Customer_Payments (
customer_id INTEGER NOT NULL,
datetime_payment DATETIME NOT NULL,
payment_method_code VARCHAR(10) NOT NULL,
amount_payment DOUBLE NULL,
PRIMARY KEY (customer_id,datetime_payment),
FOREIGN KEY (customer_id ) REFERENCES Customers(customer_id )
);
CREATE TABLE Lessons (
lesson_id INTEGER PRIMARY KEY,
customer_id INTEGER NOT NULL,
lesson_status_code VARCHAR(15) NOT NULL,
staff_id INTEGER,
vehicle_id INTEGER NOT NULL,
lesson_date DATETIME,
lesson_time VARCHAR(10),
price DOUBLE NULL,
FOREIGN KEY (vehicle_id ) REFERENCES Vehicles(vehicle_id ),
FOREIGN KEY (staff_id ) REFERENCES Staff(staff_id ),
FOREIGN KEY (customer_id ) REFERENCES Customers(customer_id )
);"
e_government,"CREATE TABLE Addresses (
address_id INTEGER PRIMARY KEY,
line_1_number_building VARCHAR(80),
town_city VARCHAR(50),
zip_postcode VARCHAR(20),
state_province_county VARCHAR(50),
country VARCHAR(50)
);
CREATE TABLE Services (
service_id INTEGER PRIMARY KEY,
service_type_code VARCHAR(15) NOT NULL,
service_name VARCHAR(80),
service_descriptio VARCHAR(255)
);
CREATE TABLE Forms (
form_id INTEGER PRIMARY KEY,
form_type_code VARCHAR(15) NOT NULL,
service_id INTEGER,
form_number VARCHAR(50),
form_name VARCHAR(80),
form_description VARCHAR(255),
FOREIGN KEY (service_id ) REFERENCES Services(service_id )
);
CREATE TABLE Individuals (
individual_id INTEGER PRIMARY KEY,
individual_first_name VARCHAR(80),
individual_middle_name VARCHAR(80),
inidividual_phone VARCHAR(80),
individual_email VARCHAR(80),
individual_address VARCHAR(255),
individual_last_name VARCHAR(80)
);
CREATE TABLE Organizations (
organization_id INTEGER PRIMARY KEY,
date_formed DATETIME,
organization_name VARCHAR(255),
uk_vat_number VARCHAR(20)
);
CREATE TABLE Parties (
party_id INTEGER PRIMARY KEY,
payment_method_code VARCHAR(15) NOT NULL,
party_phone VARCHAR(80),
party_email VARCHAR(80)
);
CREATE TABLE Organization_Contact_Individuals (
individual_id INTEGER NOT NULL,
organization_id INTEGER NOT NULL,
date_contact_from DATETIME NOT NULL,
date_contact_to DATETIME,
PRIMARY KEY (individual_id,organization_id ),
FOREIGN KEY (organization_id ) REFERENCES Organizations(organization_id ),
FOREIGN KEY (individual_id ) REFERENCES Individuals(individual_id )
);
CREATE TABLE Party_Addresses (
party_id INTEGER NOT NULL,
address_id INTEGER NOT NULL,
date_address_from DATETIME NOT NULL,
address_type_code VARCHAR(15) NOT NULL,
date_address_to DATETIME,
PRIMARY KEY (party_id, address_id),
FOREIGN KEY (address_id ) REFERENCES Addresses(address_id ),
FOREIGN KEY (party_id ) REFERENCES Parties(party_id )
);
CREATE TABLE Party_Forms (
party_id INTEGER NOT NULL,
form_id INTEGER NOT NULL,
date_completion_started DATETIME NOT NULL,
form_status_code VARCHAR(15) NOT NULL,
date_fully_completed DATETIME,
PRIMARY KEY (party_id, form_id),
FOREIGN KEY (party_id ) REFERENCES Parties(party_id ),
FOREIGN KEY (form_id ) REFERENCES Forms(form_id )
);
CREATE TABLE Party_Services (
booking_id INTEGER NOT NULL ,
customer_id INTEGER NOT NULL,
service_id INTEGER NOT NULL,
service_datetime DATETIME NOT NULL,
booking_made_date DATETIME,
FOREIGN KEY (service_id ) REFERENCES Services(service_id ),
FOREIGN KEY (customer_id ) REFERENCES Parties(party_id )
);"
e_learning,"CREATE TABLE Course_Authors_and_Tutors (
author_id INTEGER PRIMARY KEY,
author_tutor_ATB VARCHAR(3),
login_name VARCHAR(40),
password VARCHAR(40),
personal_name VARCHAR(80),
middle_name VARCHAR(80),
family_name VARCHAR(80),
gender_mf VARCHAR(1),
address_line_1 VARCHAR(80)
);
CREATE TABLE Students (
student_id INTEGER PRIMARY KEY,
date_of_registration DATETIME,
date_of_latest_logon DATETIME,
login_name VARCHAR(40),
password VARCHAR(10),
personal_name VARCHAR(40),
middle_name VARCHAR(40),
family_name VARCHAR(40)
);
CREATE TABLE Subjects (
subject_id INTEGER PRIMARY KEY,
subject_name VARCHAR(120)
);
CREATE TABLE Courses (
course_id INTEGER PRIMARY KEY,
author_id INTEGER NOT NULL,
subject_id INTEGER NOT NULL,
course_name VARCHAR(120),
course_description VARCHAR(255),
FOREIGN KEY (author_id ) REFERENCES Course_Authors_and_Tutors(author_id ),
FOREIGN KEY (subject_id ) REFERENCES Subjects(subject_id )
);
CREATE TABLE Student_Course_Enrolment (
registration_id INTEGER PRIMARY KEY,
student_id INTEGER NOT NULL,
course_id INTEGER NOT NULL,
date_of_enrolment DATETIME NOT NULL,
date_of_completion DATETIME NOT NULL,
FOREIGN KEY (course_id ) REFERENCES Courses(course_id ),
FOREIGN KEY (student_id ) REFERENCES Students(student_id )
);
CREATE TABLE Student_Tests_Taken (
registration_id INTEGER NOT NULL,
date_test_taken DATETIME NOT NULL,
test_result VARCHAR(255),
FOREIGN KEY (registration_id ) REFERENCES Student_Course_Enrolment(registration_id )
);"
election,"CREATE TABLE county (
County_Id int,
County_name text,
Population real,
Zip_code text,
PRIMARY KEY (County_Id)
);
CREATE TABLE party (
Party_ID int,
Year real,
Party text,
Governor text,
Lieutenant_Governor text,
Comptroller text,
Attorney_General text,
US_Senate text,
PRIMARY KEY (Party_ID)
);
CREATE TABLE election (
Election_ID int,
Counties_Represented text,
District int,
Delegate text,
Party int,
First_Elected real,
Committee text,
PRIMARY KEY (Election_ID),
FOREIGN KEY (Party) REFERENCES party(Party_ID),
FOREIGN KEY (District) REFERENCES county(County_Id)
);"
election_representative,"CREATE TABLE election (
Election_ID int,
Representative_ID int,
Date text,
Votes real,
Vote_Percent real,
Seats real,
Place real,
PRIMARY KEY (Election_ID),
FOREIGN KEY (Representative_ID) REFERENCES representative(Representative_ID)
);
CREATE TABLE representative (
Representative_ID int,
Name text,
State text,
Party text,
Lifespan text,
PRIMARY KEY (Representative_ID)
);"
entertainment_awards,"CREATE TABLE festival_detail (
Festival_ID int,
Festival_Name text,
Chair_Name text,
Location text,
Year int,
Num_of_Audience int,
PRIMARY KEY (Festival_ID)
);
CREATE TABLE artwork (
Artwork_ID int,
Type text,
Name text,
PRIMARY KEY (Artwork_ID)
);
CREATE TABLE nomination (
Artwork_ID int,
Festival_ID int,
Result text,
PRIMARY KEY (Artwork_ID,Festival_ID),
FOREIGN KEY (Artwork_ID) REFERENCES artwork(Artwork_ID),
FOREIGN KEY (Festival_ID) REFERENCES festival_detail(Festival_ID)
);"
entrepreneur,"CREATE TABLE entrepreneur (
Entrepreneur_ID int,
People_ID int,
Company text,
Money_Requested real,
Investor text,
PRIMARY KEY (Entrepreneur_ID),
FOREIGN KEY (People_ID) REFERENCES people(People_ID)
);
CREATE TABLE people (
People_ID int,
Name text,
Height real,
Weight real,
Date_of_Birth text,
PRIMARY KEY (People_ID)
);"
epinions_1,"CREATE TABLE item (
  i_id integer NOT NULL,
  title varchar(20) DEFAULT NULL,
  PRIMARY KEY (i_id)
);
CREATE TABLE review (
  a_id integer NOT NULL PRIMARY KEY,
  u_id integer NOT NULL,
   i_id integer NOT NULL,
   rating integer DEFAULT NULL,
   rank integer DEFAULT NULL,
    FOREIGN KEY (u_id) REFERENCES useracct(u_id),
   FOREIGN KEY (i_id) REFERENCES item(i_id)
);
CREATE TABLE trust (
source_u_id integer NOT NULL,
target_u_id integer NOT NULL,
trust integer NOT NULL,
FOREIGN KEY (source_u_id) REFERENCES useracct(u_id),
FOREIGN KEY (target_u_id) REFERENCES useracct(u_id)
);
CREATE TABLE useracct (
  u_id integer NOT NULL,
 name varchar(128) DEFAULT NULL,
 PRIMARY KEY (u_id)
);
CREATE INDEX IF NOT EXISTS idx_review_IDX_RATING_AID ON review (a_id);
CREATE INDEX IF NOT EXISTS idx_review_IDX_RATING_IID ON review (i_id);
CREATE INDEX IF NOT EXISTS idx_review_IDX_RATING_UID ON review (u_id);
CREATE INDEX IF NOT EXISTS idx_trust_IDX_TRUST_SID ON trust (source_u_id);
CREATE INDEX IF NOT EXISTS idx_trust_IDX_TRUST_TID ON trust (target_u_id);"
farm,"CREATE TABLE city (
City_ID int,
Official_Name text,
Status text,
Area_km_2 real,
Population real,
Census_Ranking text,
PRIMARY KEY (City_ID)
);
CREATE TABLE farm (
Farm_ID int,
Year int,
Total_Horses real,
Working_Horses real,
Total_Cattle real,
Oxen real,
Bulls real,
Cows real,
Pigs real,
Sheep_and_Goats real,
PRIMARY KEY (Farm_ID)
);
CREATE TABLE farm_competition (
Competition_ID int,
Year int,
Theme text,
Host_city_ID int,
Hosts text,
PRIMARY KEY (Competition_ID),
FOREIGN KEY (Host_city_ID) REFERENCES city(City_ID)
);
CREATE TABLE competition_record (
Competition_ID int,
Farm_ID int,
Rank int,
PRIMARY KEY (Competition_ID,Farm_ID),
FOREIGN KEY (Competition_ID) REFERENCES farm_competition(Competition_ID),
FOREIGN KEY (Farm_ID) REFERENCES farm(Farm_ID)
);"
film_rank,"CREATE TABLE film (
Film_ID int,
Title text,
Studio text,
Director text,
Gross_in_dollar int,
PRIMARY KEY (Film_ID)
);
CREATE TABLE market (
Market_ID int,
Country text,
Number_cities int,
PRIMARY KEY (Market_ID)
);
CREATE TABLE film_market_estimation (
Estimation_ID int,
Low_Estimate real,
High_Estimate real,
Film_ID int,
Type text,
Market_ID int,
Year int,
PRIMARY KEY (Estimation_ID),
FOREIGN KEY (Film_ID) REFERENCES film(Film_ID),
FOREIGN KEY (Market_ID) REFERENCES market(Market_ID)
);"
flight_1,"CREATE TABLE flight (
 flno number(4,0) primary key,
 origin varchar2(20),
 destination varchar2(20),
 distance number(6,0),
 departure_date date,
 arrival_date date,
 price number(7,2),
    aid number(9,0),
    foreign key(aid) references aircraft(aid));
CREATE TABLE aircraft (
 aid number(9,0) primary key,
 name varchar2(30),
 distance number(6,0));
CREATE TABLE employee (
 eid number(9,0) primary key,
 name varchar2(30),
 salary number(10,2));
CREATE TABLE certificate (
 eid number(9,0),
 aid number(9,0),
 primary key(eid,aid),
 foreign key(eid) references employee(eid),
 foreign key(aid) references aircraft(aid)); "
flight_4,"CREATE TABLE airlines (
   alid integer PRIMARY KEY      -- Id of the airline,
   name text,                     -- Name of the airline,
   iata varchar(2)           -- 2-letter IATA code. empty or null if not assigned/unknown,
   icao varchar(3)               -- 3-letter ICAO code. empty or null if not assigned,
   callsign text                -- Airline callsign,
   country text                  -- Country or territory where airline is incorporated,
   active varchar(2)              -- Y if the airline is or has until recently been operational,
);
CREATE TABLE airports (
   apid integer PRIMARY KEY     -- Id of the airport,
   name text NOT NULL         -- Name of airport,
   city text                  -- Main city served by airport,
   country text               -- Country or territory where airport is located,
   x real                   -- Latitude of airport: Decimal degrees, usually to six,
   y real                        -- Longitude of airport: Decimal degrees, usually to six,
   elevation bigint              -- Altitude of airport measured in feets,
   iata character varchar(3)   -- 3-letter IATA code. empty or null if not assigned/unknown,
   icao character varchar(4)      -- 4-letter ICAO code. empty or null if not assigned
);
CREATE TABLE routes (
   rid integer PRIMARY KEY,
   dst_apid integer            -- Id of destination airport,
   dst_ap varchar(4)             -- 3-letter (IATA) or 4-letter (ICAO) code of the destination airport,
   src_apid bigint              -- Id of source airport,
   src_ap varchar(4)             -- 3-letter (IATA) or 4-letter (ICAO) code of the source airport,
   alid bigint              -- Id of airline,
   airline varchar(4)            -- 2-letter (IATA) or 3-letter (ICAO) code of the airline,
   codeshare text               -- Y if this flight is a codeshare (that is, not operated by Airline, but another carrier),
   FOREIGN KEY(dst_apid) REFERENCES airports(apid),
   FOREIGN KEY(src_apid) REFERENCES airports(apid),
   FOREIGN KEY(alid)     REFERENCES airlines(alid)
);"
flight_company,"CREATE TABLE airport (
id int,
City text,
Country text,
IATA text,
ICAO text,
name text,
primary key(id)
);
CREATE TABLE operate_company (
id int,
name text,
Type text,
Principal_activities text,
Incorporated_in text,
Group_Equity_Shareholding real,
primary key (id)
);
CREATE TABLE flight (
id int,
Vehicle_Flight_number text,
Date text,
Pilot text,
Velocity real,
Altitude real,
airport_id int,
company_id int,
primary key (id),
foreign key (airport_id) references airport(id),
foreign key (company_id) references operate_company(id)
);"
formula_1,"CREATE TABLE circuits (
circuitId INTEGER PRIMARY KEY,
  circuitRef TEXT,
  name TEXT,
  location TEXT,
  country TEXT,
  lat REAL,
  lng REAL,
  alt INTEGER,
  url TEXT
);
CREATE TABLE races (
raceId INTEGER PRIMARY KEY,
  year INTEGER,
  round INTEGER,
  circuitId INTEGER,
  name TEXT,
  date TEXT,
  time TEXT,
  url TEXT,
  FOREIGN KEY (circuitId) REFERENCES circuits(circuitId)
);
CREATE TABLE drivers (
driverId INTEGER PRIMARY KEY,
  driverRef TEXT,
  number INTEGER,
  code TEXT,
  forename TEXT,
  surname TEXT,
  dob TEXT,
  nationality TEXT,
  url TEXT
);
CREATE TABLE status (
statusId INTEGER PRIMARY KEY,
  status TEXT
);
CREATE TABLE seasons (
year INTEGER PRIMARY KEY,
  url TEXT
);
CREATE TABLE constructors (
 constructorId INTEGER PRIMARY KEY,
  constructorRef TEXT,
  name TEXT,
  nationality TEXT,
  url TEXT
);
CREATE TABLE constructorStandings (
 constructorStandingsId INTEGER PRIMARY KEY,
  raceId INTEGER,
  constructorId INTEGER,
  points REAL,
  position INTEGER,
  positionText TEXT,
  wins INTEGER,
  FOREIGN KEY(constructorId) REFERENCES constructors(constructorId),
  FOREIGN KEY(raceId) REFERENCES races(raceId)
);
CREATE TABLE results (
resultId INTEGER PRIMARY KEY,
  raceId INTEGER,
  driverId INTEGER,
  constructorId INTEGER,
  number INTEGER,
  grid INTEGER,
  position INTEGER,
  positionText TEXT,
  positionOrder INTEGER,
  points REAL,
  laps INTEGER,
  time TEXT,
  milliseconds INTEGER,
  fastestLap INTEGER,
  rank INTEGER,
  fastestLapTime TEXT,
  fastestLapSpeed TEXT,
  statusId INTEGER,
  FOREIGN KEY(constructorId) REFERENCES constructors(constructorId),
  FOREIGN KEY(raceId) REFERENCES races(raceId),
  FOREIGN KEY (driverId) REFERENCES drivers(driverId)
);
CREATE TABLE driverStandings (
driverStandingsId INTEGER PRIMARY KEY,
  raceId INTEGER,
  driverId INTEGER,
  points REAL,
  position INTEGER,
  positionText TEXT,
  wins INTEGER,
  FOREIGN KEY(raceId) REFERENCES races(raceId),
  FOREIGN KEY (driverId) REFERENCES drivers(driverId)
);
CREATE TABLE constructorResults (
constructorResultsId INTEGER PRIMARY KEY,
  raceId INTEGER,
  constructorId INTEGER,
  points REAL,
  status REAL,
  FOREIGN KEY(constructorId) REFERENCES constructors(constructorId),
  FOREIGN KEY(raceId) REFERENCES races(raceId)
);
CREATE TABLE qualifying (
qualifyId INTEGER PRIMARY KEY,
  raceId INTEGER,
  driverId INTEGER,
  constructorId INTEGER,
  number INTEGER,
  position INTEGER,
  q1 TEXT,
  q2 TEXT,
  q3 TEXT,
  FOREIGN KEY(constructorId) REFERENCES constructors(constructorId),
  FOREIGN KEY(raceId) REFERENCES races(raceId),
  FOREIGN KEY (driverId) REFERENCES drivers(driverId)
);
CREATE TABLE pitStops (
raceId INTEGER,
  driverId INTEGER,
  stop INTEGER,
  lap INTEGER,
  time TEXT,
  duration TEXT,
  milliseconds INTEGER,
  PRIMARY KEY (raceId, driverId, stop),
  FOREIGN KEY(raceId) REFERENCES races(raceId),
  FOREIGN KEY (driverId) REFERENCES drivers(driverId)
);
CREATE TABLE lapTimes (
raceId INTEGER,
  driverId INTEGER,
  lap INTEGER,
  position INTEGER,
  time TEXT,
  milliseconds INTEGER,
  PRIMARY KEY(raceId, driverId, lap),
  FOREIGN KEY(raceId) REFERENCES races(raceId),
  FOREIGN KEY (driverId) REFERENCES drivers(driverId)
);"
game_1,"CREATE TABLE Student (
        StuID        INTEGER PRIMARY KEY,
        LName        VARCHAR(12),
        Fname        VARCHAR(12),
        Age      INTEGER,
        Sex      VARCHAR(1),
        Major        INTEGER,
        Advisor      INTEGER,
        city_code    VARCHAR(3)
 );
CREATE TABLE Video_Games (
       GameID           INTEGER PRIMARY KEY,
       GName            VARCHAR(40),
       GType            VARCHAR(40)
);
CREATE TABLE Plays_Games (
       StuID                INTEGER,
       GameID            INTEGER,
       Hours_Played      INTEGER,
       FOREIGN KEY(GameID) REFERENCES Video_Games(GameID),
       FOREIGN KEY(StuID) REFERENCES Student(StuID)
);
CREATE TABLE SportsInfo (
  StuID INTEGER,
  SportName VARCHAR(32),
  HoursPerWeek INTEGER,
  GamesPlayed INTEGER,
  OnScholarship VARCHAR(1),
  FOREIGN KEY(StuID) REFERENCES Student(StuID)
);"
game_injury,"CREATE TABLE stadium (
id int,
name text,
Home_Games int,
Average_Attendance real,
Total_Attendance real,
Capacity_Percentage real,
primary key (id)
);
CREATE TABLE game (
stadium_id int,
id int,
Season int,
Date text,
Home_team text,
Away_team text,
Score text,
Competition text,
primary key (id),
foreign key (stadium_id) references stadium(id)
);
CREATE TABLE injury_accident (
game_id int,
id int,
Player text,
Injury text,
Number_of_matches text,
Source text,
primary key (id),
foreign key (game_id) references game(id)
);"
gas_company,"CREATE TABLE company (
Company_ID int,
Rank int,
Company text,
Headquarters text,
Main_Industry text,
Sales_billion real,
Profits_billion real,
Assets_billion real,
Market_Value real,
PRIMARY KEY (Company_ID)
);
CREATE TABLE gas_station (
Station_ID int,
Open_Year int,
Location text,
Manager_Name text,
Vice_Manager_Name text,
Representative_Name text,
PRIMARY KEY (Station_ID)
);
CREATE TABLE station_company (
Station_ID int,
Company_ID int,
Rank_of_the_Year int,
PRIMARY KEY (Station_ID,Company_ID),
FOREIGN KEY (Station_ID) REFERENCES gas_station(Station_ID),
FOREIGN KEY (Company_ID) REFERENCES company(Company_ID)
);"
gymnast,"CREATE TABLE gymnast (
Gymnast_ID int,
Floor_Exercise_Points real,
Pommel_Horse_Points real,
Rings_Points real,
Vault_Points real,
Parallel_Bars_Points real,
Horizontal_Bar_Points real,
Total_Points real,
PRIMARY KEY (Gymnast_ID),
FOREIGN KEY (Gymnast_ID) REFERENCES people(People_ID)
);
CREATE TABLE people (
People_ID int,
Name text,
Age real,
Height real,
Hometown text,
PRIMARY KEY (People_ID)
);"
hospital_1,"CREATE TABLE Physician (
  EmployeeID INTEGER NOT NULL,
  Name VARCHAR(30) NOT NULL,
  Position VARCHAR(30) NOT NULL,
  SSN INTEGER NOT NULL,
  CONSTRAINT pk_physician PRIMARY KEY(EmployeeID)
); 
CREATE TABLE Department (
  DepartmentID INTEGER NOT NULL,
  Name VARCHAR(30) NOT NULL,
  Head INTEGER NOT NULL,
  CONSTRAINT pk_Department PRIMARY KEY(DepartmentID),
  CONSTRAINT fk_Department_Physician_EmployeeID FOREIGN KEY(Head) REFERENCES Physician(EmployeeID)
);
CREATE TABLE Affiliated_With (
  Physician INTEGER NOT NULL,
  Department INTEGER NOT NULL,
  PrimaryAffiliation BOOLEAN NOT NULL,
  CONSTRAINT fk_Affiliated_With_Physician_EmployeeID FOREIGN KEY(Physician) REFERENCES Physician(EmployeeID),
  CONSTRAINT fk_Affiliated_With_Department_DepartmentID FOREIGN KEY(Department) REFERENCES Department(DepartmentID),
  PRIMARY KEY(Physician, Department)
);
CREATE TABLE Procedures (
  Code INTEGER PRIMARY KEY NOT NULL,
  Name VARCHAR(30) NOT NULL,
  Cost REAL NOT NULL
);
CREATE TABLE Trained_In (
  Physician INTEGER NOT NULL,
  Treatment INTEGER NOT NULL,
  CertificationDate DATETIME NOT NULL,
  CertificationExpires DATETIME NOT NULL,
  CONSTRAINT fk_Trained_In_Physician_EmployeeID FOREIGN KEY(Physician) REFERENCES Physician(EmployeeID),
  CONSTRAINT fk_Trained_In_Procedures_Code FOREIGN KEY(Treatment) REFERENCES Procedures(Code),
  PRIMARY KEY(Physician, Treatment)
);
CREATE TABLE Patient (
  SSN INTEGER PRIMARY KEY NOT NULL,
  Name VARCHAR(30) NOT NULL,
  Address VARCHAR(30) NOT NULL,
  Phone VARCHAR(30) NOT NULL,
  InsuranceID INTEGER NOT NULL,
  PCP INTEGER NOT NULL,
  CONSTRAINT fk_Patient_Physician_EmployeeID FOREIGN KEY(PCP) REFERENCES Physician(EmployeeID)
);
CREATE TABLE Nurse (
  EmployeeID INTEGER PRIMARY KEY NOT NULL,
  Name VARCHAR(30) NOT NULL,
  Position VARCHAR(30) NOT NULL,
  Registered BOOLEAN NOT NULL,
  SSN INTEGER NOT NULL
);
CREATE TABLE Appointment (
  AppointmentID INTEGER PRIMARY KEY NOT NULL,
  Patient INTEGER NOT NULL,    
  PrepNurse INTEGER,
  Physician INTEGER NOT NULL,
  Start DATETIME NOT NULL,
  End DATETIME NOT NULL,
  ExaminationRoom TEXT NOT NULL,
  CONSTRAINT fk_Appointment_Patient_SSN FOREIGN KEY(Patient) REFERENCES Patient(SSN),
  CONSTRAINT fk_Appointment_Nurse_EmployeeID FOREIGN KEY(PrepNurse) REFERENCES Nurse(EmployeeID),
  CONSTRAINT fk_Appointment_Physician_EmployeeID FOREIGN KEY(Physician) REFERENCES Physician(EmployeeID)
);
CREATE TABLE Medication (
  Code INTEGER PRIMARY KEY NOT NULL,
  Name VARCHAR(30) NOT NULL,
  Brand VARCHAR(30) NOT NULL,
  Description VARCHAR(30) NOT NULL
);
CREATE TABLE Prescribes (
  Physician INTEGER NOT NULL,
  Patient INTEGER NOT NULL, 
  Medication INTEGER NOT NULL, 
  Date DATETIME NOT NULL,
  Appointment INTEGER,  
  Dose VARCHAR(30) NOT NULL,
  PRIMARY KEY(Physician, Patient, Medication, Date),
  CONSTRAINT fk_Prescribes_Physician_EmployeeID FOREIGN KEY(Physician) REFERENCES Physician(EmployeeID),
  CONSTRAINT fk_Prescribes_Patient_SSN FOREIGN KEY(Patient) REFERENCES Patient(SSN),
  CONSTRAINT fk_Prescribes_Medication_Code FOREIGN KEY(Medication) REFERENCES Medication(Code),
  CONSTRAINT fk_Prescribes_Appointment_AppointmentID FOREIGN KEY(Appointment) REFERENCES Appointment(AppointmentID)
);
CREATE TABLE Block (
  BlockFloor INTEGER NOT NULL,
  BlockCode INTEGER NOT NULL,
  PRIMARY KEY(BlockFloor, BlockCode)
); 
CREATE TABLE Room (
  RoomNumber INTEGER PRIMARY KEY NOT NULL,
  RoomType VARCHAR(30) NOT NULL,
  BlockFloor INTEGER NOT NULL,  
  BlockCode INTEGER NOT NULL,  
  Unavailable BOOLEAN NOT NULL,
  CONSTRAINT fk_Room_Block_PK FOREIGN KEY(BlockFloor, BlockCode) REFERENCES Block(BlockFloor, BlockCode)
);
CREATE TABLE On_Call (
  Nurse INTEGER NOT NULL,
  BlockFloor INTEGER NOT NULL, 
  BlockCode INTEGER NOT NULL,
  OnCallStart DATETIME NOT NULL,
  OnCallEnd DATETIME NOT NULL,
  PRIMARY KEY(Nurse, BlockFloor, BlockCode, OnCallStart, OnCallEnd),
  CONSTRAINT fk_OnCall_Nurse_EmployeeID FOREIGN KEY(Nurse) REFERENCES Nurse(EmployeeID),
  CONSTRAINT fk_OnCall_Block_Floor FOREIGN KEY(BlockFloor, BlockCode) REFERENCES Block(BlockFloor, BlockCode) 
);
CREATE TABLE Stay (
  StayID INTEGER PRIMARY KEY NOT NULL,
  Patient INTEGER NOT NULL,
  Room INTEGER NOT NULL,
  StayStart DATETIME NOT NULL,
  StayEnd DATETIME NOT NULL,
  CONSTRAINT fk_Stay_Patient_SSN FOREIGN KEY(Patient) REFERENCES Patient(SSN),
  CONSTRAINT fk_Stay_Room_Number FOREIGN KEY(Room) REFERENCES Room(RoomNumber)
);
CREATE TABLE Undergoes (
  Patient INTEGER NOT NULL,
  Procedures INTEGER NOT NULL,
  Stay INTEGER NOT NULL,
  DateUndergoes DATETIME NOT NULL,
  Physician INTEGER NOT NULL,
  AssistingNurse INTEGER,
  PRIMARY KEY(Patient, Procedures, Stay, DateUndergoes),
  CONSTRAINT fk_Undergoes_Patient_SSN FOREIGN KEY(Patient) REFERENCES Patient(SSN),
  CONSTRAINT fk_Undergoes_Procedures_Code FOREIGN KEY(Procedures) REFERENCES Procedures(Code),
  CONSTRAINT fk_Undergoes_Stay_StayID FOREIGN KEY(Stay) REFERENCES Stay(StayID),
  CONSTRAINT fk_Undergoes_Physician_EmployeeID FOREIGN KEY(Physician) REFERENCES Physician(EmployeeID),
  CONSTRAINT fk_Undergoes_Nurse_EmployeeID FOREIGN KEY(AssistingNurse) REFERENCES Nurse(EmployeeID)
);"
hr_1,"CREATE TABLE regions (
  REGION_ID decimal(5,0) NOT NULL,
  REGION_NAME varchar(25) DEFAULT NULL,
  PRIMARY KEY (REGION_ID)
);
CREATE TABLE countries (
  COUNTRY_ID varchar(2) NOT NULL,
  COUNTRY_NAME varchar(40) DEFAULT NULL,
  REGION_ID decimal(10,0) DEFAULT NULL,
  PRIMARY KEY (COUNTRY_ID),
  FOREIGN KEY (REGION_ID) REFERENCES regions (REGION_ID)
);
CREATE TABLE departments (
  DEPARTMENT_ID decimal(4,0) NOT NULL DEFAULT '0',
  DEPARTMENT_NAME varchar(30) NOT NULL,
  MANAGER_ID decimal(6,0) DEFAULT NULL,
  LOCATION_ID decimal(4,0) DEFAULT NULL,
  PRIMARY KEY (DEPARTMENT_ID)
);
CREATE TABLE jobs (
  JOB_ID varchar(10) NOT NULL DEFAULT '',
  JOB_TITLE varchar(35) NOT NULL,
  MIN_SALARY decimal(6,0) DEFAULT NULL,
  MAX_SALARY decimal(6,0) DEFAULT NULL,
  PRIMARY KEY (JOB_ID)
);
CREATE TABLE employees (
  EMPLOYEE_ID decimal(6,0) NOT NULL DEFAULT '0',
  FIRST_NAME varchar(20) DEFAULT NULL,
  LAST_NAME varchar(25) NOT NULL,
  EMAIL varchar(25) NOT NULL,
  PHONE_NUMBER varchar(20) DEFAULT NULL,
  HIRE_DATE date NOT NULL,
  JOB_ID varchar(10) NOT NULL,
  SALARY decimal(8,2) DEFAULT NULL,
  COMMISSION_PCT decimal(2,2) DEFAULT NULL,
  MANAGER_ID decimal(6,0) DEFAULT NULL,
  DEPARTMENT_ID decimal(4,0) DEFAULT NULL,
  PRIMARY KEY (EMPLOYEE_ID),
  FOREIGN KEY (DEPARTMENT_ID) REFERENCES departments(DEPARTMENT_ID),
  FOREIGN KEY (JOB_ID) REFERENCES jobs(JOB_ID)
);
CREATE TABLE job_history (
  EMPLOYEE_ID decimal(6,0) NOT NULL,
  START_DATE date NOT NULL,
  END_DATE date NOT NULL,
  JOB_ID varchar(10) NOT NULL,
  DEPARTMENT_ID decimal(4,0) DEFAULT NULL,
  PRIMARY KEY (EMPLOYEE_ID,START_DATE),
  FOREIGN KEY (EMPLOYEE_ID) REFERENCES employees(EMPLOYEE_ID),
  FOREIGN KEY (DEPARTMENT_ID) REFERENCES departments(DEPARTMENT_ID),
  FOREIGN KEY (JOB_ID) REFERENCES jobs(JOB_ID)
);
CREATE TABLE locations (
  LOCATION_ID decimal(4,0) NOT NULL DEFAULT '0',
  STREET_ADDRESS varchar(40) DEFAULT NULL,
  POSTAL_CODE varchar(12) DEFAULT NULL,
  CITY varchar(30) NOT NULL,
  STATE_PROVINCE varchar(25) DEFAULT NULL,
  COUNTRY_ID varchar(2) DEFAULT NULL,
  PRIMARY KEY (LOCATION_ID),
  FOREIGN KEY (COUNTRY_ID) REFERENCES countries(COUNTRY_ID)
);"
icfp_1,"CREATE TABLE Authors (
  authID INTEGER,
  lname TEXT,
  fname TEXT,
  PRIMARY KEY (authID)
);
CREATE TABLE Authorship (
  authID INTEGER,
  instID INTEGER,
  paperID INTEGER,
  authOrder INTEGER,
  PRIMARY KEY (authID, instID, paperID),
  FOREIGN KEY (authID) REFERENCES Authors (authID),
  FOREIGN KEY (instID) REFERENCES Inst (instID),
  FOREIGN KEY (paperID) REFERENCES Papers (paperID)
);
CREATE TABLE Inst (
  instID INTEGER,
  name TEXT,
  country TEXT, -- the home country of the institution (this is obviously an impoverished model)
  PRIMARY KEY (instID)
);
CREATE TABLE Papers (
  paperID INTEGER,
  title TEXT,
  PRIMARY KEY (paperID)
);"
inn_1,"CREATE TABLE Rooms ( 
 RoomId TEXT PRIMARY KEY,
 roomName TEXT,
 beds INTEGER,
 bedType TEXT,
 maxOccupancy INTEGER,
 basePrice INTEGER,
 decor TEXT
);
CREATE TABLE Reservations ( 
 Code INTEGER PRIMARY KEY,
 Room TEXT,
 CheckIn TEXT,
 CheckOut TEXT,
 Rate REAL,
 LastName TEXT,
 FirstName TEXT,
 Adults INTEGER,
 Kids INTEGER,
 FOREIGN KEY (Room) REFERENCES Rooms(RoomId)
);"
insurance_and_eClaims,"CREATE TABLE Customers (
Customer_ID INTEGER NOT NULL,
Customer_Details VARCHAR(255) NOT NULL,
PRIMARY KEY (Customer_ID)
);
CREATE TABLE Staff (
Staff_ID INTEGER NOT NULL,
Staff_Details VARCHAR(255) NOT NULL,
PRIMARY KEY (Staff_ID)
);
CREATE TABLE Policies (
Policy_ID INTEGER NOT NULL,
Customer_ID INTEGER NOT NULL,
Policy_Type_Code CHAR(15) NOT NULL,
Start_Date DATETIME,
End_Date DATETIME,
PRIMARY KEY (Policy_ID),
FOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)
);
CREATE TABLE Claim_Headers (
Claim_Header_ID INTEGER NOT NULL,
Claim_Status_Code CHAR(15) NOT NULL,
Claim_Type_Code CHAR(15) NOT NULL,
Policy_ID INTEGER NOT NULL,
Date_of_Claim DATETIME,
Date_of_Settlement DATETIME,
Amount_Claimed DECIMAL(20,4),
Amount_Piad DECIMAL(20,4),
PRIMARY KEY (Claim_Header_ID),
FOREIGN KEY (Policy_ID) REFERENCES Policies (Policy_ID)
);
CREATE TABLE Claims_Documents (
Claim_ID INTEGER NOT NULL,
Document_Type_Code CHAR(15) NOT NULL,
Created_by_Staff_ID INTEGER,
Created_Date INTEGER,
PRIMARY KEY (Claim_ID, Document_Type_Code),
FOREIGN KEY (Claim_ID) REFERENCES Claim_Headers (Claim_Header_ID),
FOREIGN KEY (Created_by_Staff_ID) REFERENCES Staff (Staff_ID)
);
CREATE TABLE Claims_Processing_Stages (
Claim_Stage_ID INTEGER NOT NULL,
Next_Claim_Stage_ID INTEGER,
Claim_Status_Name VARCHAR(255) NOT NULL,
Claim_Status_Description VARCHAR(255) NOT NULL,
PRIMARY KEY (Claim_Stage_ID)
);
CREATE TABLE Claims_Processing (
Claim_Processing_ID INTEGER NOT NULL,
Claim_ID INTEGER NOT NULL,
Claim_Outcome_Code CHAR(15) NOT NULL,
Claim_Stage_ID INTEGER NOT NULL,
Staff_ID INTEGER,
PRIMARY KEY (Claim_Processing_ID),
FOREIGN KEY (Claim_ID) REFERENCES Claim_Headers (Claim_Header_ID),
FOREIGN KEY (Staff_ID) REFERENCES Staff (Staff_ID)
);"
insurance_fnol,"CREATE TABLE Customers (
Customer_ID INTEGER NOT NULL,
Customer_name VARCHAR(40),
PRIMARY KEY (Customer_ID)
);
CREATE TABLE Services (
Service_ID INTEGER NOT NULL,
Service_name VARCHAR(40),
PRIMARY KEY (Service_ID)
);
CREATE TABLE Available_Policies (
Policy_ID INTEGER NOT NULL,
policy_type_code CHAR(15),
Customer_Phone VARCHAR(255),
PRIMARY KEY (Policy_ID),
UNIQUE (Policy_ID)
);
CREATE TABLE Customers_Policies (
Customer_ID INTEGER NOT NULL,
Policy_ID INTEGER NOT NULL,
Date_Opened DATE,
Date_Closed DATE,
PRIMARY KEY (Customer_ID, Policy_ID),
FOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID),
FOREIGN KEY (Policy_ID) REFERENCES Available_Policies (Policy_ID)
);
CREATE TABLE First_Notification_of_Loss (
FNOL_ID INTEGER NOT NULL,
Customer_ID INTEGER NOT NULL,
Policy_ID INTEGER NOT NULL,
Service_ID INTEGER NOT NULL,
PRIMARY KEY (FNOL_ID),
UNIQUE (FNOL_ID),
FOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),
FOREIGN KEY (Customer_ID, Policy_ID) REFERENCES Customers_Policies (Customer_ID,Policy_ID)
);
CREATE TABLE Claims (
Claim_ID INTEGER NOT NULL,
FNOL_ID INTEGER NOT NULL,
Effective_Date DATE,
PRIMARY KEY (Claim_ID),
UNIQUE (Claim_ID),
FOREIGN KEY (FNOL_ID) REFERENCES First_Notification_of_Loss (FNOL_ID)
);
CREATE TABLE Settlements (
Settlement_ID INTEGER NOT NULL,
Claim_ID INTEGER,
Effective_Date DATE,
Settlement_Amount REAL,
PRIMARY KEY (Settlement_ID),
UNIQUE (Settlement_ID),
FOREIGN KEY (Claim_ID) REFERENCES Claims (Claim_ID)
);"
insurance_policies,"CREATE TABLE Customers (
Customer_ID INTEGER NOT NULL,
Customer_Details VARCHAR(255) NOT NULL,
PRIMARY KEY (Customer_ID)
);
CREATE TABLE Customer_Policies (
Policy_ID INTEGER NOT NULL,
Customer_ID INTEGER NOT NULL,
Policy_Type_Code CHAR(15) NOT NULL,
Start_Date DATE,
End_Date DATE,
PRIMARY KEY (Policy_ID),
FOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)
);
CREATE TABLE Claims (
Claim_ID INTEGER NOT NULL,
Policy_ID INTEGER NOT NULL,
Date_Claim_Made DATE,
Date_Claim_Settled DATE,
Amount_Claimed INTEGER,
Amount_Settled INTEGER,
PRIMARY KEY (Claim_ID),
FOREIGN KEY (Policy_ID) REFERENCES Customer_Policies (Policy_ID)
);
CREATE TABLE Settlements (
Settlement_ID INTEGER NOT NULL,
Claim_ID INTEGER NOT NULL,
Date_Claim_Made DATE,
Date_Claim_Settled DATE,
Amount_Claimed INTEGER,
Amount_Settled INTEGER,
Customer_Policy_ID INTEGER NOT NULL,
PRIMARY KEY (Settlement_ID),
FOREIGN KEY (Claim_ID) REFERENCES Claims (Claim_ID)
);
CREATE TABLE Payments (
Payment_ID INTEGER NOT NULL,
Settlement_ID INTEGER NOT NULL,
Payment_Method_Code VARCHAR(255),
Date_Payment_Made DATE,
Amount_Payment INTEGER,
PRIMARY KEY (Payment_ID),
FOREIGN KEY (Settlement_ID) REFERENCES Settlements (Settlement_ID)
);"
journal_committee,"CREATE TABLE journal (
Journal_ID int,
Date text,
Theme text,
Sales int,
PRIMARY KEY (Journal_ID)
);
CREATE TABLE editor (
Editor_ID int,
Name text,
Age real,
PRIMARY KEY (Editor_ID)
);
CREATE TABLE journal_committee (
Editor_ID int,
Journal_ID int,
Work_Type text,
PRIMARY KEY (Editor_ID,Journal_ID),
FOREIGN KEY (Editor_ID) REFERENCES editor(Editor_ID),
FOREIGN KEY (Journal_ID) REFERENCES journal(Journal_ID)
);"
loan_1,"CREATE TABLE bank (
branch_ID int PRIMARY KEY,
bname varchar(20),
no_of_customers int,
city varchar(10),
state varchar(20));
CREATE TABLE customer (
cust_ID varchar(3) PRIMARY KEY,
cust_name varchar(20),
acc_type char(1),
acc_bal int,
no_of_loans int,
credit_score int,
branch_ID int,
state varchar(20),
FOREIGN KEY(branch_ID) REFERENCES bank(branch_ID));
CREATE TABLE loan (
loan_ID varchar(3) PRIMARY KEY,
loan_type varchar(15),
cust_ID varchar(3),
branch_ID varchar(3),
amount int,
FOREIGN KEY(branch_ID) REFERENCES bank(branch_ID),
FOREIGN KEY(Cust_ID) REFERENCES customer(Cust_ID));"
local_govt_and_lot,"CREATE TABLE Customers (
customer_id INTEGER NOT NULL,
customer_details VARCHAR(255),
PRIMARY KEY (customer_id)
);
CREATE TABLE Properties (
property_id INTEGER NOT NULL,
property_type_code CHAR(15) NOT NULL,
property_address VARCHAR(255),
other_details VARCHAR(255),
PRIMARY KEY (property_id)
);
CREATE TABLE Residents (
resident_id INTEGER NOT NULL,
property_id INTEGER NOT NULL,
date_moved_in DATETIME NOT NULL,
date_moved_out DATETIME NOT NULL,
other_details VARCHAR(255),
PRIMARY KEY (resident_id, property_id, date_moved_in),
FOREIGN KEY (property_id) REFERENCES Properties (property_id)
);
CREATE TABLE Organizations (
organization_id INTEGER NOT NULL,
parent_organization_id INTEGER,
organization_details VARCHAR(255),
PRIMARY KEY (organization_id)
);
CREATE TABLE Services (
service_id INTEGER NOT NULL,
organization_id INTEGER NOT NULL,
service_type_code CHAR(15) NOT NULL,
service_details VARCHAR(255),
PRIMARY KEY (service_id),
FOREIGN KEY (organization_id) REFERENCES Organizations (organization_id)
);
CREATE TABLE Residents_Services (
resident_id INTEGER NOT NULL,
service_id INTEGER NOT NULL,
date_moved_in DATETIME,
property_id INTEGER,
date_requested DATETIME,
date_provided DATETIME,
other_details VARCHAR(255),
PRIMARY KEY (resident_id, service_id),
FOREIGN KEY (service_id) REFERENCES Services (service_id),
FOREIGN KEY (resident_id, property_id, date_moved_in) REFERENCES Residents (resident_id,property_id,date_moved_in)
);
CREATE TABLE Things (
thing_id INTEGER NOT NULL,
organization_id INTEGER NOT NULL,
Type_of_Thing_Code CHAR(15) NOT NULL,
service_type_code CHAR(10) NOT NULL,
service_details VARCHAR(255),
PRIMARY KEY (thing_id),
FOREIGN KEY (organization_id) REFERENCES Organizations (organization_id)
);
CREATE TABLE Customer_Events (
Customer_Event_ID INTEGER NOT NULL,
customer_id INTEGER,
date_moved_in DATETIME,
property_id INTEGER,
resident_id INTEGER,
thing_id INTEGER NOT NULL,
PRIMARY KEY (Customer_Event_ID),
FOREIGN KEY (thing_id) REFERENCES Things (thing_id),
FOREIGN KEY (customer_id) REFERENCES Customers (customer_id),
FOREIGN KEY (resident_id, property_id, date_moved_in) REFERENCES Residents (resident_id,property_id,date_moved_in)
);
CREATE TABLE Customer_Event_Notes (
Customer_Event_Note_ID INTEGER NOT NULL,
Customer_Event_ID INTEGER NOT NULL,
service_type_code CHAR(15) NOT NULL,
resident_id INTEGER NOT NULL,
property_id INTEGER NOT NULL,
date_moved_in DATETIME NOT NULL,
PRIMARY KEY (Customer_Event_Note_ID),
FOREIGN KEY (Customer_Event_ID) REFERENCES Customer_Events (Customer_Event_ID)
);
CREATE TABLE Timed_Status_of_Things (
thing_id INTEGER NOT NULL,
Date_and_Date DATETIME NOT NULL,
Status_of_Thing_Code CHAR(15) NOT NULL,
PRIMARY KEY (thing_id, Date_and_Date, Status_of_Thing_Code),
FOREIGN KEY (thing_id) REFERENCES Things (thing_id)
);
CREATE TABLE Timed_Locations_of_Things (
thing_id INTEGER NOT NULL,
Date_and_Time DATETIME NOT NULL,
Location_Code CHAR(15) NOT NULL,
PRIMARY KEY (thing_id, Date_and_Time, Location_Code),
FOREIGN KEY (thing_id) REFERENCES Things (thing_id));"
local_govt_in_alabama,"CREATE TABLE Services (
Service_ID INTEGER NOT NULL,
Service_Type_Code CHAR(15) NOT NULL,
PRIMARY KEY (Service_ID)
);
CREATE TABLE Participants (
Participant_ID INTEGER NOT NULL,
Participant_Type_Code CHAR(15) NOT NULL,
Participant_Details VARCHAR(255),
PRIMARY KEY (Participant_ID)
);
CREATE TABLE Events (
Event_ID INTEGER NOT NULL,
Service_ID INTEGER NOT NULL,
Event_Details VARCHAR(255),
PRIMARY KEY (Event_ID),
FOREIGN KEY (Service_ID) REFERENCES Services (Service_ID)
);
CREATE TABLE Participants_in_Events (
Event_ID INTEGER NOT NULL,
Participant_ID INTEGER NOT NULL,
PRIMARY KEY (Event_ID, Participant_ID),
FOREIGN KEY (Participant_ID) REFERENCES Participants (Participant_ID),
FOREIGN KEY (Event_ID) REFERENCES Events (Event_ID)
);"
local_govt_mdm,"CREATE TABLE Customer_Master_Index (
master_customer_id INTEGER NOT NULL,
cmi_details VARCHAR(255),
PRIMARY KEY (master_customer_id)
);
CREATE TABLE CMI_Cross_References (
cmi_cross_ref_id INTEGER NOT NULL,
master_customer_id INTEGER NOT NULL,
source_system_code CHAR(15) NOT NULL,
PRIMARY KEY (cmi_cross_ref_id),
FOREIGN KEY (master_customer_id) REFERENCES Customer_Master_Index (master_customer_id)
);
CREATE TABLE Council_Tax (
council_tax_id INTEGER NOT NULL,
cmi_cross_ref_id INTEGER NOT NULL,
PRIMARY KEY (council_tax_id),
FOREIGN KEY (cmi_cross_ref_id) REFERENCES CMI_Cross_References (cmi_cross_ref_id)
);
CREATE TABLE Business_Rates (
business_rates_id INTEGER NOT NULL,
cmi_cross_ref_id INTEGER NOT NULL,
PRIMARY KEY (business_rates_id),
FOREIGN KEY (cmi_cross_ref_id) REFERENCES CMI_Cross_References (cmi_cross_ref_id)
);
CREATE TABLE Benefits_Overpayments (
council_tax_id INTEGER NOT NULL,
cmi_cross_ref_id INTEGER NOT NULL,
PRIMARY KEY (council_tax_id),
FOREIGN KEY (cmi_cross_ref_id) REFERENCES CMI_Cross_References (cmi_cross_ref_id)
);
CREATE TABLE Parking_Fines (
council_tax_id INTEGER NOT NULL,
cmi_cross_ref_id INTEGER NOT NULL,
PRIMARY KEY (council_tax_id),
FOREIGN KEY (cmi_cross_ref_id) REFERENCES CMI_Cross_References (cmi_cross_ref_id)
);
CREATE TABLE Rent_Arrears (
council_tax_id INTEGER NOT NULL,
cmi_cross_ref_id INTEGER NOT NULL,
PRIMARY KEY (council_tax_id),
FOREIGN KEY (cmi_cross_ref_id) REFERENCES CMI_Cross_References (cmi_cross_ref_id)
);
CREATE TABLE Electoral_Register (
electoral_register_id INTEGER NOT NULL,
cmi_cross_ref_id INTEGER NOT NULL,
PRIMARY KEY (electoral_register_id),
FOREIGN KEY (cmi_cross_ref_id) REFERENCES CMI_Cross_References (cmi_cross_ref_id)
);"
machine_repair,"CREATE TABLE repair (
repair_ID int,
name text,
Launch_Date text,
Notes text,
PRIMARY KEY (repair_ID)
);
CREATE TABLE machine (
Machine_ID int,
Making_Year int,
Class text,
Team text,
Machine_series text,
value_points real,
quality_rank int,
PRIMARY KEY (Machine_ID)
);
CREATE TABLE technician (
technician_id real,
Name text,
Team text,
Starting_Year real,
Age int,
PRIMARY Key (technician_id)
);
CREATE TABLE repair_assignment (
technician_id int,
repair_ID int,
Machine_ID int,
PRIMARY Key (technician_id,repair_ID,Machine_ID),
FOREIGN KEY (technician_id) REFERENCES technician(technician_id),
FOREIGN KEY (repair_ID) REFERENCES repair(repair_ID),
FOREIGN KEY (Machine_ID) REFERENCES machine(Machine_ID)
);"
manufactory_1,"CREATE TABLE Manufacturers (
  Code INTEGER,
  Name VARCHAR(255) NOT NULL,
  Headquarter VARCHAR(255) NOT NULL,
  Founder VARCHAR(255) NOT NULL,
  Revenue REAL,
  PRIMARY KEY (Code)   
);
CREATE TABLE Products (
  Code INTEGER,
  Name VARCHAR(255) NOT NULL ,
  Price DECIMAL NOT NULL ,
  Manufacturer INTEGER NOT NULL,
  PRIMARY KEY (Code), 
  FOREIGN KEY (Manufacturer) REFERENCES Manufacturers(Code)
);"
manufacturer,"CREATE TABLE manufacturer (
    Manufacturer_ID int,
    Open_Year real,
    Name text,
    Num_of_Factories int,
    Num_of_Shops int,
    PRIMARY KEY (Manufacturer_ID)
);
CREATE TABLE furniture (
    Furniture_ID int,
    Name text,
    Num_of_Component int,
    Market_Rate real,
    PRIMARY KEY (Furniture_ID)
);
CREATE TABLE furniture_manufacte (
    Manufacturer_ID int,
    Furniture_ID int,
    Price_in_Dollar real,
    PRIMARY KEY (Manufacturer_ID,Furniture_ID),
    FOREIGN KEY (Manufacturer_ID) REFERENCES manufacturer(Manufacturer_ID),
    FOREIGN KEY (Furniture_ID) REFERENCES furniture(Furniture_ID)
);"
match_season,"CREATE TABLE country (
Country_id int,
    Country_name text,
    Capital text,
    Official_native_language text,
    PRIMARY KEY (Country_id)
);
CREATE TABLE team (
Team_id int,
      Name text,
      PRIMARY KEY (Team_id)
);
CREATE TABLE match_season (
Season real,
    Player text,
    Position text,
    Country int,
    Team int,
    Draft_Pick_Number int,
    Draft_Class text,
    College text,
    PRIMARY KEY (Season),
    FOREIGN KEY (Country) REFERENCES country(Country_id),
    FOREIGN KEY (Team) REFERENCES team(Team_id)
);
CREATE TABLE player (
Player_ID int,
    Player text,
    Years_Played text,
    Total_WL text,
    Singles_WL text,
    Doubles_WL text,
    Team int,
    PRIMARY KEY (Player_ID),
    FOREIGN KEY (Team) REFERENCES team(Team_id)
);"
medicine_enzyme_interaction,"CREATE TABLE medicine (
id int,
name text,
Trade_Name text,
FDA_approved text,
primary key (id)
);
CREATE TABLE enzyme (
id int,
name text,
Location text,
Product text,
Chromosome text,
OMIM int,
Porphyria text,
primary key (id)
);
CREATE TABLE medicine_enzyme_interaction (
enzyme_id int,
medicine_id int,
interaction_type text,
primary key (enzyme_id, medicine_id),
foreign key (enzyme_id) references enzyme(id),
foreign key (medicine_id) references medicine(id)
);"
mountain_photos,"CREATE TABLE mountain (
id int,
name text,
Height real,
Prominence real,
Range text,
Country text,
primary key(id)
);
CREATE TABLE camera_lens (
id int,
brand text,
name text,
focal_length_mm real,
max_aperture real,
primary key(id)
);
CREATE TABLE photos (
id int, 
camera_lens_id int,
mountain_id int,
color text, 
name text,
primary key(id),
foreign key(camera_lens_id) references camera_lens(id),
foreign key(mountain_id) references mountain(id)
);"
movie_1,"CREATE TABLE Movie (
 mID int primary key,
 title text,
 year int,
 director text
);
CREATE TABLE Reviewer (
 rID int primary key,
 name text);
CREATE TABLE Rating (
 rID int,
 mID int,
 stars int,
 ratingDate date,
 FOREIGN KEY (mID) references Movie(mID),
 FOREIGN KEY (rID) references Reviewer(rID)
);"
music_1,"CREATE TABLE genre (
 g_name varchar2(20) not null,
 rating varchar2(10),
 most_popular_in varchar2(50),
 primary key(g_name)
);
CREATE TABLE artist (
 artist_name varchar2(50) not null,
 country varchar2(20),
 gender varchar2(20),
 preferred_genre varchar2(50),
 constraint a_name primary key(artist_name),
 foreign key(preferred_genre) references genre(g_name) ON DELETE CASCADE
);
CREATE TABLE files (
 f_id number(10) not null,
 artist_name varchar2(50),
 file_size varchar2(20),
 duration varchar2(20),
 formats varchar2(20),
 primary key(f_id),
 foreign key(artist_name) references artist(artist_name) ON DELETE CASCADE
);
CREATE TABLE song (
 song_name varchar2(50),
 artist_name varchar2(50),
 country varchar2(20),
 f_id number(10),
     genre_is varchar2(20),
 rating number(10) check(rating>0 and rating<11),
 languages varchar2(20),
 releasedate Date, 
 resolution number(10) not null,
 constraint s_name primary key(song_name),
 foreign key(artist_name) references artist(artist_name) ON DELETE CASCADE,
 foreign key(f_id) references files(f_id) ON DELETE CASCADE,
 foreign key(genre_is) references genre(g_name) ON DELETE CASCADE
);"
music_2,"CREATE TABLE Songs (
 SongId INTEGER PRIMARY KEY,
 Title TEXT
);
CREATE TABLE Albums (
 AId INTEGER PRIMARY KEY,
 Title TEXT,
 Year INTEGER,
 Label TEXT,
 Type TEXT );
CREATE TABLE Band (
 Id INTEGER PRIMARY KEY,
 Firstname TEXT,
 Lastname TEXT );
CREATE TABLE Instruments (
 SongId INTEGER,
 BandmateId INTEGER,
 Instrument TEXT,
 PRIMARY KEY(SongId, BandmateId, Instrument),
 FOREIGN KEY (SongId) REFERENCES Songs(SongId),
 FOREIGN KEY (BandmateId) REFERENCES Band(Id)
);
CREATE TABLE Performance ( 
 SongId INTEGER,
 Bandmate INTEGER,
 StagePosition TEXT,
 PRIMARY KEY(SongId, Bandmate),
 FOREIGN KEY (SongId) REFERENCES Songs(SongId),
 FOREIGN KEY (Bandmate) REFERENCES Band(Id)
);
CREATE TABLE Tracklists ( 
 AlbumId INTEGER,
 Position INTEGER,
 SongId INTEGER,
 PRIMARY KEY(AlbumId, Position),
 FOREIGN KEY (SongId) REFERENCES Songs(SongId),
 FOREIGN KEY (AlbumId) REFERENCES Albums(AId)
);
CREATE TABLE Vocals ( 
 SongId INTEGER,
 Bandmate INTEGER,
 Type TEXT,
 PRIMARY KEY(SongId, Bandmate),
 FOREIGN KEY (SongId) REFERENCES Songs(SongId),
 FOREIGN KEY (Bandmate) REFERENCES Band(Id)
);"
music_4,"CREATE TABLE artist (
    Artist_ID int,
    Artist text,
    Age int,
    Famous_Title text,
    Famous_Release_date text,
    PRIMARY KEY (Artist_ID)
);
CREATE TABLE volume (
    Volume_ID int,
    Volume_Issue text,
    Issue_Date text,
    Weeks_on_Top real,
    Song text,
    Artist_ID int,
    PRIMARY KEY (Volume_ID),
    FOREIGN KEY (Artist_ID) REFERENCES artist(Artist_ID)
);
CREATE TABLE music_festival (
    ID int,
    Music_Festival text,
    Date_of_ceremony text,
    Category text,
    Volume int,
    Result text,
    PRIMARY KEY (ID),
    FOREIGN KEY (Volume) REFERENCES volume(Volume_ID)
);"
musical,"CREATE TABLE musical (
Musical_ID int,
Name text,
Year int,
Award text,
Category text,
Nominee text,
Result text,
PRIMARY KEY (Musical_ID)
);
CREATE TABLE actor (
Actor_ID int,
Name text,
Musical_ID int,
Character text,
Duration text,
age int,
PRIMARY KEY (Actor_ID),
FOREIGN KEY (Musical_ID) REFERENCES actor(Actor_ID)
);"
network_2,"CREATE TABLE Person (
  name varchar(20) PRIMARY KEY,
  age INTEGER,
  city TEXT,
  gender TEXT,
  job TEXT
);
CREATE TABLE PersonFriend (
  name varchar(20),
  friend varchar(20),
  year INTEGER,
  FOREIGN KEY (name) REFERENCES Person(name),
  FOREIGN KEY (friend) REFERENCES Person(name)
);"
news_report,"CREATE TABLE event (
    Event_ID int,
    Date text,
    Venue text,
    Name text,
    Event_Attendance int,
    PRIMARY KEY (Event_ID)
);
CREATE TABLE journalist (
    journalist_ID int,
    Name text,
    Nationality text,
    Age text,
    Years_working int,
    PRIMARY KEY (journalist_ID)
);
CREATE TABLE news_report (
    journalist_ID int,
    Event_ID int,
    Work_Type text,
    PRIMARY KEY (journalist_ID,Event_ID),
    FOREIGN KEY (journalist_ID) REFERENCES journalist(journalist_ID),
    FOREIGN KEY (Event_ID) REFERENCES event(Event_ID)
);"
party_host,"CREATE TABLE party (
Party_ID int,
Party_Theme text,
Location text,
First_year text,
Last_year text,
Number_of_hosts int,
PRIMARY KEY (Party_ID)
);
CREATE TABLE host (
Host_ID int,
Name text,
Nationality text,
Age text,
PRIMARY KEY (Host_ID)
);
CREATE TABLE party_host (
Party_ID int,
Host_ID int,
Is_Main_in_Charge bool,
PRIMARY KEY (Party_ID,Host_ID),
FOREIGN KEY (Host_ID) REFERENCES host(Host_ID),
FOREIGN KEY (Party_ID) REFERENCES party(Party_ID)
);"
party_people,"CREATE TABLE region (
Region_ID int,
Region_name text,
Date text,
Label text,
Format text,
Catalogue text,
PRIMARY KEY (Region_ID)
);
CREATE TABLE party (
Party_ID int,
Minister text,
Took_office text,
Left_office text,
Region_ID int,
Party_name text,
PRIMARY KEY (Party_ID),
FOREIGN KEY (Region_ID) REFERENCES region(Region_ID)
);
CREATE TABLE member (
Member_ID int,
Member_Name text,
Party_ID text,
In_office text,
PRIMARY KEY (Member_ID),
FOREIGN KEY (Party_ID) REFERENCES party(Party_ID)
);
CREATE TABLE party_events (
Event_ID int,
Event_Name text,
Party_ID int,
Member_in_charge_ID int,
PRIMARY KEY (Event_ID),
FOREIGN KEY (Party_ID) REFERENCES party(Party_ID),
FOREIGN KEY (Member_in_charge_ID) REFERENCES member(Member_ID)
);"
performance_attendance,"CREATE TABLE member (
    Member_ID text,
    Name text,
    Nationality text,
    Role text,
    PRIMARY KEY (Member_ID)
);
CREATE TABLE performance (
    Performance_ID real,
    Date text,
    Host text,
    Location text,
    Attendance int,
    PRIMARY KEY (Performance_ID)
);
CREATE TABLE member_attendance (
    Member_ID int,
    Performance_ID int,
    Num_of_Pieces int,
    PRIMARY KEY (Member_ID,Performance_ID),
    FOREIGN KEY (Member_ID) REFERENCES member(Member_ID),
    FOREIGN KEY (Performance_ID) REFERENCES performance(Performance_ID)
);"
perpetrator,"CREATE TABLE perpetrator (
Perpetrator_ID int,
People_ID int,
Date text,
Year real,
Location text,
Country text,
Killed int,
Injured int,
PRIMARY KEY (Perpetrator_ID),
FOREIGN KEY (People_ID) REFERENCES people(People_ID)
);
CREATE TABLE people (
People_ID int,
Name text,
Height real,
Weight real,
Home Town text,
PRIMARY KEY (People_ID)
);"
phone_1,"CREATE TABLE chip_model (
Model_name text,
Launch_year real,
RAM_MiB real,
ROM_MiB real,
Slots text,
WiFi text,
Bluetooth text,
PRIMARY KEY (Model_name)
);
CREATE TABLE screen_mode (
Graphics_mode real,
Char_cells text,
Pixels text,
Hardware_colours real,
used_kb real,
map text,
Type text,
PRIMARY KEY (Graphics_mode)
);
CREATE TABLE phone (
Company_name text,
Hardware_Model_name text,
Accreditation_type text,
Accreditation_level text,
Date text,
chip_model text,
screen_mode text,
PRIMARY KEY(Hardware_Model_name),
FOREIGN KEY (screen_mode) REFERENCES screen_mode(Graphics_mode),
FOREIGN KEY (chip_model) REFERENCES chip_model(Model_name)
);"
phone_market,"CREATE TABLE phone (
Name text,
Phone_ID int,
Memory_in_G int,
Carrier text,
Price real,
PRIMARY KEY (Phone_ID)
);
CREATE TABLE market (
Market_ID int,
District text,
Num_of_employees int,
Num_of_shops real,
Ranking int,
PRIMARY KEY (Market_ID)
);
CREATE TABLE phone_market (
Market_ID int,
Phone_ID text,
Num_of_stock int,
PRIMARY KEY (Market_ID,Phone_ID),
FOREIGN KEY (Market_ID) REFERENCES market(Market_ID),
FOREIGN KEY (Phone_ID) REFERENCES phone(Phone_ID)
);"
pilot_record,"CREATE TABLE aircraft (
Aircraft_ID int,
Order_Year int,
Manufacturer text,
Model text,
Fleet_Series text,
Powertrain text,
Fuel_Propulsion text,
PRIMARY KEY (Aircraft_ID)
);
CREATE TABLE pilot (
Pilot_ID int,
Pilot_name text,
Rank int,
Age int,
Nationality text,
Position text,
Join_Year int,
Team text,
PRIMARY KEY (Pilot_ID)
);
CREATE TABLE pilot_record (
Record_ID int,
Pilot_ID int,
Aircraft_ID int,
Date text,
PRIMARY KEY (Pilot_ID, Aircraft_ID, Date),
FOREIGN KEY (Pilot_ID) REFERENCES pilot(Pilot_ID),
FOREIGN KEY (Aircraft_ID) REFERENCES aircraft(Aircraft_ID)
);"
product_catalog,"CREATE TABLE Attribute_Definitions (
attribute_id INTEGER PRIMARY KEY,
attribute_name VARCHAR(30),
attribute_data_type VARCHAR(10)
);
CREATE TABLE Catalogs (
catalog_id INTEGER PRIMARY KEY,
catalog_name VARCHAR(50),
catalog_publisher VARCHAR(80),
date_of_publication DATETIME,
date_of_latest_revision DATETIME
);
CREATE TABLE Catalog_Structure (
catalog_level_number INTEGER PRIMARY KEY,
catalog_id INTEGER NOT NULL,
catalog_level_name VARCHAR(50),
FOREIGN KEY (catalog_id ) REFERENCES Catalogs(catalog_id )
);
CREATE TABLE Catalog_Contents (
catalog_entry_id INTEGER PRIMARY KEY,
catalog_level_number INTEGER NOT NULL,
parent_entry_id INTEGER,
previous_entry_id INTEGER,
next_entry_id INTEGER,
catalog_entry_name VARCHAR(80),
product_stock_number VARCHAR(50),
price_in_dollars DOUBLE NULL,
price_in_euros DOUBLE NULL,
price_in_pounds DOUBLE NULL,
capacity VARCHAR(20),
length VARCHAR(20),
height VARCHAR(20),
width VARCHAR(20),
FOREIGN KEY (catalog_level_number ) REFERENCES Catalog_Structure(catalog_level_number )
);
CREATE TABLE Catalog_Contents_Additional_Attributes (
catalog_entry_id INTEGER NOT NULL,
catalog_level_number INTEGER NOT NULL,
attribute_id INTEGER NOT NULL,
attribute_value VARCHAR(255) NOT NULL,
FOREIGN KEY (catalog_entry_id ) REFERENCES Catalog_Contents(catalog_entry_id ),
FOREIGN KEY (catalog_level_number ) REFERENCES Catalog_Structure(catalog_level_number )
);"
products_for_hire,"CREATE TABLE Discount_Coupons (
coupon_id INTEGER PRIMARY KEY,
date_issued DATETIME,
coupon_amount DECIMAL(19,4)
);
CREATE TABLE Customers (
customer_id INTEGER PRIMARY KEY,
coupon_id INTEGER NOT NULL,
good_or_bad_customer VARCHAR(4),
first_name VARCHAR(80),
last_name VARCHAR(80),
gender_mf VARCHAR(1),
date_became_customer DATETIME,
date_last_hire DATETIME,
FOREIGN KEY (coupon_id ) REFERENCES Discount_Coupons(coupon_id )
);
CREATE TABLE Bookings (
booking_id INTEGER PRIMARY KEY ,
customer_id INTEGER NOT NULL,
booking_status_code VARCHAR(10) NOT NULL,
returned_damaged_yn VARCHAR(40),
booking_start_date DATETIME,
booking_end_date DATETIME,
count_hired VARCHAR(40),
amount_payable DECIMAL(19,4),
amount_of_discount DECIMAL(19,4),
amount_outstanding DECIMAL(19,4),
amount_of_refund DECIMAL(19,4),
FOREIGN KEY (customer_id ) REFERENCES Customers(customer_id )
);
CREATE TABLE Products_for_Hire (
product_id INTEGER PRIMARY KEY,
product_type_code VARCHAR(15) NOT NULL,
daily_hire_cost DECIMAL(19,4),
product_name VARCHAR(80),
product_description VARCHAR(255)
);
CREATE TABLE Payments (
payment_id INTEGER PRIMARY KEY,
booking_id INTEGER,
customer_id INTEGER NOT NULL,
payment_type_code VARCHAR(15) NOT NULL,
amount_paid_in_full_yn VARCHAR(1),
payment_date DATETIME,
amount_due DECIMAL(19,4),
amount_paid DECIMAL(19,4),
FOREIGN KEY (booking_id ) REFERENCES Bookings(booking_id ),
FOREIGN KEY (customer_id ) REFERENCES Customers(customer_id )
);
CREATE TABLE Products_Booked (
booking_id INTEGER NOT NULL,
product_id INTEGER NOT NULL,
returned_yn VARCHAR(1),
returned_late_yn VARCHAR(1),
booked_count INTEGER,
booked_amount FLOAT NULL,
PRIMARY KEY (booking_id, product_id)
FOREIGN KEY (booking_id ) REFERENCES Bookings(booking_id ),
FOREIGN KEY (product_id ) REFERENCES Products_for_Hire(product_id )
);
CREATE TABLE View_Product_Availability (
product_id INTEGER NOT NULL,
booking_id INTEGER NOT NULL,
status_date DATETIME PRIMARY KEY,
available_yn VARCHAR(1),
FOREIGN KEY (booking_id ) REFERENCES Bookings(booking_id ),
FOREIGN KEY (product_id ) REFERENCES Products_for_Hire(product_id )
);"
products_gen_characteristics,"CREATE TABLE Ref_Characteristic_Types (
characteristic_type_code VARCHAR(15) PRIMARY KEY,
characteristic_type_description VARCHAR(80)
);
CREATE TABLE Ref_Colors (
color_code VARCHAR(15) PRIMARY KEY,
color_description VARCHAR(80)
);
CREATE TABLE Ref_Product_Categories (
product_category_code VARCHAR(15) PRIMARY KEY,
product_category_description VARCHAR(80),
unit_of_measure VARCHAR(20)
);
CREATE TABLE Characteristics (
characteristic_id INTEGER PRIMARY KEY,
characteristic_type_code VARCHAR(15) NOT NULL,
characteristic_data_type VARCHAR(10),
characteristic_name VARCHAR(80),
other_characteristic_details VARCHAR(255),
FOREIGN KEY (characteristic_type_code ) REFERENCES Ref_Characteristic_Types(characteristic_type_code )
);
CREATE TABLE Products (
product_id INTEGER PRIMARY KEY,
color_code VARCHAR(15) NOT NULL,
product_category_code VARCHAR(15) NOT NULL,
product_name VARCHAR(80),
typical_buying_price VARCHAR(20),
typical_selling_price VARCHAR(20),
product_description VARCHAR(255),
other_product_details VARCHAR(255),
FOREIGN KEY (product_category_code ) REFERENCES Ref_Product_Categories(product_category_code ),FOREIGN KEY (color_code ) REFERENCES Ref_Colors(color_code )
);
CREATE TABLE Product_Characteristics (
product_id INTEGER NOT NULL,
characteristic_id INTEGER NOT NULL,
product_characteristic_value VARCHAR(50),
FOREIGN KEY (characteristic_id ) REFERENCES Characteristics(characteristic_id ),
FOREIGN KEY (product_id ) REFERENCES Products(product_id )
);"
program_share,"CREATE TABLE program (
Program_ID int,
Name text,
Origin text,
Launch real,
Owner text,
PRIMARY KEY (Program_ID)
);
CREATE TABLE channel (
Channel_ID int,
Name text,
Owner text,
Share_in_percent real,
Rating_in_percent real,
PRIMARY KEY (Channel_ID)
);
CREATE TABLE broadcast (
Channel_ID int,
Program_ID int,
Time_of_day text,
PRIMARY KEY (Channel_ID,Program_ID),
FOREIGN KEY (Channel_ID) REFERENCES channel(Channel_ID),
FOREIGN KEY (Program_ID) REFERENCES program(Program_ID)
);
CREATE TABLE broadcast_share (
Channel_ID int,
Program_ID int,
Date text,
Share_in_percent real,
PRIMARY KEY (Channel_ID,Program_ID),
FOREIGN KEY (Channel_ID) REFERENCES channel(Channel_ID),
FOREIGN KEY (Program_ID) REFERENCES program(Program_ID)
);"
protein_institute,"CREATE TABLE building (
building_id text,
Name text,
Street_address text,
Years_as_tallest text,
Height_feet int,
Floors int,
PRIMARY KEY(building_id)
);
CREATE TABLE Institution (
Institution_id  text,
Institution text,
Location text,
Founded real,
Type text,
Enrollment int,
Team text,
Primary_Conference text,
building_id text,
PRIMARY KEY(Institution_id),
FOREIGN  KEY (building_id) REFERENCES building(building_id)
);
CREATE TABLE protein (
common_name text,
protein_name text,
divergence_from_human_lineage real,
accession_number text,
sequence_length real,
sequence_identity_to_human_protein text,
Institution_id text,
PRIMARY KEY(common_name),
FOREIGN KEY(Institution_id) REFERENCES Institution(Institution_id)
);"
race_track,"CREATE TABLE race (
Race_ID int,
Name text,
Class text,
Date text,
Track_ID text,
PRIMARY KEY (Race_ID),
FOREIGN KEY (Track_ID) REFERENCES track(Track_ID)
);
CREATE TABLE track (
Track_ID int,
Name text,
Location text,
Seating real,
Year_Opened real,
PRIMARY KEY (Track_ID)
);"
railway,"CREATE TABLE railway (
Railway_ID int,
Railway text,
Builder text,
Built text,
Wheels text,
Location text,
ObjectNumber text,
PRIMARY KEY (Railway_ID)
);
CREATE TABLE train (
Train_ID int,
Train_Num text,
Name text,
From text,
Arrival text,
Railway_ID int,
PRIMARY KEY (Train_ID),
FOREIGN KEY (Railway_ID) REFERENCES railway(Railway_ID)
);
CREATE TABLE manager (
Manager_ID int,
Name text,
Country text,
Working_year_starts text,
Age int,
Level int,
PRIMARY KEY (Manager_ID)
);
CREATE TABLE railway_manage (
Railway_ID int,
Manager_ID int,
From_Year text,
PRIMARY KEY (Railway_ID,Manager_ID),
FOREIGN KEY (Manager_ID) REFERENCES manager(Manager_ID),
FOREIGN KEY (Railway_ID) REFERENCES railway(Railway_ID)
);"
restaurant_1,"CREATE TABLE Student (
        StuID        INTEGER PRIMARY KEY,
        LName        VARCHAR(12),
        Fname        VARCHAR(12),
        Age      INTEGER,
        Sex      VARCHAR(1),
        Major        INTEGER,
        Advisor      INTEGER,
        city_code    VARCHAR(3)
 );
CREATE TABLE Restaurant (
       ResID       INTEGER PRIMARY KEY,
       ResName     VARCHAR(100),
       Address     VARCHAR(100),
       Rating INTEGER
);
CREATE TABLE Type_Of_Restaurant (
       ResID       INTEGER,
       ResTypeID   INTEGER,
       FOREIGN KEY(ResID) REFERENCES Restaurant(ResID),
       FOREIGN KEY(ResTypeID) REFERENCES Restaurant_Type(ResTypeID)
);
CREATE TABLE Restaurant_Type (
       ResTypeID            INTEGER PRIMARY KEY,
       ResTypeName          VARCHAR(40),
       ResTypeDescription   VARCHAR(100)
);
CREATE TABLE Visits_Restaurant (
       StuID      INTEGER,
       ResID      INTEGER,
       Time       TIMESTAMP,
       Spent      FLOAT,
       FOREIGN KEY(StuID) REFERENCES Student(StuID),
       FOREIGN KEY(ResID) REFERENCES Restaurant(ResID)
);"
riding_club,"CREATE TABLE player (
Player_ID int,
Sponsor_name text,
Player_name text,
Gender text,
Residence text,
Occupation text,
Votes int,
Rank text,
PRIMARY KEY (Player_ID)
);
CREATE TABLE club (
Club_ID int,
Club_name text,
Region text,
Start_year int,
PRIMARY KEY (Club_ID)
);
CREATE TABLE coach (
Coach_ID int,
Coach_name text,
Gender text,
Club_ID int,
Rank int,
PRIMARY KEY (Coach_ID),
FOREIGN KEY (Club_ID) REFERENCES club(Club_ID)
);
CREATE TABLE player_coach (
Player_ID int,
Coach_ID int,
Starting_year int,
PRIMARY KEY (Player_ID,Coach_ID),
FOREIGN KEY (Player_ID) REFERENCES player(Player_ID),
FOREIGN KEY (Coach_ID) REFERENCES coach(Coach_ID)
);
CREATE TABLE match_result (
Rank int,
Club_ID int,
Gold int,
Big_Silver int,
Small_Silver int,
Bronze int,
Points int,
PRIMARY KEY (Rank,Club_ID),
FOREIGN KEY (Club_ID) REFERENCES club(Club_ID)
);"
roller_coaster,"CREATE TABLE roller_coaster (
Roller_Coaster_ID int,
Name text,
Park text,
Country_ID int,
Length real,
Height real,
Speed text,
Opened text,
Status text,
PRIMARY KEY (Roller_Coaster_ID),
FOREIGN KEY (Country_ID) REFERENCES country(Country_ID)
);
CREATE TABLE country (
Country_ID int,
Name text,
Population int,
Area int,
Languages text,
PRIMARY KEY (Country_ID)
);"
sakila_1,"CREATE TABLE actor (
  actor_id SMALLINT UNSIGNED NOT NULL,
  first_name VARCHAR(45) NOT NULL,
  last_name VARCHAR(45) NOT NULL,
  last_update TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY  (actor_id)
);
CREATE TABLE address (
  address_id SMALLINT UNSIGNED NOT NULL,
  address VARCHAR(50) NOT NULL,
  address2 VARCHAR(50) DEFAULT NULL,
  district VARCHAR(20) NOT NULL,
  city_id SMALLINT UNSIGNED NOT NULL,
  postal_code VARCHAR(10) DEFAULT NULL,
  phone VARCHAR(20) NOT NULL,
  last_update TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY  (address_id),
  FOREIGN KEY (city_id) REFERENCES city (city_id)
);
CREATE TABLE category (
  category_id TINYINT UNSIGNED NOT NULL,
  name VARCHAR(25) NOT NULL,
  last_update TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY  (category_id)
);
CREATE TABLE city (
  city_id SMALLINT UNSIGNED NOT NULL,
  city VARCHAR(50) NOT NULL,
  country_id SMALLINT UNSIGNED NOT NULL,
  last_update TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY  (city_id),
  FOREIGN KEY (country_id) REFERENCES country (country_id)
);
CREATE TABLE country (
  country_id SMALLINT UNSIGNED NOT NULL,
  country VARCHAR(50) NOT NULL,
  last_update TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY  (country_id)
);
CREATE TABLE customer (
  customer_id SMALLINT UNSIGNED NOT NULL,
  store_id TINYINT UNSIGNED NOT NULL,
  first_name VARCHAR(45) NOT NULL,
  last_name VARCHAR(45) NOT NULL,
  email VARCHAR(50) DEFAULT NULL,
  address_id SMALLINT UNSIGNED NOT NULL,
  active BOOLEAN NOT NULL DEFAULT TRUE,
  create_date DATETIME NOT NULL,
  last_update TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY  (customer_id),
  FOREIGN KEY (address_id) REFERENCES address (address_id),
  FOREIGN KEY (store_id) REFERENCES store (store_id)
);
CREATE TABLE film (
  film_id SMALLINT UNSIGNED NOT NULL,
  title VARCHAR(255) NOT NULL,
  description TEXT DEFAULT NULL,
  release_year YEAR DEFAULT NULL,
  language_id TINYINT UNSIGNED NOT NULL,
  original_language_id TINYINT UNSIGNED DEFAULT NULL,
  rental_duration TINYINT UNSIGNED NOT NULL DEFAULT 3,
  rental_rate DECIMAL(4,2) NOT NULL DEFAULT 4.99,
  length SMALLINT UNSIGNED DEFAULT NULL,
  replacement_cost DECIMAL(5,2) NOT NULL DEFAULT 19.99,
  rating DEFAULT 'G',
  special_features DEFAULT NULL,
  last_update TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY  (film_id),
  FOREIGN KEY (language_id) REFERENCES language (language_id),
  FOREIGN KEY (original_language_id) REFERENCES language (language_id)
);
CREATE TABLE film_actor (
  actor_id SMALLINT UNSIGNED NOT NULL,
  film_id SMALLINT UNSIGNED NOT NULL,
  last_update TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY  (actor_id,film_id),
 FOREIGN KEY (actor_id) REFERENCES actor (actor_id),
  FOREIGN KEY (film_id) REFERENCES film (film_id)
);
CREATE TABLE film_category (
  film_id SMALLINT UNSIGNED NOT NULL,
  category_id TINYINT UNSIGNED NOT NULL,
  last_update TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (film_id, category_id),
  FOREIGN KEY (film_id) REFERENCES film (film_id),
  FOREIGN KEY (category_id) REFERENCES category (category_id)
);
CREATE TABLE film_text (
  film_id SMALLINT NOT NULL,
  title VARCHAR(255) NOT NULL,
  description TEXT,
  PRIMARY KEY  (film_id)
);
CREATE TABLE inventory (
  inventory_id MEDIUMINT UNSIGNED NOT NULL,
  film_id SMALLINT UNSIGNED NOT NULL,
  store_id TINYINT UNSIGNED NOT NULL,
  last_update TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY  (inventory_id),
  FOREIGN KEY (store_id) REFERENCES store (store_id),
  FOREIGN KEY (film_id) REFERENCES film (film_id)
);
CREATE TABLE language (
  language_id TINYINT UNSIGNED NOT NULL,
  name CHAR(20) NOT NULL,
  last_update TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (language_id)
);
CREATE TABLE payment (
  payment_id SMALLINT UNSIGNED NOT NULL,
  customer_id SMALLINT UNSIGNED NOT NULL,
  staff_id TINYINT UNSIGNED NOT NULL,
  rental_id INT DEFAULT NULL,
  amount DECIMAL(5,2) NOT NULL,
  payment_date DATETIME NOT NULL,
  last_update TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY  (payment_id),
  FOREIGN KEY (rental_id) REFERENCES rental (rental_id),
  FOREIGN KEY (customer_id) REFERENCES customer (customer_id),
  FOREIGN KEY (staff_id) REFERENCES staff (staff_id)
);
CREATE TABLE rental (
  rental_id INT NOT NULL,
  rental_date DATETIME NOT NULL,
  inventory_id MEDIUMINT UNSIGNED NOT NULL,
  customer_id SMALLINT UNSIGNED NOT NULL,
  return_date DATETIME DEFAULT NULL,
  staff_id TINYINT UNSIGNED NOT NULL,
  last_update TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (rental_id),
  FOREIGN KEY (staff_id) REFERENCES staff (staff_id),
  FOREIGN KEY (inventory_id) REFERENCES inventory (inventory_id),
  FOREIGN KEY (customer_id) REFERENCES customer (customer_id)
);
CREATE TABLE staff (
  staff_id TINYINT UNSIGNED NOT NULL,
  first_name VARCHAR(45) NOT NULL,
  last_name VARCHAR(45) NOT NULL,
  address_id SMALLINT UNSIGNED NOT NULL,
  picture BLOB DEFAULT NULL,
  email VARCHAR(50) DEFAULT NULL,
  store_id TINYINT UNSIGNED NOT NULL,
  active BOOLEAN NOT NULL DEFAULT TRUE,
  username VARCHAR(16) NOT NULL,
  password VARCHAR(40) DEFAULT NULL,
  last_update TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY  (staff_id),
  FOREIGN KEY (store_id) REFERENCES store (store_id),
  FOREIGN KEY (address_id) REFERENCES address (address_id)
);
CREATE TABLE store (
  store_id TINYINT UNSIGNED NOT NULL,
  manager_staff_id TINYINT UNSIGNED NOT NULL,
  address_id SMALLINT UNSIGNED NOT NULL,
  last_update TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY  (store_id),
  FOREIGN KEY (manager_staff_id) REFERENCES staff (staff_id),
  FOREIGN KEY (address_id) REFERENCES address (address_id)
);"
school_bus,"CREATE TABLE driver (
Driver_ID int,
Name text,
Party text,
Home_city text,
Age int,
PRIMARY KEY (Driver_ID)
);
CREATE TABLE school (
School_ID int,
Grade text,
School text,
Location text,
Type text,
PRIMARY KEY (School_ID)
);
CREATE TABLE school_bus (
School_ID int,
Driver_ID int,
Years_Working int,
If_full_time bool,
PRIMARY KEY (School_ID,Driver_ID),
FOREIGN KEY (School_ID) REFERENCES school(School_ID),
FOREIGN KEY (Driver_ID) REFERENCES driver(Driver_ID)
);"
school_finance,"CREATE TABLE School (
School_id text,
School_name text,
Location text,
Mascot text,
Enrollment int,
IHSAA_Class text,
IHSAA_Football_Class text,
County text,
PRIMARY KEY (School_id)
);
CREATE TABLE budget (
School_id int,
Year int,
Budgeted int,
total_budget_percent_budgeted real,
Invested int,
total_budget_percent_invested real,
Budget_invested_percent text,
PRIMARY KEY(School_id,YEAR),
FOREIGN KEY(School_id) REFERENCES School(School_id)
);
CREATE TABLE endowment (
endowment_id int,
School_id int,
donator_name text,
amount real,
PRIMARY KEY(endowment_id),
FOREIGN KEY(School_id) REFERENCES School(School_id)
);"
school_player,"CREATE TABLE school (
School_ID int,
School text,
Location text,
Enrollment real,
Founded real,
Denomination text,
Boys_or_Girls text,
Day_or_Boarding text,
Year_Entered_Competition real,
School_Colors text,
PRIMARY KEY (School_Id)
);
CREATE TABLE school_details (
School_ID int,
Nickname text,
Colors text,
League text,
Class text,
Division text,
PRIMARY KEY (School_Id),
FOREIGN KEY (School_ID) REFERENCES school(School_ID)
);
CREATE TABLE school_performance (
School_Id int,
School_Year text,
Class_A text,
Class_AA text,
PRIMARY KEY (School_Id,School_Year),
FOREIGN KEY (School_ID) REFERENCES school(School_ID)
);
CREATE TABLE player (
Player_ID int,
Player text,
Team text,
Age int,
Position text,
School_ID int,
PRIMARY KEY (Player_ID),
FOREIGN KEY (School_ID) REFERENCES school(School_ID)
);"
scientist_1,"CREATE TABLE Scientists (
  SSN int,
  Name Char(30) not null,
  Primary Key (SSN)
);
CREATE TABLE Projects (
  Code Char(4),
  Name Char(50) not null,
  Hours int,
  Primary Key (Code)
);
CREATE TABLE AssignedTo (
  Scientist int not null,
  Project char(4) not null,
  Primary Key (Scientist, Project),
  Foreign Key (Scientist) references Scientists (SSN),
  Foreign Key (Project) references Projects (Code)
);"
ship_1,"CREATE TABLE captain (
Captain_ID int,
Name text,
Ship_ID int,
age text,
Class text,
Rank text,
PRIMARY KEY (Captain_ID),
FOREIGN KEY (Ship_ID) REFERENCES Ship(Ship_ID)
);
CREATE TABLE Ship (
Ship_ID int,
Name text,
Type text,
Built_Year real,
Class text,
Flag text,
PRIMARY KEY (Ship_ID)
);"
ship_mission,"CREATE TABLE mission (
Mission_ID int,
Ship_ID int,
Code text,
Launched_Year int,
Location text,
Speed_knots int,
Fate text,
PRIMARY KEY (Mission_ID),
FOREIGN KEY (Ship_ID) REFERENCES ship(Ship_ID)
);
CREATE TABLE ship (
Ship_ID int,
Name text,
Type text,
Nationality text,
Tonnage int,
PRIMARY KEY (Ship_ID)
);"
shop_membership,"CREATE TABLE member (
Member_ID int,
Card_Number text,
Name text,
Hometown text,
Level int,
PRIMARY KEY (Member_ID)
);
CREATE TABLE branch (
Branch_ID int,
Name text,
Open_year text,
Address_road text,
City text,
membership_amount text,
PRIMARY KEY (Branch_ID)
);
CREATE TABLE membership_register_branch (
Member_ID int,
Branch_ID text,
Register_Year text,
PRIMARY KEY (Member_ID),
FOREIGN KEY (Member_ID) REFERENCES member(Member_ID),
FOREIGN KEY (Branch_ID) REFERENCES branch(Branch_ID)
);
CREATE TABLE purchase (
Member_ID int,
Branch_ID text,
Year text,
Total_pounds real,
PRIMARY KEY (Member_ID,Branch_ID,Year),
FOREIGN KEY (Member_ID) REFERENCES member(Member_ID),
FOREIGN KEY (Branch_ID) REFERENCES branch(Branch_ID)
);"
small_bank_1,"CREATE TABLE ACCOUNTS (
    custid      BIGINT      NOT NULL PRIMARY KEY,
    name        VARCHAR(64) NOT NULL
);
CREATE TABLE CHECKING (
    custid      BIGINT      NOT NULL PRIMARY KEY,
    balance        FLOAT       NOT NULL,
    FOREIGN KEY (custid) REFERENCES ACCOUNTS (custid)
);
CREATE TABLE SAVINGS (
    custid      BIGINT      NOT NULL PRIMARY KEY,
    balance        FLOAT       NOT NULL,
    FOREIGN KEY (custid) REFERENCES ACCOUNTS (custid)
);"
soccer_1,"CREATE TABLE Player_Attributes (
 id INTEGER PRIMARY KEY AUTOINCREMENT,
 player_fifa_api_id INTEGER,
 player_api_id INTEGER,
 date TEXT,
 overall_rating INTEGER,
 potential INTEGER,
 preferred_foot TEXT,
 attacking_work_rate TEXT,
 defensive_work_rate TEXT,
 crossing INTEGER,
 finishing INTEGER,
 heading_accuracy INTEGER,
 short_passing INTEGER,
 volleys INTEGER,
 dribbling INTEGER,
 curve INTEGER,
 free_kick_accuracy INTEGER,
 long_passing INTEGER,
 ball_control INTEGER,
 acceleration INTEGER,
 sprint_speed INTEGER,
 agility INTEGER,
 reactions INTEGER,
 balance INTEGER,
 shot_power INTEGER,
 jumping INTEGER,
 stamina INTEGER,
 strength INTEGER,
 long_shots INTEGER,
 aggression INTEGER,
 interceptions INTEGER,
 positioning INTEGER,
 vision INTEGER,
 penalties INTEGER,
 marking INTEGER,
 standing_tackle INTEGER,
 sliding_tackle INTEGER,
 gk_diving INTEGER,
 gk_handling INTEGER,
 gk_kicking INTEGER,
 gk_positioning INTEGER,
 gk_reflexes INTEGER,
 FOREIGN KEY(player_fifa_api_id) REFERENCES Player(player_fifa_api_id),
 FOREIGN KEY(player_api_id) REFERENCES Player(player_api_id)
);
CREATE TABLE Player (
 id INTEGER PRIMARY KEY AUTOINCREMENT,
 player_api_id INTEGER UNIQUE,
 player_name TEXT,
 player_fifa_api_id INTEGER UNIQUE,
 birthday TEXT,
 height INTEGER,
 weight INTEGER
);
CREATE TABLE Match (
 id INTEGER PRIMARY KEY AUTOINCREMENT,
 country_id INTEGER,
 league_id INTEGER,
 season TEXT,
 stage INTEGER,
 date TEXT,
 match_api_id INTEGER UNIQUE,
 home_team_api_id INTEGER,
 away_team_api_id INTEGER,
 home_team_goal INTEGER,
 away_team_goal INTEGER,
 home_player_X1 INTEGER,
 home_player_X2 INTEGER,
 home_player_X3 INTEGER,
 home_player_X4 INTEGER,
 home_player_X5 INTEGER,
 home_player_X6 INTEGER,
 home_player_X7 INTEGER,
 home_player_X8 INTEGER,
 home_player_X9 INTEGER,
 home_player_X10 INTEGER,
 home_player_X11 INTEGER,
 away_player_X1 INTEGER,
 away_player_X2 INTEGER,
 away_player_X3 INTEGER,
 away_player_X4 INTEGER,
 away_player_X5 INTEGER,
 away_player_X6 INTEGER,
 away_player_X7 INTEGER,
 away_player_X8 INTEGER,
 away_player_X9 INTEGER,
 away_player_X10 INTEGER,
 away_player_X11 INTEGER,
 home_player_Y1 INTEGER,
 home_player_Y2 INTEGER,
 home_player_Y3 INTEGER,
 home_player_Y4 INTEGER,
 home_player_Y5 INTEGER,
 home_player_Y6 INTEGER,
 home_player_Y7 INTEGER,
 home_player_Y8 INTEGER,
 home_player_Y9 INTEGER,
 home_player_Y10 INTEGER,
 home_player_Y11 INTEGER,
 away_player_Y1 INTEGER,
 away_player_Y2 INTEGER,
 away_player_Y3 INTEGER,
 away_player_Y4 INTEGER,
 away_player_Y5 INTEGER,
 away_player_Y6 INTEGER,
 away_player_Y7 INTEGER,
 away_player_Y8 INTEGER,
 away_player_Y9 INTEGER,
 away_player_Y10 INTEGER,
 away_player_Y11 INTEGER,
 home_player_1 INTEGER,
 home_player_2 INTEGER,
 home_player_3 INTEGER,
 home_player_4 INTEGER,
 home_player_5 INTEGER,
 home_player_6 INTEGER,
 home_player_7 INTEGER,
 home_player_8 INTEGER,
 home_player_9 INTEGER,
 home_player_10 INTEGER,
 home_player_11 INTEGER,
 away_player_1 INTEGER,
 away_player_2 INTEGER,
 away_player_3 INTEGER,
 away_player_4 INTEGER,
 away_player_5 INTEGER,
 away_player_6 INTEGER,
 away_player_7 INTEGER,
 away_player_8 INTEGER,
 away_player_9 INTEGER,
 away_player_10 INTEGER,
 away_player_11 INTEGER,
 goal TEXT,
 shoton TEXT,
 shotoff TEXT,
 foulcommit TEXT,
 card TEXT,
 cross TEXT,
 corner TEXT,
 possession TEXT,
 B365H NUMERIC,
 B365D NUMERIC,
 B365A NUMERIC,
 BWH NUMERIC,
 BWD NUMERIC,
 BWA NUMERIC,
 IWH NUMERIC,
 IWD NUMERIC,
 IWA NUMERIC,
 LBH NUMERIC,
 LBD NUMERIC,
 LBA NUMERIC,
 PSH NUMERIC,
 PSD NUMERIC,
 PSA NUMERIC,
 WHH NUMERIC,
 WHD NUMERIC,
 WHA NUMERIC,
 SJH NUMERIC,
 SJD NUMERIC,
 SJA NUMERIC,
 VCH NUMERIC,
 VCD NUMERIC,
 VCA NUMERIC,
 GBH NUMERIC,
 GBD NUMERIC,
 GBA NUMERIC,
 BSH NUMERIC,
 BSD NUMERIC,
 BSA NUMERIC,
 FOREIGN KEY(country_id) REFERENCES Country(id),
 FOREIGN KEY(league_id) REFERENCES League(id),
 FOREIGN KEY(home_team_api_id) REFERENCES Team(team_api_id),
 FOREIGN KEY(away_team_api_id) REFERENCES Team(team_api_id),
 FOREIGN KEY(home_player_1) REFERENCES Player(player_api_id),
 FOREIGN KEY(home_player_2) REFERENCES Player(player_api_id),
 FOREIGN KEY(home_player_3) REFERENCES Player(player_api_id),
 FOREIGN KEY(home_player_4) REFERENCES Player(player_api_id),
 FOREIGN KEY(home_player_5) REFERENCES Player(player_api_id),
 FOREIGN KEY(home_player_6) REFERENCES Player(player_api_id),
 FOREIGN KEY(home_player_7) REFERENCES Player(player_api_id),
 FOREIGN KEY(home_player_8) REFERENCES Player(player_api_id),
 FOREIGN KEY(home_player_9) REFERENCES Player(player_api_id),
 FOREIGN KEY(home_player_10) REFERENCES Player(player_api_id),
 FOREIGN KEY(home_player_11) REFERENCES Player(player_api_id),
 FOREIGN KEY(away_player_1) REFERENCES Player(player_api_id),
 FOREIGN KEY(away_player_2) REFERENCES Player(player_api_id),
 FOREIGN KEY(away_player_3) REFERENCES Player(player_api_id),
 FOREIGN KEY(away_player_4) REFERENCES Player(player_api_id),
 FOREIGN KEY(away_player_5) REFERENCES Player(player_api_id),
 FOREIGN KEY(away_player_6) REFERENCES Player(player_api_id),
 FOREIGN KEY(away_player_7) REFERENCES Player(player_api_id),
 FOREIGN KEY(away_player_8) REFERENCES Player(player_api_id),
 FOREIGN KEY(away_player_9) REFERENCES Player(player_api_id),
 FOREIGN KEY(away_player_10) REFERENCES Player(player_api_id),
 FOREIGN KEY(away_player_11) REFERENCES Player(player_api_id)
);
CREATE TABLE League (
 id INTEGER PRIMARY KEY AUTOINCREMENT,
 country_id INTEGER,
 name TEXT UNIQUE,
 FOREIGN KEY(country_id) REFERENCES Country(id)
);
CREATE TABLE Country (
 id INTEGER PRIMARY KEY AUTOINCREMENT,
 name TEXT UNIQUE
);
CREATE TABLE Team (
 id INTEGER PRIMARY KEY AUTOINCREMENT,
 team_api_id INTEGER UNIQUE,
 team_fifa_api_id INTEGER,
 team_long_name TEXT,
 team_short_name TEXT
);
CREATE TABLE Team_Attributes (
 id INTEGER PRIMARY KEY AUTOINCREMENT,
 team_fifa_api_id INTEGER,
 team_api_id INTEGER,
 date TEXT,
 buildUpPlaySpeed INTEGER,
 buildUpPlaySpeedClass TEXT,
 buildUpPlayDribbling INTEGER,
 buildUpPlayDribblingClass TEXT,
 buildUpPlayPassing INTEGER,
 buildUpPlayPassingClass TEXT,
 buildUpPlayPositioningClass TEXT,
 chanceCreationPassing INTEGER,
 chanceCreationPassingClass TEXT,
 chanceCreationCrossing INTEGER,
 chanceCreationCrossingClass TEXT,
 chanceCreationShooting INTEGER,
 chanceCreationShootingClass TEXT,
 chanceCreationPositioningClass TEXT,
 defencePressure INTEGER,
 defencePressureClass TEXT,
 defenceAggression INTEGER,
 defenceAggressionClass TEXT,
 defenceTeamWidth INTEGER,
 defenceTeamWidthClass TEXT,
 defenceDefenderLineClass TEXT,
 FOREIGN KEY(team_fifa_api_id) REFERENCES Team(team_fifa_api_id),
 FOREIGN KEY(team_api_id) REFERENCES Team(team_api_id)
);"
soccer_2,"CREATE TABLE College (
 cName    varchar(20) NOT NULL,
    state    varchar(2),
    enr      numeric(5,0),
    PRIMARY KEY (cName)
  );
CREATE TABLE Player (
pID   numeric(5,0) NOT NULL,
   pName    varchar(20),
    yCard    varchar(3),
    HS       numeric(5,0),
    PRIMARY KEY (pID)
  );
CREATE TABLE Tryout (
pID   numeric(5,0),
   cName    varchar(20),
    pPos     varchar(8),
    decision    varchar(3),
    PRIMARY KEY (pID, cName),
    FOREIGN KEY (pID) REFERENCES Player(pID),
    FOREIGN KEY (cName) REFERENCES College(cName)
  );"
solvency_ii,"CREATE TABLE Addresses (
Address_ID INTEGER NOT NULL ,
address_details VARCHAR(255),
PRIMARY KEY (Address_ID),
UNIQUE (Address_ID)
);
CREATE TABLE Locations (
Location_ID INTEGER NOT NULL ,
Other_Details VARCHAR(255),
PRIMARY KEY (Location_ID)
);
CREATE TABLE Products (
Product_ID INTEGER NOT NULL,
Product_Type_Code CHAR(15),
Product_Name VARCHAR(255),
Product_Price DECIMAL(20,4),
PRIMARY KEY (Product_ID),
UNIQUE (Product_ID)
);
CREATE TABLE Parties (
Party_ID INTEGER NOT NULL,
Party_Details VARCHAR(255),
PRIMARY KEY (Party_ID)
);
CREATE TABLE Assets (
Asset_ID INTEGER NOT NULL ,
Other_Details VARCHAR(255),
PRIMARY KEY (Asset_ID)
);
CREATE TABLE Channels (
Channel_ID INTEGER NOT NULL ,
Other_Details VARCHAR(255),
PRIMARY KEY (Channel_ID)
);
CREATE TABLE Finances (
Finance_ID INTEGER NOT NULL ,
Other_Details VARCHAR(255),
PRIMARY KEY (Finance_ID)
);
CREATE TABLE Events (
Event_ID INTEGER NOT NULL ,
Address_ID INTEGER,
Channel_ID INTEGER NOT NULL,
Event_Type_Code CHAR(15),
Finance_ID INTEGER NOT NULL,
Location_ID INTEGER NOT NULL,
PRIMARY KEY (Event_ID),
UNIQUE (Event_ID),
FOREIGN KEY (Location_ID) REFERENCES Locations (Location_ID),
FOREIGN KEY (Address_ID) REFERENCES Addresses (Address_ID),
FOREIGN KEY (Finance_ID) REFERENCES Finances (Finance_ID)
);
CREATE TABLE Products_in_Events (
Product_in_Event_ID INTEGER NOT NULL,
Event_ID INTEGER NOT NULL,
Product_ID INTEGER NOT NULL,
PRIMARY KEY (Product_in_Event_ID),
FOREIGN KEY (Event_ID) REFERENCES Events (Event_ID),
FOREIGN KEY (Product_ID) REFERENCES Products (Product_ID)
);
CREATE TABLE Parties_in_Events (
Party_ID INTEGER NOT NULL,
Event_ID INTEGER NOT NULL,
Role_Code CHAR(15),
PRIMARY KEY (Party_ID, Event_ID),
FOREIGN KEY (Party_ID) REFERENCES Parties (Party_ID),
FOREIGN KEY (Event_ID) REFERENCES Events (Event_ID)
);
CREATE TABLE Agreements (
Document_ID INTEGER NOT NULL ,
Event_ID INTEGER NOT NULL,
PRIMARY KEY (Document_ID),
FOREIGN KEY (Event_ID) REFERENCES Events (Event_ID)
);
CREATE TABLE Assets_in_Events (
Asset_ID INTEGER NOT NULL,
Event_ID INTEGER NOT NULL,
PRIMARY KEY (Asset_ID, Event_ID),
FOREIGN KEY (Event_ID) REFERENCES Events (Event_ID),
FOREIGN KEY (Event_ID) REFERENCES Events (Event_ID)
);"
sports_competition,"CREATE TABLE club (
Club_ID int,
name text,
Region text,
Start_year text,
PRIMARY KEY (Club_ID)
);
CREATE TABLE club_rank (
Rank real,
Club_ID int,
Gold real,
Silver real,
Bronze real,
Total real,
PRIMARY KEY (Rank,Club_ID)
FOREIGN KEY (Club_ID) REFERENCES club(Club_ID)
);
CREATE TABLE player (
Player_ID int,
name text,
Position text,
Club_ID int,
Apps real,
Tries real,
Goals text,
Points real,
PRIMARY KEY (Player_ID),
FOREIGN KEY (Club_ID) REFERENCES club(Club_ID)
);
CREATE TABLE competition (
Competition_ID int,
Year real,
Competition_type text,
Country text,
PRIMARY KEY (Competition_ID)
);
CREATE TABLE competition_result (
Competition_ID int,
Club_ID_1 int,
Club_ID_2 int,
Score text,
PRIMARY KEY (Competition_ID,Club_ID_1,Club_ID_2),
FOREIGN KEY (Club_ID_1) REFERENCES club(Club_ID),
FOREIGN KEY (Club_ID_2) REFERENCES club(Club_ID),
FOREIGN KEY (Competition_ID) REFERENCES competition(Competition_ID)
);"
station_weather,"CREATE TABLE train (
    id int,
    train_number int,
    name text,
    origin text,
    destination text,
    time text,
    interval text,
    primary key (id)
);
CREATE TABLE station (
    id int,
    network_name text,
    services text,
    local_authority text,
    primary key (id)
);
CREATE TABLE route (
    train_id int,
    station_id int,
    primary key (train_id, station_id),
    foreign key (train_id) references train(id),
    foreign key (station_id) references station(id)
);
CREATE TABLE weekly_weather (
    station_id int,
    day_of_week text,
    high_temperature int,
    low_temperature int,
    precipitation real,
    wind_speed_mph int,
    primary key (station_id, day_of_week),
    foreign key (station_id) references station(id)
);"
store_1,"CREATE TABLE artists (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    name VARCHAR(120)
);
CREATE TABLE albums (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    title VARCHAR(160)  NOT NULL,
    artist_id INTEGER  NOT NULL,
    FOREIGN KEY (artist_id) REFERENCES artists (id)
    ON DELETE NO ACTION ON UPDATE NO ACTION
);
CREATE TABLE employees (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    last_name VARCHAR(20)  NOT NULL,
    first_name VARCHAR(20)  NOT NULL,
    title VARCHAR(30),
    reports_to INTEGER,
    birth_date TIMESTAMP,
    hire_date TIMESTAMP,
    address VARCHAR(70),
    city VARCHAR(40),
    state VARCHAR(40),
    country VARCHAR(40),
    postal_code VARCHAR(10),
    phone VARCHAR(24),
    fax VARCHAR(24),
    email VARCHAR(60),
    FOREIGN KEY (reports_to) REFERENCES employees (id)
    ON DELETE NO ACTION ON UPDATE NO ACTION
);
CREATE TABLE customers (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    first_name VARCHAR(40)  NOT NULL,
    last_name VARCHAR(20)  NOT NULL,
    company VARCHAR(80),
    address VARCHAR(70),
    city VARCHAR(40),
    state VARCHAR(40),
    country VARCHAR(40),
    postal_code VARCHAR(10),
    phone VARCHAR(24),
    fax VARCHAR(24),
    email VARCHAR(60)  NOT NULL,
    support_rep_id INTEGER,
    FOREIGN KEY (support_rep_id) REFERENCES employees (id)
    ON DELETE NO ACTION ON UPDATE NO ACTION
);
CREATE TABLE genres (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    name VARCHAR(120)
);
CREATE TABLE invoices (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    customer_id INTEGER  NOT NULL,
    invoice_date TIMESTAMP  NOT NULL,
    billing_address VARCHAR(70),
    billing_city VARCHAR(40),
    billing_state VARCHAR(40),
    billing_country VARCHAR(40),
    billing_postal_code VARCHAR(10),
    total NUMERIC(10,2)  NOT NULL,
    FOREIGN KEY (customer_id) REFERENCES customers (id)
    ON DELETE NO ACTION ON UPDATE NO ACTION
);
CREATE TABLE media_types (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    name VARCHAR(120)
);
CREATE TABLE tracks (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    name VARCHAR(200)  NOT NULL,
    album_id INTEGER,
    media_type_id INTEGER  NOT NULL,
    genre_id INTEGER,
    composer VARCHAR(220),
    milliseconds INTEGER  NOT NULL,
    bytes INTEGER,
    unit_price NUMERIC(10,2)  NOT NULL,
    FOREIGN KEY (album_id) REFERENCES albums (id)
    ON DELETE NO ACTION ON UPDATE NO ACTION,
    FOREIGN KEY (genre_id) REFERENCES genres (id)
    ON DELETE NO ACTION ON UPDATE NO ACTION,
    FOREIGN KEY (media_type_id) REFERENCES media_types (id)
    ON DELETE NO ACTION ON UPDATE NO ACTION
);
CREATE TABLE invoice_lines (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    invoice_id INTEGER  NOT NULL,
    track_id INTEGER  NOT NULL,
    unit_price NUMERIC(10,2)  NOT NULL,
    quantity INTEGER  NOT NULL,
    FOREIGN KEY (invoice_id) REFERENCES invoices (id)
    ON DELETE NO ACTION ON UPDATE NO ACTION,
    FOREIGN KEY (track_id) REFERENCES tracks (id)
    ON DELETE NO ACTION ON UPDATE NO ACTION
);
CREATE TABLE playlists (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    name VARCHAR(120)
);
CREATE TABLE playlist_tracks (
    playlist_id INTEGER  NOT NULL,
    track_id INTEGER  NOT NULL,
    CONSTRAINT PK_PlaylistTrack PRIMARY KEY  (playlist_id, track_id),
    FOREIGN KEY (playlist_id) REFERENCES playlists (id)
    ON DELETE NO ACTION ON UPDATE NO ACTION,
    FOREIGN KEY (track_id) REFERENCES tracks (id)
    ON DELETE NO ACTION ON UPDATE NO ACTION
);
CREATE UNIQUE INDEX index_album_on_id ON albums(id);
CREATE UNIQUE INDEX index_artist_on_id ON artists(id);
CREATE UNIQUE INDEX index_customer_on_id ON customers(id);
CREATE UNIQUE INDEX index_employee_on_id ON employees(id);
CREATE UNIQUE INDEX index_genre_on_id ON genres(id);
CREATE UNIQUE INDEX index_invoice_on_id ON invoices(id);
CREATE UNIQUE INDEX index_invoice_line_on_id ON invoice_lines(id);
CREATE UNIQUE INDEX index_media_type_on_id ON media_types(id);
CREATE UNIQUE INDEX index_playlist_on_id ON playlists(id);
CREATE UNIQUE INDEX index_playlist_track_on_id ON playlist_tracks(playlist_id, track_id);
CREATE UNIQUE INDEX index_track_on_id ON tracks(id);
CREATE INDEX index_album_on_artist_id ON albums (artist_id);
CREATE INDEX index_customers_on_support_rep_id ON customers (support_rep_id);
CREATE INDEX index_employees_on_reports_to ON employees (reports_to);
CREATE INDEX index_invoices_on_customer_id ON invoices (customer_id);
CREATE INDEX index_invoice_lines_on_invoice_id ON invoice_lines (invoice_id);
CREATE INDEX index_invoice_lines_on_track_id ON invoice_lines (track_id);
CREATE INDEX index_playlist_tracks_on_track_id ON playlist_tracks (track_id);
CREATE INDEX index_tracks_on_album_id ON tracks (album_id);
CREATE INDEX index_track_on_genre_id ON tracks (genre_id);
CREATE INDEX index_track_on_media_type_id ON tracks (media_type_id);"
store_product,"CREATE TABLE product (
product_id int,
product text,
dimensions text,
dpi real,
pages_per_minute_color real,
max_page_size text,
interface text,
PRIMARY KEY (product_id)
);
CREATE TABLE store (
Store_ID int,
Store_Name text,
Type text,
Area_size real,
Number_of_product_category real,
Ranking int,
PRIMARY KEY (Store_ID)
);
CREATE TABLE district (
District_ID int,
District_name text,
Headquartered_City text,
City_Population real,
City_Area real,
PRIMARY KEY (District_ID)
);
CREATE TABLE store_product (
Store_ID int,
Product_ID int,
PRIMARY KEY (Store_ID,Product_ID),
FOREIGN KEY (Store_ID) REFERENCES store(Store_ID),
FOREIGN KEY (Product_ID) REFERENCES product(Product_ID)
);
CREATE TABLE store_district (
Store_ID int,
District_ID int,
PRIMARY KEY (Store_ID),
FOREIGN KEY (Store_ID) REFERENCES store(Store_ID),
FOREIGN KEY (District_ID) REFERENCES district(District_ID)
);"
storm_record,"CREATE TABLE storm (
Storm_ID int,
Name text,
Dates_active text,
Max_speed int,
Damage_millions_USD real,
Number_Deaths int,
PRIMARY KEY (Storm_ID)
);
CREATE TABLE region (
Region_id int,
Region_code text,
Region_name text,
PRIMARY KEY (Region_id)
);
CREATE TABLE affected_region (
Region_id int,
Storm_ID int,
Number_city_affected real,
PRIMARY KEY (Region_id,Storm_ID),
FOREIGN KEY (Region_id) REFERENCES region(Region_id),
FOREIGN KEY (Storm_ID) REFERENCES storm(Storm_ID)
);"
student_1,"CREATE TABLE list (
 LastName TEXT,
 FirstName TEXT,
 Grade INTEGER,
 Classroom INTEGER,
 PRIMARY KEY(LastName, FirstName)
);
CREATE TABLE teachers (
 LastName TEXT,
 FirstName TEXT,
 Classroom INTEGER,
 PRIMARY KEY(LastName, FirstName)
);"
student_assessment,"CREATE TABLE Addresses (
address_id INTEGER NOT NULL,
line_1 VARCHAR(80),
line_2 VARCHAR(80),
city VARCHAR(50),
zip_postcode CHAR(20),
state_province_county VARCHAR(50),
country VARCHAR(50),
PRIMARY KEY (address_id)
);
CREATE TABLE People (
person_id INTEGER NOT NULL,
first_name VARCHAR(255),
middle_name VARCHAR(255),
last_name VARCHAR(255),
cell_mobile_number VARCHAR(40),
email_address VARCHAR(40),
login_name VARCHAR(40),
password VARCHAR(40),
PRIMARY KEY (person_id)
);
CREATE TABLE Students (
student_id INTEGER NOT NULL,
student_details VARCHAR(255),
PRIMARY KEY (student_id),
FOREIGN KEY (student_id) REFERENCES People (person_id)
);
CREATE TABLE Courses (
course_id VARCHAR(100) NOT NULL,
course_name VARCHAR(120),
course_description VARCHAR(255),
other_details VARCHAR(255),
PRIMARY KEY (course_id)
);
CREATE TABLE People_Addresses (
person_address_id INTEGER NOT NULL,
person_id INTEGER NOT NULL,
address_id INTEGER NOT NULL,
date_from DATETIME,
date_to DATETIME,
PRIMARY KEY (person_address_id),
FOREIGN KEY (person_id) REFERENCES People (person_id),
FOREIGN KEY (address_id) REFERENCES Addresses (address_id)
);
CREATE TABLE Student_Course_Registrations (
student_id INTEGER NOT NULL,
course_id INTEGER NOT NULL,
registration_date DATETIME NOT NULL,
PRIMARY KEY (student_id, course_id),
FOREIGN KEY (student_id) REFERENCES Students (student_id),
FOREIGN KEY (course_id) REFERENCES Courses (course_id)
);
CREATE TABLE Student_Course_Attendance (
student_id INTEGER NOT NULL,
course_id INTEGER NOT NULL,
date_of_attendance DATETIME NOT NULL,
PRIMARY KEY (student_id, course_id),
FOREIGN KEY (student_id, course_id) REFERENCES Student_Course_Registrations (student_id,course_id)
);
CREATE TABLE Candidates (
candidate_id INTEGER NOT NULL ,
candidate_details VARCHAR(255),
PRIMARY KEY (candidate_id),
FOREIGN KEY (candidate_id) REFERENCES People (person_id)
);
CREATE TABLE Candidate_Assessments (
candidate_id INTEGER NOT NULL,
qualification CHAR(15) NOT NULL,
assessment_date DATETIME NOT NULL,
asessment_outcome_code CHAR(15) NOT NULL,
PRIMARY KEY (candidate_id, qualification),
FOREIGN KEY (candidate_id) REFERENCES Candidates (candidate_id)
);"
swimming,"CREATE TABLE swimmer (
ID int,
name text,
Nationality text,
meter_100 real,
meter_200 text,
meter_300 text,
meter_400 text,
meter_500 text,
meter_600 text,
meter_700 text,
Time text,
PRIMARY KEY (ID)
);
CREATE TABLE stadium (
ID int,
name text,
Capacity int,
City text,
Country text,
Opening_year int,
PRIMARY KEY (ID)
);
CREATE TABLE event (
ID int,
Name text,
Stadium_ID int,
Year text,
PRIMARY KEY (ID),
FOREIGN KEY (Stadium_ID) REFERENCES stadium(ID)
);
CREATE TABLE record (
ID int,
Result text,
Swimmer_ID int,
Event_ID int,
PRIMARY KEY (Swimmer_ID,Event_ID),
FOREIGN KEY (Event_ID) REFERENCES event(ID),
FOREIGN KEY (Swimmer_ID) REFERENCES swimmer(ID)
);"
theme_gallery,"CREATE TABLE artist (
Artist_ID int,
Name text,
Country text,
Year_Join int,
Age int,
PRIMARY KEY (Artist_ID)
);
CREATE TABLE exhibition (
Exhibition_ID int,
Year int,
Theme text,
Artist_ID int,
Ticket_Price real,
PRIMARY KEY (Exhibition_ID),
FOREIGN KEY (Artist_ID) REFERENCES artist(Artist_ID)
);
CREATE TABLE exhibition_record (
Exhibition_ID int,
Date text,
Attendance int,
PRIMARY KEY (Exhibition_ID,Date),
FOREIGN KEY (Exhibition_ID) REFERENCES exhibition(Exhibition_ID)
);"
tracking_grants_for_research,"CREATE TABLE Document_Types (
document_type_code VARCHAR(10) PRIMARY KEY,
document_description VARCHAR(255) NOT NULL
);
CREATE TABLE Documents (
document_id INTEGER PRIMARY KEY,
document_type_code VARCHAR(10),
grant_id INTEGER NOT NULL,
sent_date DATETIME NOT NULL,
response_received_date DATETIME NOT NULL,
other_details VARCHAR(255) NOT NULL,
FOREIGN KEY (document_type_code ) REFERENCES Document_Types(document_type_code ),
FOREIGN KEY (grant_id ) REFERENCES Grants(grant_id )
);
CREATE TABLE Grants (
grant_id INTEGER PRIMARY KEY,
organisation_id INTEGER NOT NULL,
grant_amount DECIMAL(19,4) NOT NULL DEFAULT 0,
grant_start_date DATETIME NOT NULL,
grant_end_date DATETIME NOT NULL,
other_details VARCHAR(255) NOT NULL,
FOREIGN KEY (organisation_id ) REFERENCES Organisations(organisation_id )
);
CREATE TABLE Organisation_Types (
organisation_type VARCHAR(10) PRIMARY KEY,
organisation_type_description VARCHAR(255) NOT NULL
);
CREATE TABLE Organisations (
organisation_id INTEGER PRIMARY KEY,
organisation_type VARCHAR(10) NOT NULL,
organisation_details VARCHAR(255) NOT NULL,
FOREIGN KEY (organisation_type ) REFERENCES Organisation_Types(organisation_type )
);
CREATE TABLE Project_Outcomes (
project_id INTEGER NOT NULL,
outcome_code VARCHAR(10) NOT NULL,
outcome_details VARCHAR(255),
FOREIGN KEY (project_id ) REFERENCES Projects(project_id ),FOREIGN KEY (outcome_code ) REFERENCES Research_Outcomes(outcome_code )
);
CREATE TABLE Project_Staff (
staff_id DOUBLE PRIMARY KEY,
project_id INTEGER NOT NULL,
role_code VARCHAR(10) NOT NULL,
date_from DATETIME,
date_to DATETIME,
other_details VARCHAR(255),
FOREIGN KEY (project_id ) REFERENCES Projects(project_id ),FOREIGN KEY (role_code ) REFERENCES Staff_Roles(role_code )
);
CREATE TABLE Projects (
project_id INTEGER PRIMARY KEY,
organisation_id INTEGER NOT NULL,
project_details VARCHAR(255) NOT NULL,
FOREIGN KEY (organisation_id ) REFERENCES Organisations(organisation_id )
);
CREATE TABLE Research_Outcomes (
outcome_code VARCHAR(10) PRIMARY KEY,
outcome_description VARCHAR(255) NOT NULL
);
CREATE TABLE Research_Staff (
staff_id INTEGER PRIMARY KEY,
employer_organisation_id INTEGER NOT NULL,
staff_details VARCHAR(255) NOT NULL,
FOREIGN KEY (employer_organisation_id ) REFERENCES Organisations(organisation_id )
);
CREATE TABLE Staff_Roles (
role_code VARCHAR(10) PRIMARY KEY,
role_description VARCHAR(255) NOT NULL
);
CREATE TABLE Tasks (
task_id INTEGER PRIMARY KEY,
project_id INTEGER NOT NULL,
task_details VARCHAR(255) NOT NULL,
eg Agree Objectives VARCHAR(1),
FOREIGN KEY (project_id ) REFERENCES Projects(project_id )
);"
tracking_orders,"CREATE TABLE Customers (
customer_id INTEGER PRIMARY KEY,
customer_name VARCHAR(80),
customer_details VARCHAR(255)
);
CREATE TABLE Invoices (
invoice_number INTEGER PRIMARY KEY,
invoice_date DATETIME,
invoice_details VARCHAR(255)
);
CREATE TABLE Orders (
order_id INTEGER PRIMARY KEY,
customer_id INTEGER NOT NULL,
order_status VARCHAR(10) NOT NULL,
date_order_placed DATETIME NOT NULL,
order_details VARCHAR(255),
FOREIGN KEY (customer_id ) REFERENCES Customers(customer_id )
);
CREATE TABLE Products (
product_id INTEGER PRIMARY KEY,
product_name VARCHAR(80),
product_details VARCHAR(255)
);
CREATE TABLE Order_Items (
order_item_id INTEGER PRIMARY KEY,
product_id INTEGER NOT NULL,
order_id INTEGER NOT NULL,
order_item_status VARCHAR(10) NOT NULL,
order_item_details VARCHAR(255),
FOREIGN KEY (order_id ) REFERENCES Orders(order_id ),
FOREIGN KEY (product_id ) REFERENCES Products(product_id )
);
CREATE TABLE Shipments (
shipment_id INTEGER PRIMARY KEY,
order_id INTEGER NOT NULL,
invoice_number INTEGER NOT NULL,
shipment_tracking_number VARCHAR(80),
shipment_date DATETIME,
other_shipment_details VARCHAR(255),
FOREIGN KEY (order_id ) REFERENCES Orders(order_id ),
FOREIGN KEY (invoice_number ) REFERENCES Invoices(invoice_number )
);
CREATE TABLE Shipment_Items (
shipment_id INTEGER NOT NULL,
order_item_id INTEGER NOT NULL,
FOREIGN KEY (order_item_id ) REFERENCES Order_Items(order_item_id ),
FOREIGN KEY (shipment_id ) REFERENCES Shipments(shipment_id )
);"
tracking_share_transactions,"CREATE TABLE Investors (
investor_id INTEGER PRIMARY KEY,
Investor_details VARCHAR(255)
);
CREATE TABLE Lots (
lot_id INTEGER PRIMARY KEY,
investor_id INTEGER NOT NULL,
lot_details VARCHAR(255),
FOREIGN KEY (investor_id ) REFERENCES Investors(investor_id )
);
CREATE TABLE Ref_Transaction_Types (
transaction_type_code VARCHAR(10) PRIMARY KEY,
transaction_type_description VARCHAR(80) NOT NULL
);
CREATE TABLE Transactions (
transaction_id INTEGER PRIMARY KEY,
investor_id INTEGER NOT NULL,
transaction_type_code VARCHAR(10) NOT NULL,
date_of_transaction DATETIME,
amount_of_transaction DECIMAL(19,4),
share_count VARCHAR(40),
other_details VARCHAR(255),
FOREIGN KEY (investor_id ) REFERENCES Investors(investor_id ),FOREIGN KEY (transaction_type_code ) REFERENCES Ref_Transaction_Types(transaction_type_code )
);
CREATE TABLE Sales (
sales_transaction_id INTEGER PRIMARY KEY,
sales_details VARCHAR(255),
FOREIGN KEY (sales_transaction_id ) REFERENCES Transactions(transaction_id )
);
CREATE TABLE Purchases (
purchase_transaction_id INTEGER NOT NULL,
purchase_details VARCHAR(255) NOT NULL,
FOREIGN KEY (purchase_transaction_id ) REFERENCES Transactions(transaction_id )
);
CREATE TABLE Transactions_Lots (
transaction_id INTEGER NOT NULL,
lot_id INTEGER NOT NULL,
FOREIGN KEY (lot_id ) REFERENCES Lots(lot_id ),
FOREIGN KEY (transaction_id ) REFERENCES Transactions(transaction_id )
);"
tracking_software_problems,"CREATE TABLE Problem_Category_Codes (
problem_category_code VARCHAR(20) PRIMARY KEY,
problem_category_description VARCHAR(80)
);
CREATE TABLE Problem_Log (
problem_log_id INTEGER PRIMARY KEY,
assigned_to_staff_id INTEGER NOT NULL,
problem_id INTEGER NOT NULL,
problem_category_code VARCHAR(20) NOT NULL,
problem_status_code VARCHAR(20) NOT NULL,
log_entry_date DATETIME,
log_entry_description VARCHAR(255),
log_entry_fix VARCHAR(255),
other_log_details VARCHAR(255),
FOREIGN KEY (problem_category_code ) REFERENCES Problem_Category_Codes(problem_category_code ),FOREIGN KEY (assigned_to_staff_id ) REFERENCES Staff(staff_id ),FOREIGN KEY (problem_id ) REFERENCES Problems(problem_id ),FOREIGN KEY (problem_status_code ) REFERENCES Problem_Status_Codes(problem_status_code )
);
CREATE TABLE Problem_Status_Codes (
problem_status_code VARCHAR(20) PRIMARY KEY,
problem_status_description VARCHAR(80)
);
CREATE TABLE Product (
product_id INTEGER PRIMARY KEY,
product_name VARCHAR(80),
product_details VARCHAR(255)
);
CREATE TABLE Staff (
staff_id INTEGER PRIMARY KEY,
staff_first_name VARCHAR(80),
staff_last_name VARCHAR(80),
other_staff_details VARCHAR(255)
);
CREATE TABLE Problems (
problem_id INTEGER PRIMARY KEY,
product_id INTEGER NOT NULL,
closure_authorised_by_staff_id INTEGER NOT NULL,
reported_by_staff_id INTEGER NOT NULL,
date_problem_reported DATETIME NOT NULL,
date_problem_closed DATETIME,
problem_description VARCHAR(255),
other_problem_details VARCHAR(255),
FOREIGN KEY (closure_authorised_by_staff_id ) REFERENCES Staff(staff_id ),
FOREIGN KEY (product_id ) REFERENCES Product(product_id ),
FOREIGN KEY (reported_by_staff_id ) REFERENCES Staff(staff_id )
);"
train_station,"CREATE TABLE station (
Station_ID int,
Name text,
Annual_entry_exit real,
Annual_interchanges real,
Total_Passengers real,
Location text,
Main_Services text,
Number_of_Platforms int,
PRIMARY KEY (Station_ID)
);
CREATE TABLE train (
Train_ID int,
Name text,
Time text,
Service text,
PRIMARY KEY (Train_ID)
);
CREATE TABLE train_station (
Train_ID int,
Station_ID int, 
PRIMARY KEY (Train_ID,Station_ID),
FOREIGN KEY (Train_ID) REFERENCES train(Train_ID),
FOREIGN KEY (Station_ID) REFERENCES station(Station_ID)
);"
twitter_1,"CREATE TABLE follows (
  f1 int(11) NOT NULL,
  f2 int(11) NOT NULL,
  PRIMARY KEY (f1,f2),
  FOREIGN KEY (f1) REFERENCES user_profiles(uid),
  FOREIGN KEY (f2) REFERENCES user_profiles(uid)
);
CREATE TABLE tweets (
  id bigint(20) NOT NULL,
  uid int(11) NOT NULL,
  text char(140) NOT NULL,
  createdate datetime DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (id),
  FOREIGN KEY (uid) REFERENCES user_profiles(uid)
);
CREATE TABLE user_profiles (
  uid int(11) NOT NULL,
  name varchar(255) DEFAULT NULL,
  email varchar(255) DEFAULT NULL,
  partitionid int(11) DEFAULT NULL,
  followers int(11) DEFAULT NULL,
  PRIMARY KEY (uid)
);"
university_basketball,"CREATE TABLE basketball_match (
Team_ID int,
School_ID int,
Team_Name text,
ACC_Regular_Season text,
ACC_Percent text,
ACC_Home text,
ACC_Road text,
All_Games text,
All_Games_Percent int,
All_Home text,
All_Road text,
All_Neutral text,
PRIMARY KEY (Team_ID),
FOREIGN KEY (School_ID) REFERENCES university(School_ID)
);
CREATE TABLE university (
School_ID int,
School text,
Location text,
Founded real,
Affiliation text,
Enrollment real,
Nickname text,
Primary_conference text,
PRIMARY KEY (School_ID)
);"
voter_2,"CREATE TABLE Student (
        StuID        INTEGER PRIMARY KEY,
        LName        VARCHAR(12),
        Fname        VARCHAR(12),
        Age      INTEGER,
        Sex      VARCHAR(1),
        Major        INTEGER,
        Advisor      INTEGER,
        city_code    VARCHAR(3)
 );
CREATE TABLE Voting_record (
       StuID     INTEGER,
       Registration_Date  VARCHAR(12),
       Election_Cycle  VARCHAR(12),
       President_Vote  INTEGER,
       Vice_President_Vote  INTEGER,
       Secretary_Vote  INTEGER,
       Treasurer_Vote  INTEGER,
       Class_President_Vote  INTEGER,
       Class_Senator_Vote  INTEGER,
       FOREIGN KEY(StuID) REFERENCES Student(StuID), 
       FOREIGN KEY(President_Vote) REFERENCES Student(StuID),
       FOREIGN KEY(Vice_President_Vote) REFERENCES Student(StuID),
       FOREIGN KEY(Secretary_Vote) REFERENCES Student(StuID),
       FOREIGN KEY(Treasurer_Vote) REFERENCES Student(StuID),
       FOREIGN KEY(Class_President_Vote) REFERENCES Student(StuID),
       FOREIGN KEY(Class_Senator_Vote) REFERENCES Student(StuID)
);"
wedding,"CREATE TABLE people (
People_ID int,
Name text,
Country text,
Is_Male text,
Age int,
PRIMARY KEY (People_ID)
);
CREATE TABLE church (
Church_ID int,
Name text,
Organized_by text,
Open_Date int,
Continuation_of text,
PRIMARY KEY (Church_ID)
);
CREATE TABLE wedding (
Church_ID int,
Male_ID int,
Female_ID int,
Year int,
PRIMARY KEY (Church_ID,Male_ID,Female_ID),
FOREIGN KEY (Church_ID) REFERENCES church(Church_ID),
FOREIGN KEY (Male_ID) REFERENCES people(People_ID),
FOREIGN KEY (Female_ID) REFERENCES people(People_ID)
);"
wine_1,"CREATE TABLE grapes (
 ID INTEGER PRIMARY KEY,
 Grape TEXT UNIQUE,
 Color TEXT
);
CREATE TABLE appellations ( 
 No INTEGER PRIMARY KEY,
 Appelation TEXT UNIQUE,
 County TEXT,
 State TEXT,
 Area TEXT,
 isAVA TEXT
);
CREATE TABLE wine ( 
 No INTEGER,
 Grape TEXT,
 Winery TEXT,
 Appelation TEXT,
 State TEXT,
 Name TEXT,
 Year INTEGER,
 Price INTEGER,
 Score INTEGER,
 Cases INTEGER,
 Drink TEXT,
 FOREIGN KEY (Grape) REFERENCES grapes(Grape),
 FOREIGN KEY (Appelation) REFERENCES appellations(Appelation)
);"
workshop_paper,"CREATE TABLE workshop (
Workshop_ID int,
Date text,
Venue text,
Name text,
PRIMARY KEY (Workshop_ID)
);
CREATE TABLE submission (
Submission_ID int,
Scores real,
Author text,
College text,
PRIMARY KEY (Submission_ID)
);
CREATE TABLE Acceptance (
Submission_ID int,
Workshop_ID int,
Result text,
PRIMARY KEY (Submission_ID,Workshop_ID),
FOREIGN KEY (Submission_ID) REFERENCES submission(Submission_ID),
FOREIGN KEY (Workshop_ID) REFERENCES workshop(Workshop_ID)
);"
wrestler,"CREATE TABLE wrestler (
Wrestler_ID int,
Name text,
Reign text,
Days_held text,
Location text,
Event text,
PRIMARY KEY (Wrestler_ID)
);
CREATE TABLE Elimination (
Elimination_ID text,
Wrestler_ID text,
Team text,
Eliminated_By text,
Elimination_Move text,
Time text,
PRIMARY KEY (Elimination_ID),
FOREIGN KEY (Wrestler_ID) REFERENCES wrestler(Wrestler_ID)
);"
concert_singer,"CREATE TABLE stadium (
Stadium_ID  int,
Location  text,
Name  text,
Capacity  int,
Highest  int,
Lowest  int,
Average  int,
PRIMARY KEY ( Stadium_ID )
);
CREATE TABLE singer (
Singer_ID  int,
Name  text,
Country  text,
Song_Name  text,
Song_release_year  text,
Age  int,
Is_male  bool,
PRIMARY KEY ( Singer_ID )
);
CREATE TABLE concert (
concert_ID  int,
concert_Name  text,
Theme  text,
Stadium_ID  text,
Year  text,
PRIMARY KEY ( concert_ID ),
FOREIGN KEY ( Stadium_ID ) REFERENCES  stadium ( Stadium_ID )
);
CREATE TABLE singer_in_concert (
concert_ID  int,
Singer_ID  text,
PRIMARY KEY ( concert_ID ,Singer_ID ),
FOREIGN KEY ( concert_ID ) REFERENCES  concert ( concert_ID ),
FOREIGN KEY ( Singer_ID ) REFERENCES  singer ( Singer_ID )
);"
pets_1,"CREATE TABLE Student (
       StuID     INTEGER PRIMARY KEY,
       LName  VARCHAR(12),
       Fname  VARCHAR(12),
       Age  INTEGER,
       Sex  VARCHAR(1),
       Major  INTEGER,
       Advisor  INTEGER,
       city_code VARCHAR(3)
);
CREATE TABLE Has_Pet (
       StuID  INTEGER,
       PetID  INTEGER,
       FOREIGN KEY(PetID) REFERENCES Pets(PetID),
       FOREIGN KEY(StuID) REFERENCES Student(StuID)
);
CREATE TABLE Pets (
       PetID  INTEGER PRIMARY KEY,
       PetType  VARCHAR(20),
       pet_age INTEGER,
       weight REAL
);"
car_1,"CREATE TABLE continents (
  ContId  INTEGER PRIMARY KEY,
  Continent  TEXT
);
CREATE TABLE countries (
  CountryId  INTEGER PRIMARY KEY,
  CountryName  TEXT,
  Continent  INTEGER,
 FOREIGN KEY (Continent) REFERENCES continents(ContId)
);
CREATE TABLE car_makers ( 
  Id  INTEGER PRIMARY KEY,
  Maker  TEXT,
  FullName  TEXT,
  Country  TEXT,
 FOREIGN KEY (Country) REFERENCES countries(CountryId)
);
CREATE TABLE model_list ( 
  ModelId  INTEGER PRIMARY KEY,
  Maker  INTEGER,
  Model  TEXT UNIQUE,
 FOREIGN KEY (Maker) REFERENCES car_makers (Id)

);
CREATE TABLE car_names ( 
  MakeId  INTEGER PRIMARY KEY,
  Model  TEXT,
  Make  TEXT,
 FOREIGN KEY (Model) REFERENCES model_list (Model)
);
CREATE TABLE cars_data (
  Id  INTEGER PRIMARY KEY,
  MPG  TEXT,
  Cylinders  INTEGER,
  Edispl  REAL,
  Horsepower  TEXT,
  Weight  INTEGER,
  Accelerate  REAL,
  Year  INTEGER,
 FOREIGN KEY (Id) REFERENCES car_names (MakeId)
);"
flight_2,"CREATE TABLE airlines (
 uid INTEGER PRIMARY KEY,
 Airline TEXT,
 Abbreviation TEXT,
 Country TEXT
);
CREATE TABLE airports (
 City TEXT,
 AirportCode TEXT PRIMARY KEY,
 AirportName TEXT,
 Country TEXT,
 CountryAbbrev TEXT
);
CREATE TABLE flights (
 Airline INTEGER,
 FlightNo INTEGER,
 SourceAirport TEXT,
 DestAirport TEXT,
 PRIMARY KEY(Airline,FlightNo),
 FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),
 FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)
);"
employee_hire_evaluation,"CREATE TABLE employee (
 Employee_ID  int,
 Name  text,
 Age  int,
 City  text,
PRIMARY KEY ( Employee_ID )
);
CREATE TABLE shop (
 Shop_ID  int,
 Name  text,
 Location  text,
 District  text,
 Number_products  int,
 Manager_name  text,
PRIMARY KEY ( Shop_ID )
);
CREATE TABLE hiring (
 Shop_ID  int,
 Employee_ID  int,
 Start_from  text,
 Is_full_time  bool,
PRIMARY KEY ( Employee_ID ),
FOREIGN KEY ( Shop_ID ) REFERENCES  shop ( Shop_ID ),
FOREIGN KEY ( Employee_ID ) REFERENCES  employee ( Employee_ID )
);
CREATE TABLE evaluation (
 Employee_ID  text,
 Year_awarded  text,
 Bonus  real,
PRIMARY KEY ( Employee_ID ,Year_awarded ),
FOREIGN KEY ( Employee_ID ) REFERENCES  employee ( Employee_ID )
);"
cre_Doc_Template_Mgt,"CREATE TABLE Ref_Template_Types (
Template_Type_Code CHAR(15) NOT NULL,
Template_Type_Description VARCHAR(255) NOT NULL,
PRIMARY KEY (Template_Type_Code)
);
CREATE TABLE Templates (
Template_ID INTEGER NOT NULL,
Version_Number INTEGER NOT NULL,
Template_Type_Code CHAR(15) NOT NULL,
Date_Effective_From DATETIME,
Date_Effective_To DATETIME,
Template_Details VARCHAR(255) NOT NULL,
PRIMARY KEY (Template_ID),
FOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)
);
CREATE TABLE Documents (
Document_ID INTEGER NOT NULL,
Template_ID INTEGER,
Document_Name VARCHAR(255),
Document_Description VARCHAR(255),
Other_Details VARCHAR(255),
PRIMARY KEY (Document_ID),
FOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)
);
CREATE TABLE Paragraphs (
Paragraph_ID INTEGER NOT NULL,
Document_ID INTEGER NOT NULL,
Paragraph_Text VARCHAR(255),
Other_Details VARCHAR(255),
PRIMARY KEY (Paragraph_ID),
FOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)
);"
course_teach,"CREATE TABLE course (
 Course_ID  int,
 Staring_Date  text,
 Course  text,
PRIMARY KEY ( Course_ID )
);
CREATE TABLE teacher (
 Teacher_ID  int,
 Name  text,
 Age  text,
 Hometown  text,
PRIMARY KEY ( Teacher_ID )
);
CREATE TABLE course_arrange (
 Course_ID  int,
 Teacher_ID  int,
 Grade  int,
PRIMARY KEY ( Course_ID ,Teacher_ID ,Grade ),
FOREIGN KEY ( Course_ID ) REFERENCES  course ( Course_ID ),
FOREIGN KEY ( Teacher_ID ) REFERENCES  teacher ( Teacher_ID )
);"
museum_visit,"CREATE TABLE museum (
 Museum_ID  int,
 Name  text,
 Num_of_Staff  int,
 Open_Year  text,
PRIMARY KEY ( Museum_ID )
);
CREATE TABLE visitor (
 ID  int,
 Name  text,
 Level_of_membership  int,
 Age  int,
PRIMARY KEY ( ID )
);
CREATE TABLE visit (
 Museum_ID  int,
 visitor_ID  text,
 Num_of_Ticket  int,
 Total_spent  real,
PRIMARY KEY ( Museum_ID ,visitor_ID ),
FOREIGN KEY ( Museum_ID ) REFERENCES  museum ( Museum_ID ),
FOREIGN KEY ( visitor_ID ) REFERENCES  visitor ( ID )
);"
wta_1,"CREATE TABLE players (
     player_id  INT PRIMARY KEY,
     first_name  TEXT,
     last_name  TEXT,
     hand  TEXT,
     birth_date  DATE,
     country_code  TEXT
);
CREATE TABLE matches (
   best_of  INT,
   draw_size  INT,
   loser_age  FLOAT,
   loser_entry  TEXT,
   loser_hand  TEXT,
   loser_ht  INT,
   loser_id  INT,
   loser_ioc  TEXT,
   loser_name  TEXT,
   loser_rank  INT,
   loser_rank_points  INT,
   loser_seed  INT,
   match_num  INT,
   minutes  INT,
   round  TEXT,
   score  TEXT,
   surface  TEXT,
   tourney_date  DATE,
   tourney_id  TEXT,
   tourney_level  TEXT,
   tourney_name  TEXT,
   winner_age  FLOAT,
   winner_entry  TEXT,
   winner_hand  TEXT,
   winner_ht  INT,
   winner_id  INT,
   winner_ioc  TEXT,
   winner_name  TEXT,
   winner_rank  INT,
   winner_rank_points  INT,
   winner_seed  INT,
   year  INT,
  FOREIGN KEY(loser_id) REFERENCES players(player_id),
  FOREIGN KEY(winner_id) REFERENCES players(player_id)
);
CREATE TABLE qualifying_matches (
   best_of  INT,
   draw_size  INT,
   l_1stIn  TEXT,
   l_1stWon  TEXT,
   l_2ndWon  TEXT,
   l_SvGms  TEXT,
   l_ace  TEXT,
   l_bpFaced  TEXT,
   l_bpSaved  TEXT,
   l_df  TEXT,
   l_svpt  TEXT,
   loser_age  FLOAT,
   loser_entry  TEXT,
   loser_hand  TEXT,
   loser_ht  INT,
   loser_id  INT,
   loser_ioc  TEXT,
   loser_name  TEXT,
   loser_rank  INT,
   loser_rank_points  INT,
   loser_seed  INT,
   match_num  INT,
   minutes  INT,
   round  TEXT,
   score  TEXT,
   surface  TEXT,
   tourney_date  DATE,
   tourney_id  TEXT,
   tourney_level  TEXT,
   tourney_name  TEXT,
   w_1stIn  TEXT,
   w_1stWon  TEXT,
   w_2ndWon  TEXT,
   w_SvGms  TEXT,
   w_ace  TEXT,
   w_bpFaced  TEXT,
   w_bpSaved  TEXT,
   w_df  TEXT,
   w_svpt  TEXT,
   winner_age  FLOAT,
   winner_entry  TEXT,
   winner_hand  TEXT,
   winner_ht  INT,
   winner_id  INT,
   winner_ioc  TEXT,
   winner_name  TEXT,
   winner_rank  INT,
   winner_rank_points  INT,
   winner_seed  INT,
   year  INT,
  FOREIGN KEY(loser_id) REFERENCES players(player_id),
  FOREIGN KEY(winner_id) REFERENCES players(player_id)
);
CREATE TABLE rankings (
   ranking_date  DATE,
   ranking  INT,
   player_id  INT,
   ranking_points  INT,
   tours  INT,
  FOREIGN KEY(player_id) REFERENCES players(player_id)
);"
battle_death,"CREATE TABLE battle (
 id  int,
 name  text,
 date  text,
 bulgarian_commander  text,
 latin_commander  text,
 result  text,
primary key( id )
);
CREATE TABLE ship (
 lost_in_battle  int,
 id  int,
 name  text,
 tonnage  text,
 ship_type  text,
 location  text,
 disposition_of_ship  text,
primary key( id ),
foreign key ( lost_in_battle ) references  battle ( id ) 
);
CREATE TABLE death (
 caused_by_ship_id  int,
 id  int,
 note  text,
 killed  int,
 injured  int,
primary key( id ),
foreign key ( caused_by_ship_id ) references  ship ( id ) 
);"
student_transcripts_tracking,"CREATE TABLE Addresses (
 address_id  INTEGER PRIMARY KEY,
 line_1  VARCHAR(255),
 line_2  VARCHAR(255),
 line_3  VARCHAR(255),
 city  VARCHAR(255),
 zip_postcode  VARCHAR(20),
 state_province_county  VARCHAR(255),
 country  VARCHAR(255),
 other_address_details  VARCHAR(255)
);
CREATE TABLE Courses (
 course_id  INTEGER PRIMARY KEY,
 course_name  VARCHAR(255),
 course_description  VARCHAR(255),
 other_details  VARCHAR(255)
);
CREATE TABLE Departments (
 department_id  INTEGER PRIMARY KEY,
 department_name  VARCHAR(255),
 department_description  VARCHAR(255),
 other_details  VARCHAR(255)
);
CREATE TABLE Degree_Programs (
 degree_program_id  INTEGER PRIMARY KEY,
 department_id  INTEGER NOT NULL,
 degree_summary_name  VARCHAR(255),
 degree_summary_description  VARCHAR(255),
 other_details  VARCHAR(255),
FOREIGN KEY ( department_id  ) REFERENCES  Departments ( department_id  )
);
CREATE TABLE Sections (
 section_id  INTEGER PRIMARY KEY,
 course_id  INTEGER NOT NULL,
 section_name  VARCHAR(255),
 section_description  VARCHAR(255),
 other_details  VARCHAR(255),
FOREIGN KEY ( course_id  ) REFERENCES  Courses ( course_id  )
);
CREATE TABLE Semesters (
 semester_id  INTEGER PRIMARY KEY,
 semester_name  VARCHAR(255),
 semester_description  VARCHAR(255),
 other_details  VARCHAR(255)
);
CREATE TABLE Students (
 student_id  INTEGER PRIMARY KEY,
 current_address_id  INTEGER NOT NULL,
 permanent_address_id  INTEGER NOT NULL,
 first_name  VARCHAR(80),
 middle_name  VARCHAR(40),
 last_name  VARCHAR(40),
 cell_mobile_number  VARCHAR(40),
 email_address  VARCHAR(40),
 ssn  VARCHAR(40),
 date_first_registered  DATETIME,
 date_left  DATETIME,
 other_student_details  VARCHAR(255),
FOREIGN KEY ( current_address_id  ) REFERENCES  Addresses ( address_id  ),
FOREIGN KEY ( permanent_address_id  ) REFERENCES  Addresses ( address_id  )
);
CREATE TABLE Student_Enrolment (
 student_enrolment_id  INTEGER PRIMARY KEY,
 degree_program_id  INTEGER NOT NULL,
 semester_id  INTEGER NOT NULL,
 student_id  INTEGER NOT NULL,
 other_details  VARCHAR(255),
FOREIGN KEY ( degree_program_id  ) REFERENCES  Degree_Programs ( degree_program_id  ),
FOREIGN KEY ( semester_id  ) REFERENCES  Semesters ( semester_id  ),
FOREIGN KEY ( student_id  ) REFERENCES  Students ( student_id  )
);
CREATE TABLE Student_Enrolment_Courses (
 student_course_id  INTEGER PRIMARY KEY,
 course_id  INTEGER NOT NULL,
 student_enrolment_id  INTEGER NOT NULL,
FOREIGN KEY ( course_id  ) REFERENCES  Courses ( course_id  ),
FOREIGN KEY ( student_enrolment_id  ) REFERENCES  Student_Enrolment ( student_enrolment_id  )
);
CREATE TABLE Transcripts (
 transcript_id  INTEGER PRIMARY KEY,
 transcript_date  DATETIME,
 other_details  VARCHAR(255)
);
CREATE TABLE Transcript_Contents (
 student_course_id  INTEGER NOT NULL,
 transcript_id  INTEGER NOT NULL,
FOREIGN KEY ( student_course_id  ) REFERENCES  Student_Enrolment_Courses ( student_course_id  ),
FOREIGN KEY ( transcript_id  ) REFERENCES  Transcripts ( transcript_id  )
);"
tvshow,"CREATE TABLE TV_Channel (
 id  text,
 series_name  text,
 Country  text,
 Language  text,
 Content  text,
 Pixel_aspect_ratio_PAR  text,
 Hight_definition_TV  text,
 Pay_per_view_PPV  text,
 Package_Option  text,
PRIMARY KEY ( id )
);
CREATE TABLE TV_series (
 id  real,
 Episode  text,
 Air_Date  text,
 Rating  text,
 Share  real,
 18_49_Rating_Share  text,
 Viewers_m  text,
 Weekly_Rank  real,
 Channel  text,
PRIMARY KEY ( id ),
FOREIGN KEY ( Channel ) REFERENCES  TV_Channel ( id )
);
CREATE TABLE Cartoon (
 id  real,
 Title  text,
 Directed_by  text,
 Written_by  text,
 Original_air_date  text,
 Production_code  real,
 Channel  text,
PRIMARY KEY ( id ),
FOREIGN KEY ( Channel ) REFERENCES  TV_Channel ( id )
);"
poker_player,"CREATE TABLE poker_player (
 Poker_Player_ID  int,
 People_ID  int,
 Final_Table_Made  real,
 Best_Finish  real,
 Money_Rank  real,
 Earnings  real,
PRIMARY KEY ( Poker_Player_ID ),
FOREIGN KEY ( People_ID ) REFERENCES  people ( People_ID )
);
CREATE TABLE people (
 People_ID  int,
 Nationality  text,
 Name  text,
 Birth_Date  text,
 Height  real,
PRIMARY KEY ( People_ID )
);"
voter_1,"CREATE TABLE AREA_CODE_STATE (
   area_code  integer NOT NULL, 
 state  varchar(2) NOT NULL,
 PRIMARY KEY ( area_code )
);
CREATE TABLE CONTESTANTS (
   contestant_number  integer,
   contestant_name  varchar(50) NOT NULL,
  PRIMARY KEY ( contestant_number )
);
DROP TABLE IF EXISTS VOTES;
CREATE TABLE VOTES (
   vote_id  integer NOT NULL PRIMARY KEY,
   phone_number  integer NOT NULL,
   state  varchar(2) NOT NULL,
   contestant_number  integer NOT NULL,
   created  timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  FOREIGN KEY ( state ) REFERENCES  AREA_CODE_STATE ( state ),
 FOREIGN KEY ( contestant_number ) REFERENCES  CONTESTANTS ( contestant_number )
);
CREATE INDEX IF NOT EXISTS  idx_VOTES_idx_votes_phone_number  ON  VOTES ( phone_number );"
world_1,"CREATE TABLE city (
   ID  integer NOT NULL PRIMARY KEY AUTOINCREMENT,
   Name  char(35) NOT NULL DEFAULT '',
   CountryCode  char(3) NOT NULL DEFAULT '',
   District  char(20) NOT NULL DEFAULT '',
   Population  integer NOT NULL DEFAULT '0',
  CONSTRAINT  city_ibfk_1  FOREIGN KEY ( CountryCode ) REFERENCES  country ( Code )
);
CREATE TABLE country (
   Code  char(3) NOT NULL DEFAULT '',
   Name  char(52) NOT NULL DEFAULT '',
   Continent  text  NOT NULL DEFAULT 'Asia',
   Region  char(26) NOT NULL DEFAULT '',
   SurfaceArea  float(10,2) NOT NULL DEFAULT '0.00',
   IndepYear  integer DEFAULT NULL,
   Population  integer NOT NULL DEFAULT '0',
   LifeExpectancy  float(3,1) DEFAULT NULL,
   GNP  float(10,2) DEFAULT NULL,
   GNPOld  float(10,2) DEFAULT NULL,
   LocalName  char(45) NOT NULL DEFAULT '',
   GovernmentForm  char(45) NOT NULL DEFAULT '',
   HeadOfState  char(60) DEFAULT NULL,
   Capital  integer DEFAULT NULL,
   Code2  char(2) NOT NULL DEFAULT '',
  PRIMARY KEY ( Code )
);
CREATE TABLE countrylanguage (
   CountryCode  char(3) NOT NULL DEFAULT '',
   Language  char(30) NOT NULL DEFAULT '',
   IsOfficial  text  NOT NULL DEFAULT 'F',
   Percentage  float(4,1) NOT NULL DEFAULT '0.0',
  PRIMARY KEY ( CountryCode ,Language ),
  CONSTRAINT  countryLanguage_ibfk_1  FOREIGN KEY ( CountryCode ) REFERENCES  country ( Code )
);
CREATE INDEX IF NOT EXISTS  idx_city_CountryCode  ON  city ( CountryCode );
CREATE INDEX IF NOT EXISTS  idx_countrylanguage_CountryCode  ON  countrylanguage ( CountryCode );"
orchestra,"CREATE TABLE conductor (
 Conductor_ID  int,
 Name  text,
 Age  int,
 Nationality  text,
 Year_of_Work  int,
PRIMARY KEY ( Conductor_ID )
);
CREATE TABLE orchestra (
 Orchestra_ID  int,
 Orchestra  text,
 Conductor_ID  int,
 Record_Company  text,
 Year_of_Founded  real,
 Major_Record_Format  text,
PRIMARY KEY ( Orchestra_ID ),
FOREIGN KEY ( Conductor_ID ) REFERENCES  conductor ( Conductor_ID )
);
CREATE TABLE performance (
 Performance_ID  int,
 Orchestra_ID  int,
 Type  text,
 Date  text,
 Official_ratings_(millions)  real,
 Weekly_rank  text,
 Share  text,
PRIMARY KEY ( Performance_ID ),
FOREIGN KEY ( Orchestra_ID ) REFERENCES  orchestra ( Orchestra_ID )
);
CREATE TABLE show (
 Show_ID  int,
 Performance_ID  int,
 If_first_show  bool,
 Result  text,
 Attendance  real,
FOREIGN KEY ( Performance_ID ) REFERENCES  performance ( Performance_ID )
);"
network_1,"CREATE TABLE Highschooler (
 ID int primary key,
 name text,
 grade int);
CREATE TABLE Friend (
 student_id int,
 friend_id int,
 primary key (student_id,friend_id),
 foreign key(student_id) references Highschooler(ID),
 foreign key (friend_id) references Highschooler(ID)
);
CREATE TABLE Likes (
 student_id int,
 liked_id int,
 primary key (student_id,liked_id),
        foreign key (liked_id) references Highschooler(ID),
        foreign key (student_id) references Highschooler(ID)
);"
dog_kennels,"CREATE TABLE Breeds (
 breed_code  VARCHAR(10) PRIMARY KEY ,
 breed_name  VARCHAR(80)
);
CREATE TABLE Charges (
 charge_id  INTEGER PRIMARY KEY ,
 charge_type  VARCHAR(10),
 charge_amount  DECIMAL(19,4)
);
CREATE TABLE Sizes (
 size_code  VARCHAR(10) PRIMARY KEY ,
 size_description  VARCHAR(80)
);
CREATE TABLE Treatment_Types (
 treatment_type_code  VARCHAR(10) PRIMARY KEY ,
 treatment_type_description  VARCHAR(80)
);
CREATE TABLE Owners (
 owner_id  INTEGER PRIMARY KEY ,
 first_name  VARCHAR(50),
 last_name  VARCHAR(50),
 street  VARCHAR(50),
 city  VARCHAR(50),
 state  VARCHAR(20),
 zip_code  VARCHAR(20),
 email_address  VARCHAR(50),
 home_phone  VARCHAR(20),
 cell_number  VARCHAR(20)
);
CREATE TABLE Dogs (
 dog_id  INTEGER PRIMARY KEY ,
 owner_id  INTEGER NOT NULL,
 abandoned_yn  VARCHAR(1),
 breed_code  VARCHAR(10) NOT NULL,
 size_code  VARCHAR(10) NOT NULL,
 name  VARCHAR(50),
 age  VARCHAR(20),
 date_of_birth  DATETIME,
 gender  VARCHAR(1),
 weight  VARCHAR(20),
 date_arrived  DATETIME,
 date_adopted  DATETIME,
 date_departed  DATETIME,
FOREIGN KEY ( breed_code  ) REFERENCES  Breeds ( breed_code  ),
FOREIGN KEY ( size_code  ) REFERENCES  Sizes ( size_code  ),
FOREIGN KEY ( owner_id  ) REFERENCES  Owners ( owner_id  ),
FOREIGN KEY ( owner_id  ) REFERENCES  Owners ( owner_id  )
);
CREATE TABLE Professionals (
 professional_id  INTEGER PRIMARY KEY ,
 role_code  VARCHAR(10) NOT NULL,
 first_name  VARCHAR(50),
 street  VARCHAR(50),
 city  VARCHAR(50),
 state  VARCHAR(20),
 zip_code  VARCHAR(20),
 last_name  VARCHAR(50),
 email_address  VARCHAR(50),
 home_phone  VARCHAR(20),
 cell_number  VARCHAR(20)
);
CREATE TABLE Treatments (
 treatment_id  INTEGER PRIMARY KEY ,
 dog_id  INTEGER NOT NULL,
 professional_id  INTEGER NOT NULL,
 treatment_type_code  VARCHAR(10) NOT NULL,
 date_of_treatment  DATETIME,
 cost_of_treatment  DECIMAL(19,4),
FOREIGN KEY ( treatment_type_code  ) REFERENCES  Treatment_Types ( treatment_type_code  ),
FOREIGN KEY ( professional_id  ) REFERENCES  Professionals ( professional_id  ),
FOREIGN KEY ( dog_id  ) REFERENCES  Dogs ( dog_id  )
);"
singer,"CREATE TABLE singer (
Singer_ID  int,
Name  text,
Birth_Year  real,
Net_Worth_Millions  real,
Citizenship  text,
PRIMARY KEY ( Singer_ID )
);
CREATE TABLE song (
 Song_ID  int,
 Title  text,
 Singer_ID  int,
 Sales  real,
 Highest_Position  real,
PRIMARY KEY ( Song_ID ),
FOREIGN KEY ( Singer_ID ) REFERENCES  singer ( Singer_ID )
);"
real_estate_properties,"CREATE TABLE Ref_Feature_Types (
 feature_type_code  VARCHAR(20) PRIMARY KEY,
 feature_type_name  VARCHAR(80)
);
CREATE TABLE Ref_Property_Types (
 property_type_code  VARCHAR(20) PRIMARY KEY,
 property_type_description  VARCHAR(80)
);
CREATE TABLE Other_Available_Features (
 feature_id  INTEGER PRIMARY KEY,
 feature_type_code  VARCHAR(20) NOT NULL,
 feature_name  VARCHAR(80),
 feature_description  VARCHAR(80),
FOREIGN KEY ( feature_type_code  ) REFERENCES  Ref_Feature_Types ( feature_type_code  )
);
CREATE TABLE Properties (
 property_id  INTEGER PRIMARY KEY,
 property_type_code  VARCHAR(20) NOT NULL,
 date_on_market  DATETIME,
 date_sold  DATETIME,
 property_name  VARCHAR(80),
 property_address  VARCHAR(255),
 room_count  INTEGER,
 vendor_requested_price  DECIMAL(19,4),
 buyer_offered_price  DECIMAL(19,4),
 agreed_selling_price  DECIMAL(19,4),
 apt_feature_1  VARCHAR(255),
 apt_feature_2  VARCHAR(255),
 apt_feature_3  VARCHAR(255),
 fld_feature_1  VARCHAR(255),
 fld_feature_2  VARCHAR(255),
 fld_feature_3  VARCHAR(255),
 hse_feature_1  VARCHAR(255),
 hse_feature_2  VARCHAR(255),
 hse_feature_3  VARCHAR(255),
 oth_feature_1  VARCHAR(255),
 oth_feature_2  VARCHAR(255),
 oth_feature_3  VARCHAR(255),
 shp_feature_1  VARCHAR(255),
 shp_feature_2  VARCHAR(255),
 shp_feature_3  VARCHAR(255),
 other_property_details  VARCHAR(255),
FOREIGN KEY ( property_type_code  ) REFERENCES  Ref_Property_Types ( property_type_code  )
);
CREATE TABLE Other_Property_Features (
 property_id  INTEGER NOT NULL,
 feature_id  INTEGER NOT NULL,
 property_feature_description  VARCHAR(80),
FOREIGN KEY ( feature_id  ) REFERENCES  Other_Available_Features ( feature_id  ),
FOREIGN KEY ( property_id  ) REFERENCES  Properties ( property_id  )
);"
aan_1,"CREATE TABLE Affiliation (
  affiliation_id int(11) NOT NULL,
  name varchar(255) DEFAULT NULL,
  address varchar(255) DEFAULT NULL,
  PRIMARY KEY (affiliation_id)
);
CREATE TABLE Author_list (
  paper_id varchar(25) NOT NULL,
  author_id int(11) NOT NULL,
  affiliation_id int(11) DEFAULT NULL,
  PRIMARY KEY (paper_id,author_id),
  KEY author_id (author_id),
  KEY affiliation_id (affiliation_id),
  CONSTRAINT Author_list_ibfk_1 FOREIGN KEY (paper_id) REFERENCES Paper (paper_id),
  CONSTRAINT Author_list_ibfk_2 FOREIGN KEY (author_id) REFERENCES Author (author_id),
  CONSTRAINT Author_list_ibfk_3 FOREIGN KEY (affiliation_id) REFERENCES Affiliation (affiliation_id)
);
CREATE TABLE Citation (
  paper_id varchar(25) NOT NULL,
  cited_paper_id varchar(25) NOT NULL,
  PRIMARY KEY (paper_id,cited_paper_id),
  KEY cited_paper_id (cited_paper_id),
  CONSTRAINT Citation_ibfk_1 FOREIGN KEY (paper_id) REFERENCES Paper (paper_id),
  CONSTRAINT Citation_ibfk_2 FOREIGN KEY (cited_paper_id) REFERENCES Paper (paper_id)
);
CREATE TABLE Author (
  author_id int(11) NOT NULL,
  name varchar(255) DEFAULT NULL,
  email varchar(255) DEFAULT NULL,
  PRIMARY KEY (author_id)
);
CREATE TABLE Paper (
  paper_id varchar(25) NOT NULL,
  title varchar(255) DEFAULT NULL,
  venue varchar(255) DEFAULT NULL,
  year int(11) DEFAULT NULL,
  PRIMARY KEY (paper_id)
);"
address_1,"CREATE TABLE Student (
        StuID        INTEGER PRIMARY KEY,
        LName        VARCHAR(12),
        Fname        VARCHAR(12),
        Age      INTEGER,
        Sex      VARCHAR(1),
        Major        INTEGER,
        Advisor      INTEGER,
        city_code    VARCHAR(3),
        FOREIGN KEY(city_code) REFERENCES City(city_code)
 );
CREATE TABLE Direct_distance (
  city1_code varchar(3) ,
  city2_code varchar(3) ,
  distance INTEGER,
  FOREIGN KEY(city1_code) REFERENCES City(city_code),
  FOREIGN KEY(city2_code) REFERENCES City(city_code)
);
CREATE TABLE City (
       city_code   VARCHAR(3) PRIMARY KEY,
       city_name   VARCHAR(25),
       state  VARCHAR(2),
       country  VARCHAR(25),
       latitude  FLOAT,
       longitude FLOAT
);"
advertising_agencies,"CREATE TABLE Agencies (
agency_id INTEGER PRIMARY KEY,
agency_details VARCHAR(255) NOT NULL
);
CREATE TABLE Staff (
staff_id INTEGER PRIMARY KEY,
agency_id INTEGER NOT NULL,
staff_details VARCHAR(255) NOT NULL
);
CREATE TABLE Clients (
client_id INTEGER PRIMARY KEY,
agency_id INTEGER NOT NULL,
sic_code VARCHAR(10) NOT NULL,
client_details VARCHAR(255) NOT NULL,
FOREIGN KEY (agency_id ) REFERENCES Agencies(agency_id )
);
CREATE TABLE Invoices (
invoice_id INTEGER PRIMARY KEY,
client_id INTEGER NOT NULL,
invoice_status VARCHAR(10) NOT NULL,
invoice_details VARCHAR(255) NOT NULL,
FOREIGN KEY (client_id ) REFERENCES Clients(client_id )
);
CREATE TABLE Meetings (
meeting_id INTEGER PRIMARY KEY,
client_id INTEGER NOT NULL,
meeting_outcome VARCHAR(10) NOT NULL,
meeting_type VARCHAR(10) NOT NULL,
billable_yn VARCHAR(1),
start_date_time DATETIME,
end_date_time DATETIME,
purpose_of_meeting VARCHAR(255),
other_details VARCHAR(255) NOT NULL,
FOREIGN KEY (client_id ) REFERENCES Clients(client_id )
);
CREATE TABLE Payments (
payment_id INTEGER NOT NULL ,
invoice_id INTEGER NOT NULL,
payment_details VARCHAR(255) NOT NULL,
FOREIGN KEY (invoice_id ) REFERENCES Invoices(invoice_id )
);
CREATE TABLE Staff_in_Meetings (
meeting_id INTEGER NOT NULL,
staff_id INTEGER NOT NULL,
FOREIGN KEY (meeting_id ) REFERENCES Meetings(meeting_id ),
FOREIGN KEY (staff_id ) REFERENCES Staff(staff_id )
);"
art_1,"CREATE TABLE Artists (
  artistID INTEGER,
  lname TEXT,
  fname TEXT,
  birthYear INTEGER,
  deathYear INTEGER,
  PRIMARY KEY (artistID)
);
CREATE TABLE Paintings (
  paintingID INTEGER,
  title TEXT,
  year INTEGER,
  height_mm INTEGER,
  width_mm INTEGER,
  medium TEXT,
  mediumOn TEXT,
  location TEXT,
  painterID INTEGER,
  PRIMARY KEY (paintingID),
  FOREIGN KEY (painterID) REFERENCES Artists(artistID)
);
CREATE TABLE Sculptures (
  sculptureID INTEGER,
  title TEXT,
  year INTEGER,
  medium TEXT,
  location TEXT,
  sculptorID INTEGER,
  PRIMARY KEY (sculptureID),
  FOREIGN KEY (sculptorID) REFERENCES Artists(artistID)
);"
bakery_1,"CREATE TABLE customers (
 Id INTEGER PRIMARY KEY,
 LastName TEXT,
 FirstName TEXT
);
CREATE TABLE goods (
 Id TEXT PRIMARY KEY,
 Flavor TEXT,
 Food TEXT,
 Price REAL
);
CREATE TABLE items (
 Receipt INTEGER,
 Ordinal INTEGER,
 Item TEXT,
 PRIMARY KEY(Receipt, Ordinal),
 FOREIGN KEY (Item) REFERENCES goods(Id)
    FOREIGN KEY (Receipt) REFERENCES receipts(ReceiptNumber)
);
CREATE TABLE receipts (
 ReceiptNumber INTEGER PRIMARY KEY,
 Date TEXT,
 CustomerId INTEGER,
 FOREIGN KEY(CustomerId) REFERENCES customers(Id)
);"
bbc_channels,"CREATE TABLE channel (
Channel_ID int,
Name text,
Analogue_terrestrial_channel text,
Digital_terrestrial_channel text,
Internet text,
PRIMARY KEY (Channel_ID)
);
CREATE TABLE director (
Director_ID int,
Name text,
Age int,
PRIMARY KEY (Director_ID)
);
CREATE TABLE program (
Program_ID int,
Start_Year real,
Title text,
Director_ID int,
Channel_ID int,
PRIMARY KEY (Program_ID),
FOREIGN KEY (Director_ID) REFERENCES director(Director_ID),
FOREIGN KEY (Channel_ID) REFERENCES channel(Channel_ID)
);
CREATE TABLE director_admin (
Director_ID int,
Channel_ID int,
Is_first_director bool,
PRIMARY KEY (Director_ID,Channel_ID),
FOREIGN KEY (Director_ID) REFERENCES director(Director_ID),
FOREIGN KEY (Channel_ID) REFERENCES channel(Channel_ID)
);"
bike_racing,"CREATE TABLE bike (
    id int,
    product_name text,
    weight int,
    price real,
    material text,
    primary key(id)
);
CREATE TABLE cyclist (
    id int,
    heat int,
    name text,
    nation text,
    result real,
    primary key(id)
);
CREATE TABLE cyclists_own_bikes (
    cyclist_id int,
    bike_id int,
    purchase_year int,
    primary key(cyclist_id, bike_id),
    foreign key(cyclist_id) references cyclist(id),
    foreign key(bike_id) references bike(id)
);"
boat_1,"CREATE TABLE Sailors (
sid INTEGER primary key,
name TEXT,
rating INTEGER,
age INTEGER
);
CREATE TABLE Boats (
  bid INTEGER primary key,
  name TEXT,
  color TEXT
);
CREATE TABLE Reserves (
  sid INTEGER,
  bid INTEGER,
  day TEXT,
  foreign key (sid) references Sailors(sid),
  foreign key (bid) references Boats(bid)
);"
book_1,"CREATE TABLE Client (
IdClient CHAR(10) PRIMARY KEY,
 Name VARCHAR(25) NOT NULL,
 Address VARCHAR(60) NOT NULL,
 NumCC CHAR(16) NOT NULL);
CREATE TABLE Orders (
IdOrder CHAR(10) PRIMARY KEY,
 IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,
 DateOrder DATE,
 DateExped DATE);
CREATE TABLE Author (
idAuthor NUMBER PRIMARY KEY,
  Name VARCHAR(25));
CREATE TABLE Book (
ISBN CHAR(15) PRIMARY KEY,
Title VARCHAR(60) NOT NULL,
Author CHAR(4) NOT NULL,
PurchasePrice NUMBER(6,2) DEFAULT 0,
SalePrice NUMBER(6,2) DEFAULT 0);
CREATE TABLE Author_Book (
ISBN CHAR(15),
Author NUMBER,
CONSTRAINT al_PK PRIMARY KEY (ISBN, Author),
CONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES Book(ISBN) on delete cascade,
CONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES Author(idAuthorA));
CREATE TABLE Books_Order(
ISBN CHAR(15),
IdOrder CHAR(10),
amount NUMBER(3) CHECK (amount >0),
CONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),
CONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES Book(ISBN) on delete cascade,
CONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES Orders(IdOrder) on delete cascade);"
book_press,"CREATE TABLE author (
Author_ID int,
Name text,
Age int,
Gender text,
PRIMARY KEY (Author_ID)
);
CREATE TABLE press (
Press_ID int,
Name text,
Month_Profits_billion real,
Year_Profits_billion real,
PRIMARY KEY (Press_ID)
);
CREATE TABLE book (
Book_ID int,
Title text,
Book_Series text,
Author_ID int,
Press_ID int,
Sale_Amount text,
Release_date text,
PRIMARY KEY (Book_ID),
FOREIGN KEY (Author_ID) REFERENCES author(Author_ID),
FOREIGN KEY (Press_ID) REFERENCES press(Press_ID)
);"
book_review,"CREATE TABLE book (
Book_ID int,
Title text,
Type text,
Pages int,
Chapters int,
Audio text,
Release text,
PRIMARY KEY (Book_ID)
);
CREATE TABLE review (
Review_ID int,
Book_ID int,
Rating real,
Readers_in_Million real,
Rank int,
PRIMARY KEY (Review_ID),
FOREIGN KEY (Book_ID) REFERENCES book(Book_ID)
);"
car_racing,"CREATE TABLE country (
Country_Id int,
Country text,
Capital text,
Official_native_language text,
Regoin text,
PRIMARY KEY (Country_Id)
);
CREATE TABLE team (
Team_ID int,
Team text,
Make text,
Manager text,
Sponsor text,
Car_Owner text,
PRIMARY KEY (Team_ID)
);
CREATE TABLE driver (
Driver_ID int,
Driver text,
Country int,
Age int,
Car_# real,
Make text,
Points text,
Laps real,
Winnings text,
PRIMARY KEY (Driver_ID),
FOREIGN KEY (Country) REFERENCES country(Country_ID)
);
CREATE TABLE team_driver (
Team_ID int,
Driver_ID int,
PRIMARY KEY (Team_ID,Driver_ID),
FOREIGN KEY (Team_ID) REFERENCES team(Team_ID),
FOREIGN KEY (Driver_ID) REFERENCES driver(Driver_ID)
);"
car_road_race,"CREATE TABLE driver (
Driver_ID int,
Driver_Name text,
Entrant text,
Constructor text,
Chassis text,
Engine text,
Age int,
PRIMARY KEY (Driver_ID)
);
CREATE TABLE race (
Road int,
Driver_ID int,
Race_Name text,
Pole_Position text,
Fastest_Lap text,
Winning_driver text,
Winning_team text,
Report text,
PRIMARY KEY (Road),
FOREIGN KEY (Driver_ID) REFERENCES driver(Driver_ID)
);"
club_leader,"CREATE TABLE member (
Member_ID int,
Name text,
Nationality text,
Age int,
PRIMARY KEY (Member_ID)
);
CREATE TABLE club (
Club_ID int,
Overall_Ranking int,
Team_Leader text,
Club_Name text,
PRIMARY KEY (Club_ID)
);
CREATE TABLE club_leader (
Club_ID int,
Member_ID int,
Year_Join text,
PRIMARY KEY (Club_ID,Member_ID),
FOREIGN KEY (Club_ID) REFERENCES club(Club_ID),
FOREIGN KEY (Member_ID) REFERENCES member(Member_ID)
);"
conference,"CREATE TABLE conference (
Conference_ID int,
Conference_Name text,
Year int,
Location text,
PRIMARY KEY (Conference_ID)
);
CREATE TABLE institution (
Institution_ID int,
Institution_Name text,
Location text,
Founded int,
PRIMARY KEY (Institution_ID)
);
CREATE TABLE staff (
staff_ID int,
name text,
Age int,
Nationality text,
Institution_ID int,
PRIMARY KEY (staff_ID),
FOREIGN KEY (Institution_ID) REFERENCES institution(Institution_ID)
);
CREATE TABLE conference_participation (
Conference_ID int,
staff_ID int,
role text,
PRIMARY KEY (staff_ID,Conference_ID),
FOREIGN KEY (staff_ID) REFERENCES staff(staff_ID),
FOREIGN KEY (Conference_ID) REFERENCES conference(Conference_ID)
);"
country_language,"CREATE TABLE languages (
id integer,
name text,
PRIMARY KEY (id)
);
CREATE TABLE countries (
id integer,
name text,
overall_score real,
justice_score real,
health_score real,
education_score real,
economics_score real,
politics_score real,
PRIMARY KEY (id)
);
CREATE TABLE official_languages (
language_id integer,
country_id integer,
PRIMARY KEY (language_id, country_id),
FOREIGN KEY (language_id) REFERENCES languages(id),
FOREIGN KEY (country_id) REFERENCES countries(id)
);"
cre_Doc_and_collections,"CREATE TABLE Document_Subsets (
Document_Subset_ID INTEGER NOT NULL,
Document_Subset_Name VARCHAR(255) NOT NULL,
Document_Subset_Details VARCHAR(255) NOT NULL,
PRIMARY KEY (Document_Subset_ID)
);
CREATE TABLE Collection_Subsets (
Collection_Subset_ID INTEGER NOT NULL,
Collection_Subset_Name VARCHAR(255) NOT NULL,
Collecrtion_Subset_Details VARCHAR(255) NOT NULL,
PRIMARY KEY (Collection_Subset_ID)
);
CREATE TABLE Document_Objects (
Document_Object_ID INTEGER NOT NULL,
Parent_Document_Object_ID INTEGER,
Owner VARCHAR(255),
Description VARCHAR(255),
Other_Details VARCHAR(255),
PRIMARY KEY (Document_Object_ID)
);
CREATE TABLE Collections (
Collection_ID INTEGER NOT NULL,
Parent_Collection_ID INTEGER,
Collection_Name VARCHAR(255),
Collection_Description VARCHAR(255),
PRIMARY KEY (Collection_ID)
);
CREATE TABLE Documents_in_Collections (
Document_Object_ID INTEGER NOT NULL,
Collection_ID INTEGER NOT NULL,
PRIMARY KEY (Document_Object_ID, Collection_ID),
FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),
FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)
);
CREATE TABLE Document_Subset_Members (
Document_Object_ID INTEGER NOT NULL,
Related_Document_Object_ID INTEGER NOT NULL,
Document_Subset_ID INTEGER NOT NULL,
PRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),
FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),
FOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects
(Document_Object_ID),
FOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)
);
CREATE TABLE Collection_Subset_Members (
Collection_ID INTEGER NOT NULL,
Related_Collection_ID INTEGER NOT NULL,
Collection_Subset_ID INTEGER NOT NULL,
PRIMARY KEY (Collection_ID, Related_Collection_ID),
FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),
FOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),
FOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)
);"
cre_Doc_Workflow,"CREATE TABLE Staff (
staff_id INTEGER NOT NULL,
staff_details VARCHAR(255) NOT NULL,
PRIMARY KEY (staff_id)
);
CREATE TABLE Ref_Staff_Roles (
staff_role_code CHAR(15) NOT NULL,
staff_role_description VARCHAR(255) NOT NULL,
PRIMARY KEY (staff_role_code)
);
CREATE TABLE Process_Outcomes (
process_outcome_code CHAR(15) NOT NULL,
process_outcome_description VARCHAR(255) NOT NULL,
PRIMARY KEY (process_outcome_code)
);
CREATE TABLE Process_Status (
process_status_code CHAR(15) NOT NULL,
process_status_description VARCHAR(255) NOT NULL,
PRIMARY KEY (process_status_code)
);
CREATE TABLE Authors (
author_name VARCHAR(255) NOT NULL,
other_details VARCHAR(255) NOT NULL,
PRIMARY KEY (author_name)
);
CREATE TABLE Documents (
document_id INTEGER NOT NULL,
author_name VARCHAR(255) NOT NULL,
document_name VARCHAR(255) NOT NULL,
document_description VARCHAR(255) NOT NULL,
other_details VARCHAR(255),
PRIMARY KEY (document_id),
FOREIGN KEY (author_name) REFERENCES Authors (author_name)
);
CREATE TABLE Business_Processes (
process_id INTEGER NOT NULL,
next_process_id INTEGER,
process_name VARCHAR(255) NOT NULL,
process_description VARCHAR(255) NOT NULL,
other_details VARCHAR(255),
PRIMARY KEY (process_id)
);
CREATE TABLE Documents_Processes (
document_id INTEGER NOT NULL,
process_id INTEGER NOT NULL,
process_outcome_code CHAR(15) NOT NULL,
process_status_code CHAR(15) NOT NULL,
PRIMARY KEY (document_id, process_id),
FOREIGN KEY (document_id) REFERENCES Documents (document_id),
FOREIGN KEY (process_id) REFERENCES Business_Processes (process_id),
FOREIGN KEY (process_outcome_code) REFERENCES Process_Outcomes (process_outcome_code),
FOREIGN KEY (process_status_code) REFERENCES Process_Status (process_status_code)
);"
cre_Students_Information_Systems,"CREATE TABLE Students (
student_id INTEGER NOT NULL,
bio_data VARCHAR(255) NOT NULL,
student_details VARCHAR(255) NOT NULL,
PRIMARY KEY (student_id)
);
CREATE TABLE Transcripts (
transcript_id INTEGER NOT NULL,
student_id INTEGER NOT NULL,
date_of_transcript DATETIME(3),
transcript_details VARCHAR(255) NOT NULL,
PRIMARY KEY (transcript_id),
FOREIGN KEY (student_id) REFERENCES Students (student_id)
);
CREATE TABLE Behaviour_Monitoring (
behaviour_monitoring_id INTEGER NOT NULL,
student_id INTEGER NOT NULL,
behaviour_monitoring_details VARCHAR(255) NOT NULL,
PRIMARY KEY (behaviour_monitoring_id),
FOREIGN KEY (student_id) REFERENCES Students (student_id)
);
CREATE TABLE Addresses (
address_id INTEGER NOT NULL,
address_details VARCHAR(255) NOT NULL,
PRIMARY KEY (address_id)
);
CREATE TABLE Ref_Event_Types (
event_type_code CHAR(10) NOT NULL,
event_type_description VARCHAR(255) NOT NULL,
PRIMARY KEY (event_type_code)
);
CREATE TABLE Ref_Achievement_Type (
achievement_type_code CHAR(15) NOT NULL,
achievement_type_description VARCHAR(80),
PRIMARY KEY (achievement_type_code)
);
CREATE TABLE Ref_Address_Types (
address_type_code CHAR(10) NOT NULL,
address_type_description VARCHAR(255) NOT NULL,
PRIMARY KEY (address_type_code)
);
CREATE TABLE Ref_Detention_Type (
detention_type_code CHAR(10) NOT NULL,
detention_type_description VARCHAR(80),
PRIMARY KEY (detention_type_code)
);
CREATE TABLE Student_Events (
event_id INTEGER NOT NULL,
event_type_code CHAR(10) NOT NULL,
student_id INTEGER NOT NULL,
event_date DATETIME(3),
other_details VARCHAR(255) NOT NULL,
PRIMARY KEY (event_id),
FOREIGN KEY (student_id) REFERENCES Students (student_id),
FOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)
);
CREATE TABLE Teachers (
teacher_id INTEGER NOT NULL,
teacher_details VARCHAR(255),
PRIMARY KEY (teacher_id)
);
CREATE TABLE Student_Loans (
student_loan_id INTEGER NOT NULL,
student_id INTEGER NOT NULL,
date_of_loan DATETIME(3),
amount_of_loan DECIMAL(15,4),
other_details VARCHAR(255),
PRIMARY KEY (student_loan_id),
FOREIGN KEY (student_id) REFERENCES Students (student_id)
);
CREATE TABLE Classes (
class_id INTEGER NOT NULL,
student_id INTEGER NOT NULL,
teacher_id INTEGER NOT NULL,
class_details VARCHAR(255) NOT NULL,
PRIMARY KEY (class_id),
FOREIGN KEY (student_id) REFERENCES Students (student_id),
FOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)
);
CREATE TABLE Students_Addresses (
student_address_id INTEGER NOT NULL,
address_id INTEGER NOT NULL,
address_type_code CHAR(10) NOT NULL,
student_id INTEGER NOT NULL,
date_from DATETIME(3),
date_to DATETIME(3),
PRIMARY KEY (student_address_id),
FOREIGN KEY (student_id) REFERENCES Students (student_id),
FOREIGN KEY (address_id) REFERENCES Addresses (address_id),
FOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)
);
CREATE TABLE Detention (
detention_id INTEGER NOT NULL,
detention_type_code CHAR(10) NOT NULL,
student_id INTEGER NOT NULL,
datetime_detention_start DATETIME(3),
datetime_detention_end DATETIME(3),
detention_summary VARCHAR(255),
other_details VARCHAR(255),
PRIMARY KEY (detention_id),
FOREIGN KEY (student_id) REFERENCES Students (student_id),
FOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)
);
CREATE TABLE Achievements (
achievement_id INTEGER NOT NULL,
achievement_type_code CHAR(15) NOT NULL,
student_id INTEGER NOT NULL,
date_achievement DATETIME(3),
achievement_details VARCHAR(255),
other_details VARCHAR(255),
PRIMARY KEY (achievement_id),
FOREIGN KEY (student_id) REFERENCES Students (student_id),
FOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)
);"
customers_and_orders,"CREATE TABLE Products (
product_id INTEGER PRIMARY KEY,
product_type_code VARCHAR(15),
product_name VARCHAR(80),
product_price DOUBLE NULL
);
CREATE TABLE Addresses (
address_id INTEGER PRIMARY KEY,
address_details VARCHAR(255)
);
CREATE TABLE Customers (
customer_id INTEGER PRIMARY KEY,
address_id INTEGER NOT NULL,
payment_method_code VARCHAR(15),
customer_number VARCHAR(20),
customer_name VARCHAR(80),
customer_address VARCHAR(255),
customer_phone VARCHAR(80),
customer_email VARCHAR(80)
);
CREATE TABLE Customer_Orders (
order_id INTEGER PRIMARY KEY,
customer_id INTEGER NOT NULL,
order_date DATETIME NOT NULL,
order_status_code VARCHAR(15),
FOREIGN KEY (customer_id ) REFERENCES Customers(customer_id )
);
CREATE TABLE Order_Items (
order_item_id INTEGER NOT NULL ,
order_id INTEGER NOT NULL,
product_id INTEGER NOT NULL,
order_quantity VARCHAR(80),
FOREIGN KEY (order_id ) REFERENCES Customer_Orders(order_id ),
FOREIGN KEY (product_id ) REFERENCES Products(product_id )
);"
district_spokesman,"CREATE TABLE district (
District_ID int,
Name text,
Area_km real,
Population real,
Density_km real,
Government_website text,
PRIMARY KEY (District_ID)
);
CREATE TABLE spokesman (
Spokesman_ID int,
Name text,
Age int,
Speach_title text,
Rank_position real,
Points real,
PRIMARY KEY (Spokesman_ID)
);
CREATE TABLE spokesman_district (
Spokesman_ID int,
District_ID int,
Start_year text,
PRIMARY KEY (Spokesman_ID),
FOREIGN KEY (Spokesman_ID) REFERENCES spokesman(Spokesman_ID),
FOREIGN KEY (District_ID) REFERENCES district(District_ID)
);"
e_commerce,"PRAGMA foreign_keys = ON;
CREATE TABLE Products (
product_id INTEGER PRIMARY KEY ,
parent_product_id INTEGER,
product_name VARCHAR(80),
product_price DECIMAL(19,4) DEFAULT 0,
product_color VARCHAR(50),
product_size VARCHAR(50),
product_description VARCHAR(255)
);
CREATE TABLE Customers (
customer_id INTEGER PRIMARY KEY,
gender_code VARCHAR(1) NOT NULL,
customer_first_name VARCHAR(50),
customer_middle_initial VARCHAR(1),
customer_last_name VARCHAR(50),
email_address VARCHAR(255),
login_name VARCHAR(80),
login_password VARCHAR(20),
phone_number VARCHAR(255),
address_line_1 VARCHAR(255),
town_city VARCHAR(50),
county VARCHAR(50),
country VARCHAR(50)
);
CREATE TABLE Customer_Payment_Methods (
customer_id INTEGER NOT NULL,
payment_method_code VARCHAR(10) NOT NULL,
FOREIGN KEY (customer_id ) REFERENCES Customers(customer_id )
);
CREATE TABLE Invoices (
invoice_number INTEGER PRIMARY KEY,
invoice_status_code VARCHAR(10) NOT NULL,
invoice_date DATETIME
);
CREATE TABLE Orders (
order_id INTEGER PRIMARY KEY,
customer_id INTEGER NOT NULL,
order_status_code VARCHAR(10) NOT NULL,
date_order_placed DATETIME NOT NULL,
FOREIGN KEY (customer_id ) REFERENCES Customers(customer_id )
);
CREATE TABLE Order_Items (
order_item_id INTEGER PRIMARY KEY ,
product_id INTEGER NOT NULL,
order_id INTEGER NOT NULL,
order_item_status_code VARCHAR(10) NOT NULL,
FOREIGN KEY (product_id ) REFERENCES Products(product_id ),
FOREIGN KEY (order_id ) REFERENCES Orders(order_id )
);
CREATE TABLE Shipments (
shipment_id INTEGER PRIMARY KEY,
order_id INTEGER NOT NULL,
invoice_number INTEGER NOT NULL,
shipment_tracking_number VARCHAR(80),
shipment_date DATETIME,
FOREIGN KEY (invoice_number ) REFERENCES Invoices(invoice_number ),
FOREIGN KEY (order_id ) REFERENCES Orders(order_id )
);
CREATE TABLE Shipment_Items (
shipment_id INTEGER NOT NULL,
order_item_id INTEGER NOT NULL,
PRIMARY KEY (shipment_id,order_item_id),
FOREIGN KEY (shipment_id ) REFERENCES Shipments(shipment_id ),
FOREIGN KEY (order_item_id ) REFERENCES Order_Items(order_item_id )
);"
government_shift,"CREATE TABLE Services (
Service_ID INTEGER NOT NULL,
Service_Details VARCHAR(255),
PRIMARY KEY (Service_ID)
);
CREATE TABLE Customers (
Customer_ID INTEGER NOT NULL,
Customer_Details VARCHAR(255) NOT NULL,
PRIMARY KEY (Customer_ID)
);
CREATE TABLE Channels (
Channel_ID INTEGER NOT NULL,
Channel_Details VARCHAR(255) NOT NULL,
PRIMARY KEY (Channel_ID)
);
CREATE TABLE Customers_and_Services (
Customers_and_Services_ID INTEGER NOT NULL,
Customer_ID INTEGER,
Service_ID INTEGER,
Customers_and_Services_Details CHAR(15) NOT NULL,
PRIMARY KEY (Customers_and_Services_ID),
FOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),
FOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)
);
CREATE TABLE Customer_Interactions (
Customer_Interaction_ID INTEGER NOT NULL,
Channel_ID INTEGER,
Customer_ID INTEGER,
Service_ID INTEGER,
Status_Code CHAR(15),
Services_and_Channels_Details VARCHAR(255),
PRIMARY KEY (Customer_Interaction_ID),
FOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),
FOREIGN KEY (Channel_ID) REFERENCES Channels (Channel_ID),
FOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)
);
CREATE TABLE Integration_Platform (
Integration_Platform_ID INTEGER NOT NULL,
Customer_Interaction_ID INTEGER NOT NULL,
Integration_Platform_Details VARCHAR(255) NOT NULL,
PRIMARY KEY (Integration_Platform_ID),
FOREIGN KEY (Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID)
);
CREATE TABLE Analytical_Layer (
Analytical_ID INTEGER NOT NULL,
Customers_and_Services_ID VARCHAR(40) NOT NULL,
Pattern_Recognition VARCHAR(255) NOT NULL,
Analytical_Layer_Type_Code CHAR(15),
PRIMARY KEY (Analytical_ID),
FOREIGN KEY (Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID)
);"
headphone_store,"CREATE TABLE headphone (
Headphone_ID int,
Model text,
Class text,
Driver-matched_dB real,
Construction text,
Earpads text,
Price int,
PRIMARY KEY (Headphone_ID)
);
CREATE TABLE store (
Store_ID int,
Name text,
Neighborhood text,
Parking text,
Date_Opened text,
PRIMARY KEY (Store_ID)
);
CREATE TABLE stock (
Store_ID int,
Headphone_ID int,
Quantity int,
PRIMARY KEY (Store_ID,Headphone_ID),
FOREIGN KEY (Store_ID) REFERENCES store(Store_ID),
FOREIGN KEY (Headphone_ID) REFERENCES headphone(Headphone_ID)
);"
institution_sports,"CREATE TABLE institution (
Institution_ID int,
Name text,
Team text,
City text,
Province text,
Founded real,
Affiliation text,
Enrollment real,
Endowment text,
Stadium text,
Capacity real,
PRIMARY KEY (Institution_ID)
);
CREATE TABLE Championship (
Institution_ID int,
Nickname text,
Joined real,
Number_of_Championships real,
PRIMARY KEY (Institution_ID),
FOREIGN KEY (Institution_ID) REFERENCES institution(Institution_ID)
);"
movie_2,"CREATE TABLE Movies (
  Code INTEGER PRIMARY KEY,
  Title VARCHAR(255) NOT NULL,
  Rating VARCHAR(255) 
);
CREATE TABLE MovieTheaters (
  Code INTEGER PRIMARY KEY,
  Name VARCHAR(255) NOT NULL,
  Movie INTEGER,
    FOREIGN KEY (Movie) REFERENCES Movies(Code)
);"
online_exams,"CREATE TABLE Students (
Student_ID INTEGER NOT NULL,
First_Name VARCHAR(255),
Middle_Name VARCHAR(255),
Last_Name VARCHAR(255),
Gender_MFU CHAR(1),
Student_Address VARCHAR(255),
Email_Adress VARCHAR(255),
Cell_Mobile_Phone VARCHAR(255),
Home_Phone VARCHAR(255),
PRIMARY KEY (Student_ID)
);
CREATE TABLE Questions (
Question_ID INTEGER NOT NULL,
Type_of_Question_Code VARCHAR(15) NOT NULL,
Question_Text VARCHAR(255),
PRIMARY KEY (Question_ID)
);
CREATE TABLE Exams (
Exam_ID INTEGER NOT NULL,
Subject_Code CHAR(15) NOT NULL,
Exam_Date DATETIME,
Exam_Name VARCHAR(255),
PRIMARY KEY (Exam_ID)
);
CREATE TABLE Questions_in_Exams (
Exam_ID INTEGER NOT NULL,
Question_ID INTEGER NOT NULL,
PRIMARY KEY (Exam_ID, Question_ID),
FOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID),
FOREIGN KEY (Exam_ID) REFERENCES Exams (Exam_ID)
);
CREATE TABLE Valid_Answers (
Valid_Answer_ID INTEGER NOT NULL,
Question_ID INTEGER NOT NULL,
Valid_Answer_Text VARCHAR(255),
PRIMARY KEY (Valid_Answer_ID),
FOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID)
);
CREATE TABLE Student_Answers (
Student_Answer_ID INTEGER NOT NULL,
Exam_ID INTEGER NOT NULL,
Question_ID INTEGER NOT NULL,
Student_ID INTEGER NOT NULL,
Date_of_Answer DATETIME,
Comments VARCHAR(255),
Satisfactory_YN VARCHAR(1),
Student_Answer_Text VARCHAR(255),
PRIMARY KEY (Student_Answer_ID),
FOREIGN KEY (Student_ID) REFERENCES Students (Student_ID),
FOREIGN KEY (Exam_ID, Question_ID) REFERENCES Questions_in_Exams (Exam_ID,Question_ID)
);
CREATE TABLE Student_Assessments (
Student_Answer_ID VARCHAR(100) NOT NULL,
Valid_Answer_ID INTEGER NOT NULL,
Student_Answer_Text VARCHAR(255),
Satisfactory_YN CHAR(1),
Assessment VARCHAR(40),
PRIMARY KEY (Student_Answer_ID),
FOREIGN KEY (Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID)
);"
pilot_1,"CREATE TABLE PilotSkills (
pilot_name CHAR(15) NOT NULL,
plane_name CHAR(15) NOT NULL,
age INTEGER,
PRIMARY KEY (pilot_name, plane_name),
FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)
);
CREATE TABLE Hangar (
plane_name CHAR(15) NOT NULL PRIMARY KEY,
 location CHAR(15)
);"
planet_1,"CREATE TABLE Employee (
  EmployeeID INTEGER PRIMARY KEY,
  Name VARCHAR(255) NOT NULL,
  Position VARCHAR(255) NOT NULL,
  Salary REAL NOT NULL,
  Remarks VARCHAR(255)
); 
CREATE TABLE Planet (
  PlanetID INTEGER PRIMARY KEY,
  Name VARCHAR(255) NOT NULL,
  Coordinates REAL NOT NULL
); 
CREATE TABLE Shipment (
  ShipmentID INTEGER PRIMARY KEY,
  Date DATE,
  Manager INTEGER NOT NULL,
  Planet INTEGER NOT NULL,
  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),
  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)
);
CREATE TABLE Has_Clearance (
  Employee INTEGER NOT NULL,
  Planet INTEGER NOT NULL,
  Level INTEGER NOT NULL,
  PRIMARY KEY(Employee, Planet),
  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),
  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)
); 
CREATE TABLE Client (
  AccountNumber INTEGER PRIMARY KEY,
  Name VARCHAR(255) NOT NULL
);
CREATE TABLE Package (
  Shipment INTEGER NOT NULL,
  PackageNumber INTEGER NOT NULL,
  Contents VARCHAR(255) NOT NULL,
  Weight REAL NOT NULL,
  Sender INTEGER NOT NULL,
  Recipient INTEGER NOT NULL,
  PRIMARY KEY(Shipment, PackageNumber),
  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),
  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),
  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber)
);"
real_estate_rentals,"CREATE TABLE Ref_Age_Categories (
age_category_code VARCHAR(15) PRIMARY KEY,
age_category_description VARCHAR(80)
);
CREATE TABLE Ref_Property_Types (
property_type_code VARCHAR(15) PRIMARY KEY,
property_type_description VARCHAR(80)
);
CREATE TABLE Ref_Room_Types (
room_type_code VARCHAR(15) PRIMARY KEY,
room_type_description VARCHAR(80)
);
CREATE TABLE Ref_User_Categories (
user_category_code VARCHAR(15) PRIMARY KEY,
user_category_description VARCHAR(80)
);
CREATE TABLE Addresses (
address_id INTEGER PRIMARY KEY,
line_1_number_building VARCHAR(80),
line_2_number_street VARCHAR(80),
line_3_area_locality VARCHAR(80),
town_city VARCHAR(80),
zip_postcode VARCHAR(20),
county_state_province VARCHAR(80),
country VARCHAR(50),
other_address_details VARCHAR(255)
);
CREATE TABLE Features (
feature_id INTEGER PRIMARY KEY,
feature_name VARCHAR(80),
feature_description VARCHAR(80)
);
CREATE TABLE Users (
user_id INTEGER PRIMARY KEY,
age_category_code VARCHAR(15),
user_category_code VARCHAR(15),
user_address_id INTEGER NOT NULL,
is_buyer VARCHAR(1),
is_seller VARCHAR(1),
login_name VARCHAR(25),
password VARCHAR(8),
date_registered DATETIME,
first_name VARCHAR(80),
middle_name VARCHAR(80),
last_name VARCHAR(80),
other_user_details VARCHAR(255)
);
CREATE TABLE Properties (
property_id INTEGER PRIMARY KEY,
property_address_id INTEGER NOT NULL,
owner_user_id INTEGER NOT NULL,
property_type_code VARCHAR(15) NOT NULL,
date_on_market DATETIME,
date_off_market DATETIME,
property_name VARCHAR(80),
property_description VARCHAR(255),
garage_yn VARCHAR(1),
parking_lots VARCHAR(1),
room_count VARCHAR(10),
vendor_requested_price DOUBLE NULL,
price_min DOUBLE NULL,
price_max DOUBLE NULL,
other_property_details VARCHAR(255),
FOREIGN KEY (owner_user_id ) REFERENCES Users(user_id ),
FOREIGN KEY (property_address_id ) REFERENCES Addresses(address_id ),
FOREIGN KEY (property_type_code ) REFERENCES Ref_Property_Types(property_type_code )
);
CREATE TABLE Property_Features (
property_id INTEGER NOT NULL,
feature_id INTEGER NOT NULL,
feature_value VARCHAR(80),
property_feature_description VARCHAR(80),
FOREIGN KEY (feature_id ) REFERENCES Features(feature_id ),
FOREIGN KEY (property_id ) REFERENCES Properties(property_id )
);
CREATE TABLE Property_Photos (
property_id INTEGER NOT NULL,
photo_seq INTEGER NOT NULL,
photo_title VARCHAR(30),
photo_description VARCHAR(255),
photo_filename VARCHAR(255),
FOREIGN KEY (property_id ) REFERENCES Properties(property_id )
);
CREATE TABLE Rooms (
property_id INTEGER NOT NULL,
room_number VARCHAR(10) NOT NULL,
room_type_code VARCHAR(15) NOT NULL,
room_size VARCHAR(20),
other_room_details VARCHAR(255),
FOREIGN KEY (property_id ) REFERENCES Properties(property_id ),
FOREIGN KEY (room_type_code ) REFERENCES Ref_Room_Types(room_type_code )
);
CREATE TABLE User_Property_History (
user_id INTEGER NOT NULL,
property_id INTEGER NOT NULL,
datestamp DATETIME NOT NULL,
FOREIGN KEY (user_id ) REFERENCES Users(user_id ),
FOREIGN KEY (property_id ) REFERENCES Properties(property_id )
);
CREATE TABLE User_Searches (
user_id INTEGER NOT NULL,
search_seq INTEGER NOT NULL,
search_datetime DATETIME,
search_string VARCHAR(80),
FOREIGN KEY (user_id ) REFERENCES Users(user_id )
);"
region_building,"CREATE TABLE building (
Building_ID int,
Region_ID int,
Name text,
Address text,
Number_of_Stories int,
Completed_Year int,
PRIMARY KEY (Building_ID),
FOREIGN KEY (Region_ID) REFERENCES region(Region_ID)
);
CREATE TABLE region (
Region_ID int,
Name text,
Capital text,
Area int,
Population int,
PRIMARY KEY (Region_ID)
);"
restaurant_bills,"CREATE TABLE customer (
Customer_ID int,
Name text,
Nationality text,
Card_Credit real,
Level_of_Membership int,
PRIMARY KEY (Customer_ID)
);
CREATE TABLE branch (
Branch_ID int,
Manager text,
Years_opened int,
Location_of_office text,
PRIMARY KEY (Branch_ID)
);
CREATE TABLE customer_order (
Customer_ID int,
Branch_ID int,
Dish_Name text,
Quantity int,
PRIMARY KEY (Customer_ID,Branch_ID,Dish_Name),
FOREIGN KEY (Customer_ID) REFERENCES customer(Customer_ID),
FOREIGN KEY (Branch_ID) REFERENCES branch(Branch_ID)
);"
sing_contest,"CREATE TABLE participants (
id int,
name text,
popularity real,
primary key (id)
);
CREATE TABLE songs (
id int,
language text,
original_artist text,
name text,
english_translation text,
primary key (id)
);
CREATE TABLE performance_score (
participant_id int,
songs_id int,
voice_sound_quality real,
rhythm_tempo real,
stage_presence real,
primary key (participant_id, songs_id),
foreign key(participant_id) references participants(id),
foreign key(songs_id) references songs(id)
);"
soccer_3,"CREATE TABLE club (
Club_ID int,
Name text,
Manager text,
Captain text,
Manufacturer text,
Sponsor text,
PRIMARY KEY (Club_ID)
);
CREATE TABLE player (
Player_ID real,
Name text,
Country text,
Earnings real,
Events_number int,
Wins_count int,
Club_ID int,
PRIMARY KEY (Player_ID),
FOREIGN KEY (Club_ID) REFERENCES club(Club_ID)
);"
tv_shows,"CREATE TABLE city_channel (
ID int,
City text,
Station_name text,
Owned_Since real,
Affiliation text,
PRIMARY KEY (ID)
);
CREATE TABLE radio (
Radio_ID int,
Transmitter text,
Radio_MHz text,
2FM_MHz text,
RnaG_MHz text,
Lyric_FM_MHz text,
ERP_kW text,
PRIMARY KEY (Radio_ID)
);
CREATE TABLE tv_show (
tv_show_ID int,
tv_show_name text,
Sub_tittle text,
Next_show_name text,
Original_Airdate text,
PRIMARY KEY (tv_show_ID)
);
CREATE TABLE city_channel_radio (
City_channel_ID int,
Radio_ID int,
Is_online bool,
PRIMARY KEY (City_channel_ID,Radio_ID),
FOREIGN KEY (City_channel_ID) REFERENCES city_channel(ID),
FOREIGN KEY (Radio_ID) REFERENCES radio(Radio_ID)
);"
university_rank,"CREATE TABLE university (
University_ID int,
University_Name text,
City text,
State text,
Team_Name text,
Affiliation text,
Enrollment int,
Home_Conference text,
PRIMARY KEY (University_ID)
);
CREATE TABLE overall_ranking (
Rank int,
University_ID int,
Reputation_point int,
Research_point int,
Citation_point int,
Total int,
PRIMARY KEY (University_ID),
FOREIGN KEY (University_ID) REFERENCES university(University_ID)
);
CREATE TABLE major (
Major_ID int,
Major_Name text,
Major_Code int,
PRIMARY KEY (Major_ID)
);
CREATE TABLE major_ranking (
Rank int,
University_ID int,
Major_ID int,
PRIMARY KEY (Rank,Major_ID,University_ID),
FOREIGN KEY (University_ID) REFERENCES university(University_ID),
FOREIGN KEY (Major_ID) REFERENCES major(Major_ID)
);"
vehicle_driver,"CREATE TABLE vehicle (
Vehicle_ID int,
Model text,
Build_Year text,
Top_Speed int,
Power int,
Builder text,
Total_Production text,
PRIMARY KEY (Vehicle_ID)
);
CREATE TABLE driver (
Driver_ID int,
Name text,
Citizenship text,
Racing_Series text,
PRIMARY KEY (Driver_ID)
);
CREATE TABLE vehicle_driver (
Driver_ID int,
Vehicle_ID int,
PRIMARY KEY (Driver_ID,Vehicle_ID),
FOREIGN KEY (Driver_ID) REFERENCES driver(Driver_ID),
FOREIGN KEY (Vehicle_ID) REFERENCES vehicle(Vehicle_ID)
);"
vehicle_rent,"CREATE TABLE Customers (
id int,
name text,
age int,
membership_credit int,
PRIMARY KEY (id)
);
CREATE TABLE Discount (
id int,
name text,
membership_credit int,
PRIMARY KEY (id)
);
CREATE TABLE Vehicles (
id int,
name text,
Model_year int,
Type_of_powertrain text,
Combined_fuel_economy_rate int,
City_fuel_economy_rate int,
Highway_fuel_economy_rate int,
Cost_per_25_miles real,
Annual_fuel_cost real,
Notes text,
PRIMARY KEY (id)
);
CREATE TABLE Renting_history (
id int,
customer_id int,
discount_id int,
vehicles_id int,
total_hours int,
PRIMARY KEY (id),
FOREIGN KEY (customer_id) REFERENCES Customers(id),
FOREIGN KEY (vehicles_id) REFERENCES Vehicles(id),
FOREIGN KEY (discount_id) REFERENCES Discount(id)
);"
video_game,"CREATE TABLE platform (
Platform_ID int,
Platform_name text,
Market_district text,
Download_rank int,
PRIMARY KEY (Platform_ID)
);
INSERT INTO  platform VALUES (1,Game Boy,Asia,2);
INSERT INTO  platform VALUES (2,SNES,USA,3);
INSERT INTO  platform VALUES (3,PlayStation,Europe,1);
INSERT INTO  platform VALUES (4,Nintendo 64,Brazil,4);
CREATE TABLE game (
Game_ID int,
Title text,
Release_Date text,
Franchise text,
Developers text,
Platform_ID int,
Units_sold_Millions int,
PRIMARY KEY (Game_ID),
FOREIGN KEY (Platform_ID) REFERENCES platform(Platform_ID)
);
CREATE TABLE player (
Player_ID int,
Rank_of_the_year int,
Player_name text,
Position text,
College text,
PRIMARY KEY (Player_ID)
);
CREATE TABLE game_player (
Player_ID int,
Game_ID int,
If_active bool,
PRIMARY KEY (Player_ID,Game_ID),
FOREIGN KEY (Player_ID) REFERENCES player(Player_ID),
FOREIGN KEY (Game_ID) REFERENCES game(Game_ID)
);"
warehouse_1,"CREATE TABLE Warehouses (
   Code INTEGER NOT NULL,
   Location VARCHAR(255) NOT NULL ,
   Capacity INTEGER NOT NULL,
   PRIMARY KEY (Code)
 );
CREATE TABLE Boxes (
    Code CHAR(4) NOT NULL,
    Contents VARCHAR(255) NOT NULL ,
    Value REAL NOT NULL ,
    Warehouse INTEGER NOT NULL,
    PRIMARY KEY (Code),
    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code)
 );"
geo,"CREATE TABLE `state` (
  `state_name` text,  
  `population` integer DEFAULT NULL,  
  `area` double DEFAULT NULL,  
  `country_name` varchar(3) NOT NULL DEFAULT '',  
  `capital` text,  
  `density` double DEFAULT NULL,  
  PRIMARY KEY (`state_name`)
);

CREATE TABLE `city` (
  `city_name` text,  
  `population` integer DEFAULT NULL,  
  `country_name` varchar(3) NOT NULL DEFAULT '',  
  `state_name` text,  
  PRIMARY KEY (`city_name`,`state_name`),  
  FOREIGN KEY(`state_name`) REFERENCES `state`(`state_name`)
);
CREATE TABLE `border_info` (
  `state_name` text,  
  `border` text,  
  PRIMARY KEY (`border`,`state_name`),  
  FOREIGN KEY(`state_name`) REFERENCES `state`(`state_name`),  
  FOREIGN KEY(`border`) REFERENCES `state`(`state_name`)
);
CREATE TABLE `highlow` (
  `state_name` text,  
  `highest_elevation` text,  
  `lowest_point` text,  
  `highest_point` text,  
  `lowest_elevation` text,  
  PRIMARY KEY (`state_name`),  
  FOREIGN KEY(`state_name`) REFERENCES `state`(`state_name`)
);
CREATE TABLE `lake` (
  `lake_name` text,  
  `area` double DEFAULT NULL,  
  `country_name` varchar(3) NOT NULL DEFAULT '',  
  `state_name` text
);
CREATE TABLE `mountain` (
  `mountain_name` text,  
  `mountain_altitude` integer DEFAULT NULL,  
  `country_name` varchar(3) NOT NULL DEFAULT '',  
  `state_name` text,  
  PRIMARY KEY (`mountain_name`, `state_name`),  
  FOREIGN KEY(`state_name`) REFERENCES `state`(`state_name`)
);
CREATE TABLE `river` (
  `river_name` text,  
  `length` integer DEFAULT NULL,  
  `country_name` varchar(3) NOT NULL DEFAULT '',  
  `traverse` text,  
  PRIMARY KEY (`river_name`),  
  FOREIGN KEY(`traverse`) REFERENCES `state`(`state_name`)
);"
yelp,"CREATE TABLE business (
bid int,
business_id text,
name text,
full_address text,
city text,
latitude text,
longitude text,
review_count int,
is_open int,
rating real,
state text,
primary key(bid)
);
CREATE TABLE category (
id int,
business_id text,
category_name text,
primary key(id),
foreign key(business_id) references `business`(business_id)
);
CREATE TABLE user (
uid int,
user_id text,
name text,
primary key(uid)
);
CREATE TABLE checkin (
cid int,
business_id text,
count int,
day text,
primary key(cid),
foreign key(business_id) references `business`(business_id)
);
CREATE TABLE neighbourhood (
id int,
business_id text,
neighbourhood_name text,
primary key(id),
foreign key(business_id) references `business`(business_id)
);
CREATE TABLE review (
rid int,
business_id text,
user_id text,
rating real,
text text,
year int,
month text,
primary key(rid),
foreign key(business_id) references `business`(business_id),
foreign key(user_id) references `user`(user_id)
);
CREATE TABLE tip (
tip_id int,
business_id text,
text text,
user_id text,
likes int,
year int,
month text,
primary key(tip_id)
foreign key(business_id) references `business`(business_id),
foreign key(user_id) references `user`(user_id)
);"
imdb,"CREATE TABLE actor (
aid int,
gender text,
name text,
nationality text,
birth_city text,
birth_year int,
primary key(aid)
);
CREATE TABLE copyright (
id int,
msid int,
cid int,
primary key(id)
);
CREATE TABLE cast (
id int,
msid int,
aid int,
role int,
primary key(id),
foreign key(aid) references `actor`(aid),
foreign key(msid) references `copyright`(msid)
);
CREATE TABLE genre (
gid int,
genre text,
primary key(gid)
);
CREATE TABLE classification (
id int,
msid int,
gid int,
primary key(id),
foreign key(gid) references `genre`(gid),
foreign key(msid) references `copyright`(msid)
);
CREATE TABLE company (
id int,
name text,
country_code text,
primary key(id)
);
CREATE TABLE director (
did int,
gender text,
name text,
nationality text,
birth_city text,
birth_year int,
primary key(did)
);
CREATE TABLE producer (
pid int,
gender text,
name text,
nationality text,
birth_city text,
birth_year int,
primary key(pid)
);
CREATE TABLE directed_by (
id int,
msid int,
did int,
primary key(id),
foreign key(msid) references `copyright`(msid),
foreign key(did) references `director`(did)
);
CREATE TABLE keyword (
id int,
keyword text,
primary key(id)
);
CREATE TABLE made_by (
id int,
msid int,
pid int,
primary key(id),
foreign key(msid) references `copyright`(msid),
foreign key(pid) references `producer`(pid)
);
CREATE TABLE movie (
mid int,
title text,
release_year int,
title_aka text,
budget text,
primary key(mid)
);
CREATE TABLE tags (
id int,
msid int,
kid int,
primary key(id),
foreign key(msid) references `copyright`(msid),
foreign key(kid) references `keyword`(kid)
);
CREATE TABLE tv_series (
sid int,
title text,
release_year int,
num_of_seasons int,
num_of_episodes int,
title_aka text,
budget text,
primary key(sid)
);
CREATE TABLE writer (
wid int,
gender text,
name int,
nationality int,
num_of_episodes int,
birth_city text,
birth_year int,
primary key(wid)
);
CREATE TABLE written_by (
id int,
msid int,
wid int,
foreign key(msid) references `copyright`(msid),
foreign key(wid) references `writer`(wid)
);"
